//
// Early-binding C++ API for SDAI (C++ wrappers)
//
#ifndef __RDF_LTD__IFC2x3_H
#define __RDF_LTD__IFC2x3_H

#include    <assert.h>
#include    <list>
#include    <string>

#include	"ifcengine.h"

namespace IFC2x3
{
    ///
    typedef int_t SdaiModel;
    typedef int_t SdaiInstance;

    typedef const char* TextValue;
    typedef int_t       IntValue;

    class StringValue : public std::string
    {
    public:
        StringValue(TextValue str) : std::string(str) {}
        operator const char* () const { return c_str(); }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename T> class Nullable
    {
    protected:
        T* m_value;

    public:
        Nullable<T>() : m_value(NULL) {}
        Nullable<T>(T value) { m_value = new T(value); }
        Nullable<T>(const Nullable<T>& src) { if (src.m_value) m_value = new T(*src.m_value); else m_value = NULL; }

        virtual ~Nullable<T>() { if (m_value) { delete m_value; } };

        bool IsNull() const { return !m_value; }
        T Value() const { assert(m_value); if (m_value) return *m_value; else return (T) 0; }

        virtual Nullable<T>& operator=(const Nullable<T>& src)
        {
            if (m_value) { delete m_value; }
            m_value = NULL;
            if (src.m_value) { m_value = new T(*(src.m_value)); }
            return *this;
        }
    };

    //
    //
    enum class LOGICAL_VALUE { False = 0, True, Unknown };
    static TextValue LOGICAL_VALUE_[] = {"F", "T", "U", NULL};

    //
    //
    static int EnumerationNameToIndex(TextValue rEnumValues[], TextValue value)
    {
        if (value) {
            for (int i = 0; rEnumValues[i]; i++) {
                if (0 == _stricmp(value, rEnumValues[i])) {
                    return i;
                }
            }
        }
        return -1;
    }

    /// <summary>
    /// Helper class to handle and access SELECT instance data
    /// </summary>
    class Select
    {
    protected:
        SdaiInstance m_instance;
        TextValue m_attrName;

    private:
        void* m_adb;
        Select* m_outerSelect;

    public:
        void* ADB()
        {
            if (m_outerSelect) {
                return m_outerSelect->ADB();
            }

            if (!m_adb && m_instance && m_attrName) {
                m_adb = sdaiCreateEmptyADB();
                if (!sdaiGetAttrBN(m_instance, m_attrName, sdaiADB, &m_adb)) {
                    sdaiDeleteADB(m_adb);
                    m_adb = NULL;
                }
            }

            return m_adb;
        }

    protected:
        Select(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL)
            : m_instance(instance), m_attrName(attrName), m_adb(adb), m_outerSelect(NULL)
        {
            assert(instance);
        }

        Select(Select* outer)
            : m_instance(NULL), m_attrName(NULL), m_adb(NULL), m_outerSelect(outer)
        {
            assert(outer);
            if (m_outerSelect) {
                m_instance = m_outerSelect->m_instance;
            }
        }

        void SetADB(void* adb)
        {
            if (m_outerSelect) {
                m_outerSelect->SetADB(adb);
            }
            else {
                //???sdaiDeleteADB(m_adb);
                m_adb = adb;

                if (m_instance && m_attrName) {
                    sdaiPutAttrBN(m_instance, m_attrName, sdaiADB, m_adb);
                }
            }
        }

        //
        template <typename T> Nullable<T> getSimpleValue(TextValue typeName, IntValue sdaiType)
        {
            Nullable<T> ret;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    T val = (T) 0;
                    if (sdaiGetADBValue(adb, sdaiType, &val)) {
                        ret = val;
                    }
                }
            }
            return ret;
        }

        //
        template <typename T> void putSimpleValue(TextValue typeName, IntValue sdaiType, T value)
        {
            void* adb = sdaiCreateADB(sdaiType, &value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        TextValue getTextValue(TextValue typeName, IntValue sdaiType)
        {
            TextValue ret = NULL;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    if (!sdaiGetADBValue(adb, sdaiType, &ret)) {
                        ret = NULL;
                    }
                }
            }
            return ret;
        }

        //
        void putTextValue(TextValue typeName, IntValue sdaiType, TextValue value)
        {
            void* adb = sdaiCreateADB(sdaiType, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        int getEnumerationValue(TextValue typeName, TextValue rEnumValues[])
        {
            int ret = -1;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    TextValue value = NULL;
                    if (sdaiGetADBValue(adb, sdaiENUM, &value)) {
                        ret = EnumerationNameToIndex(rEnumValues, value);
                    }
                }
            }
            return ret;
        }

        //
        void putEnumerationValue(TextValue typeName, TextValue value)
        {
            void* adb = sdaiCreateADB(sdaiENUM, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        SdaiInstance getEntityInstance(TextValue typeName)
        {
            SdaiInstance ret = 0;
            if (auto adb = ADB()) {
                SdaiInstance inst = 0;
                if (sdaiGetADBValue(adb, sdaiINSTANCE, &inst)) {
                    if (typeName == NULL || sdaiIsKindOfBN(inst, typeName)) {
                        ret = inst;
                    }
                }
            }
            return ret;
        }

        //
        void putEntityInstance(TextValue typeName, SdaiInstance inst)
        {
            if (inst == 0 || sdaiIsKindOfBN(inst, typeName)) {
                auto adb = sdaiCreateADB(sdaiINSTANCE, (void*) inst);
                SetADB(adb);
            }
            else {
                assert(0);
            }
        }

        //
        SdaiAggr getAggrValue(TextValue typeName)
        {
            SdaiAggr ret = NULL;
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (typeName == NULL || path && 0 == _stricmp(path, typeName)) {
                    if (!sdaiGetADBValue(adb, sdaiAGGR, &ret)) {
                        ret = NULL;
                    }
                }
            }
            return ret;
        }

        //
        void putAggrValue(TextValue typeName, SdaiAggr value)
        {
            void* adb = sdaiCreateADB(sdaiAGGR, value);
            sdaiPutADBTypePath(adb, 1, typeName);
            SetADB(adb);
        }

        //
        bool IsADBType(TextValue typeName)
        {
            if (void* adb = ADB()) {
                char* path = sdaiGetADBTypePath(adb, 0);
                if (0 == _stricmp(path, typeName)) {
                    return true;
                }
            }
            return false;
        }

        bool IsADBEntity(TextValue typeName)
        {
            if (void* adb = ADB()) {
                IntValue inst = 0;
                if (sdaiGetADBValue(adb, sdaiINSTANCE, &inst)) {
                    if (sdaiIsKindOfBN(inst, typeName)) {
                        return true;
                    }
                }
            }
            return false;
        }
    };

    /// <summary>
    /// Aggregations templates
    /// </summary>
    /// 

    template <typename TArrayElem, typename TList> void ArrayToList(TArrayElem arrayElems[], IntValue numOfElems, TList& lst)
    {
        for (IntValue i = 0; i < numOfElems; i++) {
            lst.push_back(arrayElems[i]);
        }
    }

    template <typename TList> class AggrSerializer
    {
    public:
        //
        void FromAttr(TList& lst, SdaiInstance instance, TextValue attrName)
        {
            SdaiAggr aggr = NULL;
            sdaiGetAttrBN(instance, attrName, sdaiAGGR, &aggr);
            if (aggr) {
                FromSdaiAggr(lst, instance, aggr);
            }
        }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance inst, SdaiAggr aggr) = 0; 
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) = 0;
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, IntValue sdaiType> class AggrSerializerSimple : public AggrSerializer<TList>
    {
    public:
        AggrSerializerSimple() { assert(sdaiType == sdaiINTEGER || sdaiType == sdaiREAL || sdaiType == sdaiBOOLEAN); }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TElem val = 0;
                engiGetAggrElement(aggr, i, sdaiType, &val);
                lst.push_back(val);
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto const& v : lst) {
                TElem val = v;
                sdaiAppend((IntValue) aggr, sdaiType, &val);
            }
            return aggr;
        }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, IntValue sdaiType> class AggrSerializerText : public AggrSerializer<TList>
    {
    public:
        AggrSerializerText() { assert(sdaiType == sdaiSTRING || sdaiType == sdaiBINARY); }

        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TextValue val;
                engiGetAggrElement(aggr, i, sdaiType, &val);
                lst.push_back(val);
            }
        }

        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                TextValue v = val;
                sdaiAppend((IntValue) aggr, sdaiType, v);
            }
            return aggr;
        }

    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem> class AggrSerializerInstance : public AggrSerializer <TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*unused*/, SdaiAggr aggr) override
        {
            auto  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                SdaiInstance val = 0;
                engiGetAggrElement(aggr, i, sdaiINSTANCE, &val);
                TElem elem(val);
                if (val) {
                    lst.push_back(val);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            auto aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                SdaiInstance v = val;
                sdaiAppend((IntValue) aggr, sdaiINSTANCE, (void*) v);
            }
            return aggr;
        }
    };


    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TElem, TextValue* rEnumValues, IntValue sdaiType> class AggrSerializerEnum : public AggrSerializer<TList>
    {
    public:
        AggrSerializerEnum() { assert(sdaiType == sdaiENUM || sdaiType == sdaiLOGICAL); }

        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance /*instance*/, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                TextValue value = NULL;
                engiGetAggrElement(aggr, i, sdaiType, &value);
                int val = EnumerationNameToIndex(rEnumValues, value);
                if (val >= 0) {
                    lst.push_back((TElem) val);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto const& val : lst) {
                TextValue value = rEnumValues[(IntValue) val];
                sdaiAppend((IntValue) aggr, sdaiType, value);
            }
            return aggr;
        }
    };

    /// <summary>
    /// 
    /// </summary>
    template <typename TList, typename TNestedAggr, typename TNestedSerializer> class AggrSerializerAggr : public AggrSerializer<TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance instance, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                SdaiAggr nested = 0;
                engiGetAggrElement(aggr, i, sdaiAGGR, &nested);
                if (nested) {
                    lst.push_back(TNestedAggr());
                    TNestedSerializer nestedSerializer;
                    nestedSerializer.FromSdaiAggr(lst.back(), instance, nested);
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (TNestedAggr& val : lst) {
                TNestedSerializer nestedSerializer;
                SdaiAggr nested = nestedSerializer.ToSdaiAggr(val, instance, NULL);
                sdaiAppend((IntValue) aggr, sdaiAGGR, nested);
            }
            return aggr;
        }
    };

    template<typename TList, typename TElem> class AggrSerializerSelect : public AggrSerializer<TList>
    {
    public:
        //
        virtual void FromSdaiAggr(TList& lst, SdaiInstance instance, SdaiAggr aggr) override
        {
            IntValue  cnt = sdaiGetMemberCount(aggr);
            for (IntValue i = 0; i < cnt; i++) {
                void* adb = 0;
                engiGetAggrElement(aggr, i, sdaiADB, &adb);
                if (adb) {
                    lst.push_back(TElem(instance, NULL, adb));
                }
            }
        }

        //
        virtual SdaiAggr ToSdaiAggr(TList& lst, SdaiInstance instance, TextValue attrName) override
        {
            SdaiAggr aggr = sdaiCreateAggrBN(instance, attrName);
            for (auto& val : lst) {
                void* adb = val.ADB();
                if (adb) {
                    sdaiAppend((IntValue) aggr, sdaiADB, adb);
                }
            }
            return aggr;
        }
    };


    /// <summary>
    /// Provides utility methods to interact with a generic SDAI instnace
    /// You also can use object of this class instead of SdaiInstance handle in any place where the handle is required
    /// </summary>
    class Entity
    {
    protected:
        SdaiInstance m_instance;

    public:
        Entity(SdaiInstance instance, TextValue entityName)
        {
            m_instance = instance;

            if (m_instance != 0 && entityName != NULL) {
                if (!sdaiIsKindOfBN(m_instance, entityName)) {
                    m_instance = 0;
                }
            }
        }


        /// <summary>
        /// Conversion  to instance handle, so the object of the class can be used anywhere where a handle required
        /// </summary>
        operator SdaiInstance() const { return m_instance; }

    protected:
        //
        //
        int getENUM(TextValue attrName, TextValue rEnumValues[])
        {
            TextValue value = NULL;
            sdaiGetAttrBN(m_instance, attrName, sdaiENUM, (void*) &value);
            return EnumerationNameToIndex(rEnumValues, value);
        }
    };


    //
    // Entities forward declarations
    //

    class Ifc2DCompositeCurve;
    class IfcActionRequest;
    class IfcActor;
    class IfcActorRole;
    class IfcActuatorType;
    class IfcAddress;
    class IfcAirTerminalBoxType;
    class IfcAirTerminalType;
    class IfcAirToAirHeatRecoveryType;
    class IfcAlarmType;
    class IfcAngularDimension;
    class IfcAnnotation;
    class IfcAnnotationCurveOccurrence;
    class IfcAnnotationFillArea;
    class IfcAnnotationFillAreaOccurrence;
    class IfcAnnotationOccurrence;
    class IfcAnnotationSurface;
    class IfcAnnotationSurfaceOccurrence;
    class IfcAnnotationSymbolOccurrence;
    class IfcAnnotationTextOccurrence;
    class IfcApplication;
    class IfcAppliedValue;
    class IfcAppliedValueRelationship;
    class IfcApproval;
    class IfcApprovalActorRelationship;
    class IfcApprovalPropertyRelationship;
    class IfcApprovalRelationship;
    class IfcArbitraryClosedProfileDef;
    class IfcArbitraryOpenProfileDef;
    class IfcArbitraryProfileDefWithVoids;
    class IfcAsset;
    class IfcAsymmetricIShapeProfileDef;
    class IfcAxis1Placement;
    class IfcAxis2Placement2D;
    class IfcAxis2Placement3D;
    class IfcBeam;
    class IfcBeamType;
    class IfcBezierCurve;
    class IfcBlobTexture;
    class IfcBlock;
    class IfcBoilerType;
    class IfcBooleanClippingResult;
    class IfcBooleanResult;
    class IfcBoundaryCondition;
    class IfcBoundaryEdgeCondition;
    class IfcBoundaryFaceCondition;
    class IfcBoundaryNodeCondition;
    class IfcBoundaryNodeConditionWarping;
    class IfcBoundedCurve;
    class IfcBoundedSurface;
    class IfcBoundingBox;
    class IfcBoxedHalfSpace;
    class IfcBSplineCurve;
    class IfcBuilding;
    class IfcBuildingElement;
    class IfcBuildingElementComponent;
    class IfcBuildingElementPart;
    class IfcBuildingElementProxy;
    class IfcBuildingElementProxyType;
    class IfcBuildingElementType;
    class IfcBuildingStorey;
    class IfcCableCarrierFittingType;
    class IfcCableCarrierSegmentType;
    class IfcCableSegmentType;
    class IfcCalendarDate;
    class IfcCartesianPoint;
    class IfcCartesianTransformationOperator;
    class IfcCartesianTransformationOperator2D;
    class IfcCartesianTransformationOperator2DnonUniform;
    class IfcCartesianTransformationOperator3D;
    class IfcCartesianTransformationOperator3DnonUniform;
    class IfcCenterLineProfileDef;
    class IfcChamferEdgeFeature;
    class IfcChillerType;
    class IfcCircle;
    class IfcCircleHollowProfileDef;
    class IfcCircleProfileDef;
    class IfcClassification;
    class IfcClassificationItem;
    class IfcClassificationItemRelationship;
    class IfcClassificationNotation;
    class IfcClassificationNotationFacet;
    class IfcClassificationReference;
    class IfcClosedShell;
    class IfcCoilType;
    class IfcColourRgb;
    class IfcColourSpecification;
    class IfcColumn;
    class IfcColumnType;
    class IfcComplexProperty;
    class IfcCompositeCurve;
    class IfcCompositeCurveSegment;
    class IfcCompositeProfileDef;
    class IfcCompressorType;
    class IfcCondenserType;
    class IfcCondition;
    class IfcConditionCriterion;
    class IfcConic;
    class IfcConnectedFaceSet;
    class IfcConnectionCurveGeometry;
    class IfcConnectionGeometry;
    class IfcConnectionPointEccentricity;
    class IfcConnectionPointGeometry;
    class IfcConnectionPortGeometry;
    class IfcConnectionSurfaceGeometry;
    class IfcConstraint;
    class IfcConstraintAggregationRelationship;
    class IfcConstraintClassificationRelationship;
    class IfcConstraintRelationship;
    class IfcConstructionEquipmentResource;
    class IfcConstructionMaterialResource;
    class IfcConstructionProductResource;
    class IfcConstructionResource;
    class IfcContextDependentUnit;
    class IfcControl;
    class IfcControllerType;
    class IfcConversionBasedUnit;
    class IfcCooledBeamType;
    class IfcCoolingTowerType;
    class IfcCoordinatedUniversalTimeOffset;
    class IfcCostItem;
    class IfcCostSchedule;
    class IfcCostValue;
    class IfcCovering;
    class IfcCoveringType;
    class IfcCraneRailAShapeProfileDef;
    class IfcCraneRailFShapeProfileDef;
    class IfcCrewResource;
    class IfcCsgPrimitive3D;
    class IfcCsgSolid;
    class IfcCShapeProfileDef;
    class IfcCurrencyRelationship;
    class IfcCurtainWall;
    class IfcCurtainWallType;
    class IfcCurve;
    class IfcCurveBoundedPlane;
    class IfcCurveStyle;
    class IfcCurveStyleFont;
    class IfcCurveStyleFontAndScaling;
    class IfcCurveStyleFontPattern;
    class IfcDamperType;
    class IfcDateAndTime;
    class IfcDefinedSymbol;
    class IfcDerivedProfileDef;
    class IfcDerivedUnit;
    class IfcDerivedUnitElement;
    class IfcDiameterDimension;
    class IfcDimensionalExponents;
    class IfcDimensionCalloutRelationship;
    class IfcDimensionCurve;
    class IfcDimensionCurveDirectedCallout;
    class IfcDimensionCurveTerminator;
    class IfcDimensionPair;
    class IfcDirection;
    class IfcDiscreteAccessory;
    class IfcDiscreteAccessoryType;
    class IfcDistributionChamberElement;
    class IfcDistributionChamberElementType;
    class IfcDistributionControlElement;
    class IfcDistributionControlElementType;
    class IfcDistributionElement;
    class IfcDistributionElementType;
    class IfcDistributionFlowElement;
    class IfcDistributionFlowElementType;
    class IfcDistributionPort;
    class IfcDocumentElectronicFormat;
    class IfcDocumentInformation;
    class IfcDocumentInformationRelationship;
    class IfcDocumentReference;
    class IfcDoor;
    class IfcDoorLiningProperties;
    class IfcDoorPanelProperties;
    class IfcDoorStyle;
    class IfcDraughtingCallout;
    class IfcDraughtingCalloutRelationship;
    class IfcDraughtingPreDefinedColour;
    class IfcDraughtingPreDefinedCurveFont;
    class IfcDraughtingPreDefinedTextFont;
    class IfcDuctFittingType;
    class IfcDuctSegmentType;
    class IfcDuctSilencerType;
    class IfcEdge;
    class IfcEdgeCurve;
    class IfcEdgeFeature;
    class IfcEdgeLoop;
    class IfcElectricalBaseProperties;
    class IfcElectricalCircuit;
    class IfcElectricalElement;
    class IfcElectricApplianceType;
    class IfcElectricDistributionPoint;
    class IfcElectricFlowStorageDeviceType;
    class IfcElectricGeneratorType;
    class IfcElectricHeaterType;
    class IfcElectricMotorType;
    class IfcElectricTimeControlType;
    class IfcElement;
    class IfcElementarySurface;
    class IfcElementAssembly;
    class IfcElementComponent;
    class IfcElementComponentType;
    class IfcElementQuantity;
    class IfcElementType;
    class IfcEllipse;
    class IfcEllipseProfileDef;
    class IfcEnergyConversionDevice;
    class IfcEnergyConversionDeviceType;
    class IfcEnergyProperties;
    class IfcEnvironmentalImpactValue;
    class IfcEquipmentElement;
    class IfcEquipmentStandard;
    class IfcEvaporativeCoolerType;
    class IfcEvaporatorType;
    class IfcExtendedMaterialProperties;
    class IfcExternallyDefinedHatchStyle;
    class IfcExternallyDefinedSurfaceStyle;
    class IfcExternallyDefinedSymbol;
    class IfcExternallyDefinedTextFont;
    class IfcExternalReference;
    class IfcExtrudedAreaSolid;
    class IfcFace;
    class IfcFaceBasedSurfaceModel;
    class IfcFaceBound;
    class IfcFaceOuterBound;
    class IfcFaceSurface;
    class IfcFacetedBrep;
    class IfcFacetedBrepWithVoids;
    class IfcFailureConnectionCondition;
    class IfcFanType;
    class IfcFastener;
    class IfcFastenerType;
    class IfcFeatureElement;
    class IfcFeatureElementAddition;
    class IfcFeatureElementSubtraction;
    class IfcFillAreaStyle;
    class IfcFillAreaStyleHatching;
    class IfcFillAreaStyleTiles;
    class IfcFillAreaStyleTileSymbolWithStyle;
    class IfcFilterType;
    class IfcFireSuppressionTerminalType;
    class IfcFlowController;
    class IfcFlowControllerType;
    class IfcFlowFitting;
    class IfcFlowFittingType;
    class IfcFlowInstrumentType;
    class IfcFlowMeterType;
    class IfcFlowMovingDevice;
    class IfcFlowMovingDeviceType;
    class IfcFlowSegment;
    class IfcFlowSegmentType;
    class IfcFlowStorageDevice;
    class IfcFlowStorageDeviceType;
    class IfcFlowTerminal;
    class IfcFlowTerminalType;
    class IfcFlowTreatmentDevice;
    class IfcFlowTreatmentDeviceType;
    class IfcFluidFlowProperties;
    class IfcFooting;
    class IfcFuelProperties;
    class IfcFurnishingElement;
    class IfcFurnishingElementType;
    class IfcFurnitureStandard;
    class IfcFurnitureType;
    class IfcGasTerminalType;
    class IfcGeneralMaterialProperties;
    class IfcGeneralProfileProperties;
    class IfcGeometricCurveSet;
    class IfcGeometricRepresentationContext;
    class IfcGeometricRepresentationItem;
    class IfcGeometricRepresentationSubContext;
    class IfcGeometricSet;
    class IfcGrid;
    class IfcGridAxis;
    class IfcGridPlacement;
    class IfcGroup;
    class IfcHalfSpaceSolid;
    class IfcHeatExchangerType;
    class IfcHumidifierType;
    class IfcHygroscopicMaterialProperties;
    class IfcImageTexture;
    class IfcInventory;
    class IfcIrregularTimeSeries;
    class IfcIrregularTimeSeriesValue;
    class IfcIShapeProfileDef;
    class IfcJunctionBoxType;
    class IfcLaborResource;
    class IfcLampType;
    class IfcLibraryInformation;
    class IfcLibraryReference;
    class IfcLightDistributionData;
    class IfcLightFixtureType;
    class IfcLightIntensityDistribution;
    class IfcLightSource;
    class IfcLightSourceAmbient;
    class IfcLightSourceDirectional;
    class IfcLightSourceGoniometric;
    class IfcLightSourcePositional;
    class IfcLightSourceSpot;
    class IfcLine;
    class IfcLinearDimension;
    class IfcLocalPlacement;
    class IfcLocalTime;
    class IfcLoop;
    class IfcLShapeProfileDef;
    class IfcManifoldSolidBrep;
    class IfcMappedItem;
    class IfcMaterial;
    class IfcMaterialClassificationRelationship;
    class IfcMaterialDefinitionRepresentation;
    class IfcMaterialLayer;
    class IfcMaterialLayerSet;
    class IfcMaterialLayerSetUsage;
    class IfcMaterialList;
    class IfcMaterialProperties;
    class IfcMeasureWithUnit;
    class IfcMechanicalConcreteMaterialProperties;
    class IfcMechanicalFastener;
    class IfcMechanicalFastenerType;
    class IfcMechanicalMaterialProperties;
    class IfcMechanicalSteelMaterialProperties;
    class IfcMember;
    class IfcMemberType;
    class IfcMetric;
    class IfcMonetaryUnit;
    class IfcMotorConnectionType;
    class IfcMove;
    class IfcNamedUnit;
    class IfcObject;
    class IfcObjectDefinition;
    class IfcObjective;
    class IfcObjectPlacement;
    class IfcOccupant;
    class IfcOffsetCurve2D;
    class IfcOffsetCurve3D;
    class IfcOneDirectionRepeatFactor;
    class IfcOpeningElement;
    class IfcOpenShell;
    class IfcOpticalMaterialProperties;
    class IfcOrderAction;
    class IfcOrganization;
    class IfcOrganizationRelationship;
    class IfcOrientedEdge;
    class IfcOutletType;
    class IfcOwnerHistory;
    class IfcParameterizedProfileDef;
    class IfcPath;
    class IfcPerformanceHistory;
    class IfcPermeableCoveringProperties;
    class IfcPermit;
    class IfcPerson;
    class IfcPersonAndOrganization;
    class IfcPhysicalComplexQuantity;
    class IfcPhysicalQuantity;
    class IfcPhysicalSimpleQuantity;
    class IfcPile;
    class IfcPipeFittingType;
    class IfcPipeSegmentType;
    class IfcPixelTexture;
    class IfcPlacement;
    class IfcPlanarBox;
    class IfcPlanarExtent;
    class IfcPlane;
    class IfcPlate;
    class IfcPlateType;
    class IfcPoint;
    class IfcPointOnCurve;
    class IfcPointOnSurface;
    class IfcPolygonalBoundedHalfSpace;
    class IfcPolyline;
    class IfcPolyLoop;
    class IfcPort;
    class IfcPostalAddress;
    class IfcPreDefinedColour;
    class IfcPreDefinedCurveFont;
    class IfcPreDefinedDimensionSymbol;
    class IfcPreDefinedItem;
    class IfcPreDefinedPointMarkerSymbol;
    class IfcPreDefinedSymbol;
    class IfcPreDefinedTerminatorSymbol;
    class IfcPreDefinedTextFont;
    class IfcPresentationLayerAssignment;
    class IfcPresentationLayerWithStyle;
    class IfcPresentationStyle;
    class IfcPresentationStyleAssignment;
    class IfcProcedure;
    class IfcProcess;
    class IfcProduct;
    class IfcProductDefinitionShape;
    class IfcProductRepresentation;
    class IfcProductsOfCombustionProperties;
    class IfcProfileDef;
    class IfcProfileProperties;
    class IfcProject;
    class IfcProjectionCurve;
    class IfcProjectionElement;
    class IfcProjectOrder;
    class IfcProjectOrderRecord;
    class IfcProperty;
    class IfcPropertyBoundedValue;
    class IfcPropertyConstraintRelationship;
    class IfcPropertyDefinition;
    class IfcPropertyDependencyRelationship;
    class IfcPropertyEnumeratedValue;
    class IfcPropertyEnumeration;
    class IfcPropertyListValue;
    class IfcPropertyReferenceValue;
    class IfcPropertySet;
    class IfcPropertySetDefinition;
    class IfcPropertySingleValue;
    class IfcPropertyTableValue;
    class IfcProtectiveDeviceType;
    class IfcProxy;
    class IfcPumpType;
    class IfcQuantityArea;
    class IfcQuantityCount;
    class IfcQuantityLength;
    class IfcQuantityTime;
    class IfcQuantityVolume;
    class IfcQuantityWeight;
    class IfcRadiusDimension;
    class IfcRailing;
    class IfcRailingType;
    class IfcRamp;
    class IfcRampFlight;
    class IfcRampFlightType;
    class IfcRationalBezierCurve;
    class IfcRectangleHollowProfileDef;
    class IfcRectangleProfileDef;
    class IfcRectangularPyramid;
    class IfcRectangularTrimmedSurface;
    class IfcReferencesValueDocument;
    class IfcRegularTimeSeries;
    class IfcReinforcementBarProperties;
    class IfcReinforcementDefinitionProperties;
    class IfcReinforcingBar;
    class IfcReinforcingElement;
    class IfcReinforcingMesh;
    class IfcRelAggregates;
    class IfcRelAssigns;
    class IfcRelAssignsTasks;
    class IfcRelAssignsToActor;
    class IfcRelAssignsToControl;
    class IfcRelAssignsToGroup;
    class IfcRelAssignsToProcess;
    class IfcRelAssignsToProduct;
    class IfcRelAssignsToProjectOrder;
    class IfcRelAssignsToResource;
    class IfcRelAssociates;
    class IfcRelAssociatesAppliedValue;
    class IfcRelAssociatesApproval;
    class IfcRelAssociatesClassification;
    class IfcRelAssociatesConstraint;
    class IfcRelAssociatesDocument;
    class IfcRelAssociatesLibrary;
    class IfcRelAssociatesMaterial;
    class IfcRelAssociatesProfileProperties;
    class IfcRelationship;
    class IfcRelaxation;
    class IfcRelConnects;
    class IfcRelConnectsElements;
    class IfcRelConnectsPathElements;
    class IfcRelConnectsPorts;
    class IfcRelConnectsPortToElement;
    class IfcRelConnectsStructuralActivity;
    class IfcRelConnectsStructuralElement;
    class IfcRelConnectsStructuralMember;
    class IfcRelConnectsWithEccentricity;
    class IfcRelConnectsWithRealizingElements;
    class IfcRelContainedInSpatialStructure;
    class IfcRelCoversBldgElements;
    class IfcRelCoversSpaces;
    class IfcRelDecomposes;
    class IfcRelDefines;
    class IfcRelDefinesByProperties;
    class IfcRelDefinesByType;
    class IfcRelFillsElement;
    class IfcRelFlowControlElements;
    class IfcRelInteractionRequirements;
    class IfcRelNests;
    class IfcRelOccupiesSpaces;
    class IfcRelOverridesProperties;
    class IfcRelProjectsElement;
    class IfcRelReferencedInSpatialStructure;
    class IfcRelSchedulesCostItems;
    class IfcRelSequence;
    class IfcRelServicesBuildings;
    class IfcRelSpaceBoundary;
    class IfcRelVoidsElement;
    class IfcRepresentation;
    class IfcRepresentationContext;
    class IfcRepresentationItem;
    class IfcRepresentationMap;
    class IfcResource;
    class IfcRevolvedAreaSolid;
    class IfcRibPlateProfileProperties;
    class IfcRightCircularCone;
    class IfcRightCircularCylinder;
    class IfcRoof;
    class IfcRoot;
    class IfcRoundedEdgeFeature;
    class IfcRoundedRectangleProfileDef;
    class IfcSanitaryTerminalType;
    class IfcScheduleTimeControl;
    class IfcSectionedSpine;
    class IfcSectionProperties;
    class IfcSectionReinforcementProperties;
    class IfcSensorType;
    class IfcServiceLife;
    class IfcServiceLifeFactor;
    class IfcShapeAspect;
    class IfcShapeModel;
    class IfcShapeRepresentation;
    class IfcShellBasedSurfaceModel;
    class IfcSimpleProperty;
    class IfcSite;
    class IfcSIUnit;
    class IfcSlab;
    class IfcSlabType;
    class IfcSlippageConnectionCondition;
    class IfcSolidModel;
    class IfcSoundProperties;
    class IfcSoundValue;
    class IfcSpace;
    class IfcSpaceHeaterType;
    class IfcSpaceProgram;
    class IfcSpaceThermalLoadProperties;
    class IfcSpaceType;
    class IfcSpatialStructureElement;
    class IfcSpatialStructureElementType;
    class IfcSphere;
    class IfcStackTerminalType;
    class IfcStair;
    class IfcStairFlight;
    class IfcStairFlightType;
    class IfcStructuralAction;
    class IfcStructuralActivity;
    class IfcStructuralAnalysisModel;
    class IfcStructuralConnection;
    class IfcStructuralConnectionCondition;
    class IfcStructuralCurveConnection;
    class IfcStructuralCurveMember;
    class IfcStructuralCurveMemberVarying;
    class IfcStructuralItem;
    class IfcStructuralLinearAction;
    class IfcStructuralLinearActionVarying;
    class IfcStructuralLoad;
    class IfcStructuralLoadGroup;
    class IfcStructuralLoadLinearForce;
    class IfcStructuralLoadPlanarForce;
    class IfcStructuralLoadSingleDisplacement;
    class IfcStructuralLoadSingleDisplacementDistortion;
    class IfcStructuralLoadSingleForce;
    class IfcStructuralLoadSingleForceWarping;
    class IfcStructuralLoadStatic;
    class IfcStructuralLoadTemperature;
    class IfcStructuralMember;
    class IfcStructuralPlanarAction;
    class IfcStructuralPlanarActionVarying;
    class IfcStructuralPointAction;
    class IfcStructuralPointConnection;
    class IfcStructuralPointReaction;
    class IfcStructuralProfileProperties;
    class IfcStructuralReaction;
    class IfcStructuralResultGroup;
    class IfcStructuralSteelProfileProperties;
    class IfcStructuralSurfaceConnection;
    class IfcStructuralSurfaceMember;
    class IfcStructuralSurfaceMemberVarying;
    class IfcStructuredDimensionCallout;
    class IfcStyledItem;
    class IfcStyledRepresentation;
    class IfcStyleModel;
    class IfcSubContractResource;
    class IfcSubedge;
    class IfcSurface;
    class IfcSurfaceCurveSweptAreaSolid;
    class IfcSurfaceOfLinearExtrusion;
    class IfcSurfaceOfRevolution;
    class IfcSurfaceStyle;
    class IfcSurfaceStyleLighting;
    class IfcSurfaceStyleRefraction;
    class IfcSurfaceStyleRendering;
    class IfcSurfaceStyleShading;
    class IfcSurfaceStyleWithTextures;
    class IfcSurfaceTexture;
    class IfcSweptAreaSolid;
    class IfcSweptDiskSolid;
    class IfcSweptSurface;
    class IfcSwitchingDeviceType;
    class IfcSymbolStyle;
    class IfcSystem;
    class IfcSystemFurnitureElementType;
    class IfcTable;
    class IfcTableRow;
    class IfcTankType;
    class IfcTask;
    class IfcTelecomAddress;
    class IfcTendon;
    class IfcTendonAnchor;
    class IfcTerminatorSymbol;
    class IfcTextLiteral;
    class IfcTextLiteralWithExtent;
    class IfcTextStyle;
    class IfcTextStyleFontModel;
    class IfcTextStyleForDefinedFont;
    class IfcTextStyleTextModel;
    class IfcTextStyleWithBoxCharacteristics;
    class IfcTextureCoordinate;
    class IfcTextureCoordinateGenerator;
    class IfcTextureMap;
    class IfcTextureVertex;
    class IfcThermalMaterialProperties;
    class IfcTimeSeries;
    class IfcTimeSeriesReferenceRelationship;
    class IfcTimeSeriesSchedule;
    class IfcTimeSeriesValue;
    class IfcTopologicalRepresentationItem;
    class IfcTopologyRepresentation;
    class IfcTransformerType;
    class IfcTransportElement;
    class IfcTransportElementType;
    class IfcTrapeziumProfileDef;
    class IfcTrimmedCurve;
    class IfcTShapeProfileDef;
    class IfcTubeBundleType;
    class IfcTwoDirectionRepeatFactor;
    class IfcTypeObject;
    class IfcTypeProduct;
    class IfcUnitaryEquipmentType;
    class IfcUnitAssignment;
    class IfcUShapeProfileDef;
    class IfcValveType;
    class IfcVector;
    class IfcVertex;
    class IfcVertexBasedTextureMap;
    class IfcVertexLoop;
    class IfcVertexPoint;
    class IfcVibrationIsolatorType;
    class IfcVirtualElement;
    class IfcVirtualGridIntersection;
    class IfcWall;
    class IfcWallStandardCase;
    class IfcWallType;
    class IfcWasteTerminalType;
    class IfcWaterProperties;
    class IfcWindow;
    class IfcWindowLiningProperties;
    class IfcWindowPanelProperties;
    class IfcWindowStyle;
    class IfcWorkControl;
    class IfcWorkPlan;
    class IfcWorkSchedule;
    class IfcZone;
    class IfcZShapeProfileDef;

    class IfcActorSelect;
    class IfcActorSelect_get;
    class IfcActorSelect_put;
    class IfcAppliedValueSelect;
    class IfcAppliedValueSelect_get;
    class IfcAppliedValueSelect_put;
    class IfcAxis2Placement;
    class IfcAxis2Placement_get;
    class IfcAxis2Placement_put;
    class IfcBooleanOperand;
    class IfcBooleanOperand_get;
    class IfcBooleanOperand_put;
    class IfcCharacterStyleSelect;
    class IfcCharacterStyleSelect_get;
    class IfcCharacterStyleSelect_put;
    class IfcClassificationNotationSelect;
    class IfcClassificationNotationSelect_get;
    class IfcClassificationNotationSelect_put;
    class IfcColour;
    class IfcColour_get;
    class IfcColour_put;
    class IfcColourOrFactor;
    class IfcColourOrFactor_get;
    class IfcColourOrFactor_put;
    class IfcConditionCriterionSelect;
    class IfcConditionCriterionSelect_get;
    class IfcConditionCriterionSelect_put;
    class IfcCsgSelect;
    class IfcCsgSelect_get;
    class IfcCsgSelect_put;
    class IfcCurveFontOrScaledCurveFontSelect;
    class IfcCurveFontOrScaledCurveFontSelect_get;
    class IfcCurveFontOrScaledCurveFontSelect_put;
    class IfcCurveOrEdgeCurve;
    class IfcCurveOrEdgeCurve_get;
    class IfcCurveOrEdgeCurve_put;
    class IfcCurveStyleFontSelect;
    class IfcCurveStyleFontSelect_get;
    class IfcCurveStyleFontSelect_put;
    class IfcDateTimeSelect;
    class IfcDateTimeSelect_get;
    class IfcDateTimeSelect_put;
    class IfcDefinedSymbolSelect;
    class IfcDefinedSymbolSelect_get;
    class IfcDefinedSymbolSelect_put;
    class IfcDerivedMeasureValue;
    class IfcDerivedMeasureValue_get;
    class IfcDerivedMeasureValue_put;
    class IfcDocumentSelect;
    class IfcDocumentSelect_get;
    class IfcDocumentSelect_put;
    class IfcDraughtingCalloutElement;
    class IfcDraughtingCalloutElement_get;
    class IfcDraughtingCalloutElement_put;
    class IfcFillAreaStyleTileShapeSelect;
    class IfcFillAreaStyleTileShapeSelect_get;
    class IfcFillAreaStyleTileShapeSelect_put;
    class IfcFillStyleSelect;
    class IfcFillStyleSelect_get;
    class IfcFillStyleSelect_put;
    class IfcGeometricSetSelect;
    class IfcGeometricSetSelect_get;
    class IfcGeometricSetSelect_put;
    class IfcHatchLineDistanceSelect;
    class IfcHatchLineDistanceSelect_get;
    class IfcHatchLineDistanceSelect_put;
    class IfcLayeredItem;
    class IfcLayeredItem_get;
    class IfcLayeredItem_put;
    class IfcLibrarySelect;
    class IfcLibrarySelect_get;
    class IfcLibrarySelect_put;
    class IfcLightDistributionDataSourceSelect;
    class IfcLightDistributionDataSourceSelect_get;
    class IfcLightDistributionDataSourceSelect_put;
    class IfcMaterialSelect;
    class IfcMaterialSelect_get;
    class IfcMaterialSelect_put;
    class IfcMeasureValue;
    class IfcMeasureValue_get;
    class IfcMeasureValue_put;
    class IfcMetricValueSelect;
    class IfcMetricValueSelect_get;
    class IfcMetricValueSelect_put;
    class IfcObjectReferenceSelect;
    class IfcObjectReferenceSelect_get;
    class IfcObjectReferenceSelect_put;
    class IfcOrientationSelect;
    class IfcOrientationSelect_get;
    class IfcOrientationSelect_put;
    class IfcPointOrVertexPoint;
    class IfcPointOrVertexPoint_get;
    class IfcPointOrVertexPoint_put;
    class IfcPresentationStyleSelect;
    class IfcPresentationStyleSelect_get;
    class IfcPresentationStyleSelect_put;
    class IfcShell;
    class IfcShell_get;
    class IfcShell_put;
    class IfcSimpleValue;
    class IfcSimpleValue_get;
    class IfcSimpleValue_put;
    class IfcSizeSelect;
    class IfcSizeSelect_get;
    class IfcSizeSelect_put;
    class IfcSpecularHighlightSelect;
    class IfcSpecularHighlightSelect_get;
    class IfcSpecularHighlightSelect_put;
    class IfcStructuralActivityAssignmentSelect;
    class IfcStructuralActivityAssignmentSelect_get;
    class IfcStructuralActivityAssignmentSelect_put;
    class IfcSurfaceOrFaceSurface;
    class IfcSurfaceOrFaceSurface_get;
    class IfcSurfaceOrFaceSurface_put;
    class IfcSurfaceStyleElementSelect;
    class IfcSurfaceStyleElementSelect_get;
    class IfcSurfaceStyleElementSelect_put;
    class IfcSymbolStyleSelect;
    class IfcSymbolStyleSelect_get;
    class IfcSymbolStyleSelect_put;
    class IfcTextFontSelect;
    class IfcTextFontSelect_get;
    class IfcTextFontSelect_put;
    class IfcTextStyleSelect;
    class IfcTextStyleSelect_get;
    class IfcTextStyleSelect_put;
    class IfcTrimmingSelect;
    class IfcTrimmingSelect_get;
    class IfcTrimmingSelect_put;
    class IfcUnit;
    class IfcUnit_get;
    class IfcUnit_put;
    class IfcValue;
    class IfcValue_get;
    class IfcValue_put;
    class IfcVectorOrDirection;
    class IfcVectorOrDirection_get;
    class IfcVectorOrDirection_put;

        //
        // Enumerations
        //

    enum class IfcActionSourceTypeEnum
    {
        DEAD_LOAD_G = 0,
        COMPLETION_G1 = 1,
        LIVE_LOAD_Q = 2,
        SNOW_S = 3,
        WIND_W = 4,
        PRESTRESSING_P = 5,
        SETTLEMENT_U = 6,
        TEMPERATURE_T = 7,
        EARTHQUAKE_E = 8,
        FIRE = 9,
        IMPULSE = 10,
        IMPACT = 11,
        TRANSPORT = 12,
        ERECTION = 13,
        PROPPING = 14,
        SYSTEM_IMPERFECTION = 15,
        SHRINKAGE = 16,
        CREEP = 17,
        LACK_OF_FIT = 18,
        BUOYANCY = 19,
        ICE = 20,
        CURRENT = 21,
        WAVE = 22,
        RAIN = 23,
        BRAKES = 24,
        USERDEFINED = 25,
        NOTDEFINED = 26,
        ___unk = -1
    };

    enum class IfcActionTypeEnum
    {
        PERMANENT_G = 0,
        VARIABLE_Q = 1,
        EXTRAORDINARY_A = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcActuatorTypeEnum
    {
        ELECTRICACTUATOR = 0,
        HANDOPERATEDACTUATOR = 1,
        HYDRAULICACTUATOR = 2,
        PNEUMATICACTUATOR = 3,
        THERMOSTATICACTUATOR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcAddressTypeEnum
    {
        OFFICE = 0,
        SITE = 1,
        HOME = 2,
        DISTRIBUTIONPOINT = 3,
        USERDEFINED = 4,
        ___unk = -1
    };

    enum class IfcAheadOrBehind
    {
        AHEAD = 0,
        BEHIND = 1,
        ___unk = -1
    };

    enum class IfcAirTerminalBoxTypeEnum
    {
        CONSTANTFLOW = 0,
        VARIABLEFLOWPRESSUREDEPENDANT = 1,
        VARIABLEFLOWPRESSUREINDEPENDANT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcAirTerminalTypeEnum
    {
        GRILLE = 0,
        REGISTER = 1,
        DIFFUSER = 2,
        EYEBALL = 3,
        IRIS = 4,
        LINEARGRILLE = 5,
        LINEARDIFFUSER = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcAirToAirHeatRecoveryTypeEnum
    {
        FIXEDPLATECOUNTERFLOWEXCHANGER = 0,
        FIXEDPLATECROSSFLOWEXCHANGER = 1,
        FIXEDPLATEPARALLELFLOWEXCHANGER = 2,
        ROTARYWHEEL = 3,
        RUNAROUNDCOILLOOP = 4,
        HEATPIPE = 5,
        TWINTOWERENTHALPYRECOVERYLOOPS = 6,
        THERMOSIPHONSEALEDTUBEHEATEXCHANGERS = 7,
        THERMOSIPHONCOILTYPEHEATEXCHANGERS = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        ___unk = -1
    };

    enum class IfcAlarmTypeEnum
    {
        BELL = 0,
        BREAKGLASSBUTTON = 1,
        LIGHT = 2,
        MANUALPULLBOX = 3,
        SIREN = 4,
        WHISTLE = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcAnalysisModelTypeEnum
    {
        IN_PLANE_LOADING_2D = 0,
        OUT_PLANE_LOADING_2D = 1,
        LOADING_3D = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcAnalysisTheoryTypeEnum
    {
        FIRST_ORDER_THEORY = 0,
        SECOND_ORDER_THEORY = 1,
        THIRD_ORDER_THEORY = 2,
        FULL_NONLINEAR_THEORY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcArithmeticOperatorEnum
    {
        ADD = 0,
        DIVIDE = 1,
        MULTIPLY = 2,
        SUBTRACT = 3,
        ___unk = -1
    };

    enum class IfcAssemblyPlaceEnum
    {
        SITE = 0,
        FACTORY = 1,
        NOTDEFINED = 2,
        ___unk = -1
    };

    enum class IfcBeamTypeEnum
    {
        BEAM = 0,
        JOIST = 1,
        LINTEL = 2,
        T_BEAM = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcBenchmarkEnum
    {
        GREATERTHAN = 0,
        GREATERTHANOREQUALTO = 1,
        LESSTHAN = 2,
        LESSTHANOREQUALTO = 3,
        EQUALTO = 4,
        NOTEQUALTO = 5,
        ___unk = -1
    };

    enum class IfcBoilerTypeEnum
    {
        WATER = 0,
        STEAM = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcBooleanOperator
    {
        UNION = 0,
        INTERSECTION = 1,
        DIFFERENCE = 2,
        ___unk = -1
    };

    enum class IfcBSplineCurveForm
    {
        POLYLINE_FORM = 0,
        CIRCULAR_ARC = 1,
        ELLIPTIC_ARC = 2,
        PARABOLIC_ARC = 3,
        HYPERBOLIC_ARC = 4,
        UNSPECIFIED = 5,
        ___unk = -1
    };

    enum class IfcBuildingElementProxyTypeEnum
    {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        ___unk = -1
    };

    enum class IfcCableCarrierFittingTypeEnum
    {
        BEND = 0,
        CROSS = 1,
        REDUCER = 2,
        TEE = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcCableCarrierSegmentTypeEnum
    {
        CABLELADDERSEGMENT = 0,
        CABLETRAYSEGMENT = 1,
        CABLETRUNKINGSEGMENT = 2,
        CONDUITSEGMENT = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcCableSegmentTypeEnum
    {
        CABLESEGMENT = 0,
        CONDUCTORSEGMENT = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcChangeActionEnum
    {
        NOCHANGE = 0,
        MODIFIED = 1,
        ADDED = 2,
        DELETED = 3,
        MODIFIEDADDED = 4,
        MODIFIEDDELETED = 5,
        ___unk = -1
    };

    enum class IfcChillerTypeEnum
    {
        AIRCOOLED = 0,
        WATERCOOLED = 1,
        HEATRECOVERY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcCoilTypeEnum
    {
        DXCOOLINGCOIL = 0,
        WATERCOOLINGCOIL = 1,
        STEAMHEATINGCOIL = 2,
        WATERHEATINGCOIL = 3,
        ELECTRICHEATINGCOIL = 4,
        GASHEATINGCOIL = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcColumnTypeEnum
    {
        COLUMN = 0,
        USERDEFINED = 1,
        NOTDEFINED = 2,
        ___unk = -1
    };

    enum class IfcCompressorTypeEnum
    {
        DYNAMIC = 0,
        RECIPROCATING = 1,
        ROTARY = 2,
        SCROLL = 3,
        TROCHOIDAL = 4,
        SINGLESTAGE = 5,
        BOOSTER = 6,
        OPENTYPE = 7,
        HERMETIC = 8,
        SEMIHERMETIC = 9,
        WELDEDSHELLHERMETIC = 10,
        ROLLINGPISTON = 11,
        ROTARYVANE = 12,
        SINGLESCREW = 13,
        TWINSCREW = 14,
        USERDEFINED = 15,
        NOTDEFINED = 16,
        ___unk = -1
    };

    enum class IfcCondenserTypeEnum
    {
        WATERCOOLEDSHELLTUBE = 0,
        WATERCOOLEDSHELLCOIL = 1,
        WATERCOOLEDTUBEINTUBE = 2,
        WATERCOOLEDBRAZEDPLATE = 3,
        AIRCOOLED = 4,
        EVAPORATIVECOOLED = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcConnectionTypeEnum
    {
        ATPATH = 0,
        ATSTART = 1,
        ATEND = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcConstraintEnum
    {
        HARD = 0,
        SOFT = 1,
        ADVISORY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcControllerTypeEnum
    {
        FLOATING = 0,
        PROPORTIONAL = 1,
        PROPORTIONALINTEGRAL = 2,
        PROPORTIONALINTEGRALDERIVATIVE = 3,
        TIMEDTWOPOSITION = 4,
        TWOPOSITION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcCooledBeamTypeEnum
    {
        ACTIVE = 0,
        PASSIVE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcCoolingTowerTypeEnum
    {
        NATURALDRAFT = 0,
        MECHANICALINDUCEDDRAFT = 1,
        MECHANICALFORCEDDRAFT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcCostScheduleTypeEnum
    {
        BUDGET = 0,
        COSTPLAN = 1,
        ESTIMATE = 2,
        TENDER = 3,
        PRICEDBILLOFQUANTITIES = 4,
        UNPRICEDBILLOFQUANTITIES = 5,
        SCHEDULEOFRATES = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcCoveringTypeEnum
    {
        CEILING = 0,
        FLOORING = 1,
        CLADDING = 2,
        ROOFING = 3,
        INSULATION = 4,
        MEMBRANE = 5,
        SLEEVING = 6,
        WRAPPING = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        ___unk = -1
    };

    enum class IfcCurrencyEnum
    {
        AED = 0,
        AES = 1,
        ATS = 2,
        AUD = 3,
        BBD = 4,
        BEG = 5,
        BGL = 6,
        BHD = 7,
        BMD = 8,
        BND = 9,
        BRL = 10,
        BSD = 11,
        BWP = 12,
        BZD = 13,
        CAD = 14,
        CBD = 15,
        CHF = 16,
        CLP = 17,
        CNY = 18,
        CYS = 19,
        CZK = 20,
        DDP = 21,
        DEM = 22,
        DKK = 23,
        EGL = 24,
        EST = 25,
        EUR = 26,
        FAK = 27,
        FIM = 28,
        FJD = 29,
        FKP = 30,
        FRF = 31,
        GBP = 32,
        GIP = 33,
        GMD = 34,
        GRX = 35,
        HKD = 36,
        HUF = 37,
        ICK = 38,
        IDR = 39,
        ILS = 40,
        INR = 41,
        IRP = 42,
        ITL = 43,
        JMD = 44,
        JOD = 45,
        JPY = 46,
        KES = 47,
        KRW = 48,
        KWD = 49,
        KYD = 50,
        LKR = 51,
        LUF = 52,
        MTL = 53,
        MUR = 54,
        MXN = 55,
        MYR = 56,
        NLG = 57,
        NZD = 58,
        OMR = 59,
        PGK = 60,
        PHP = 61,
        PKR = 62,
        PLN = 63,
        PTN = 64,
        QAR = 65,
        RUR = 66,
        SAR = 67,
        SCR = 68,
        SEK = 69,
        SGD = 70,
        SKP = 71,
        THB = 72,
        TRL = 73,
        TTD = 74,
        TWD = 75,
        USD = 76,
        VEB = 77,
        VND = 78,
        XEU = 79,
        ZAR = 80,
        ZWD = 81,
        NOK = 82,
        ___unk = -1
    };

    enum class IfcCurtainWallTypeEnum
    {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        ___unk = -1
    };

    enum class IfcDamperTypeEnum
    {
        CONTROLDAMPER = 0,
        FIREDAMPER = 1,
        SMOKEDAMPER = 2,
        FIRESMOKEDAMPER = 3,
        BACKDRAFTDAMPER = 4,
        RELIEFDAMPER = 5,
        BLASTDAMPER = 6,
        GRAVITYDAMPER = 7,
        GRAVITYRELIEFDAMPER = 8,
        BALANCINGDAMPER = 9,
        FUMEHOODEXHAUST = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        ___unk = -1
    };

    enum class IfcDataOriginEnum
    {
        MEASURED = 0,
        PREDICTED = 1,
        SIMULATED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcDerivedUnitEnum
    {
        ANGULARVELOCITYUNIT = 0,
        COMPOUNDPLANEANGLEUNIT = 1,
        DYNAMICVISCOSITYUNIT = 2,
        HEATFLUXDENSITYUNIT = 3,
        INTEGERCOUNTRATEUNIT = 4,
        ISOTHERMALMOISTURECAPACITYUNIT = 5,
        KINEMATICVISCOSITYUNIT = 6,
        LINEARVELOCITYUNIT = 7,
        MASSDENSITYUNIT = 8,
        MASSFLOWRATEUNIT = 9,
        MOISTUREDIFFUSIVITYUNIT = 10,
        MOLECULARWEIGHTUNIT = 11,
        SPECIFICHEATCAPACITYUNIT = 12,
        THERMALADMITTANCEUNIT = 13,
        THERMALCONDUCTANCEUNIT = 14,
        THERMALRESISTANCEUNIT = 15,
        THERMALTRANSMITTANCEUNIT = 16,
        VAPORPERMEABILITYUNIT = 17,
        VOLUMETRICFLOWRATEUNIT = 18,
        ROTATIONALFREQUENCYUNIT = 19,
        TORQUEUNIT = 20,
        MOMENTOFINERTIAUNIT = 21,
        LINEARMOMENTUNIT = 22,
        LINEARFORCEUNIT = 23,
        PLANARFORCEUNIT = 24,
        MODULUSOFELASTICITYUNIT = 25,
        SHEARMODULUSUNIT = 26,
        LINEARSTIFFNESSUNIT = 27,
        ROTATIONALSTIFFNESSUNIT = 28,
        MODULUSOFSUBGRADEREACTIONUNIT = 29,
        ACCELERATIONUNIT = 30,
        CURVATUREUNIT = 31,
        HEATINGVALUEUNIT = 32,
        IONCONCENTRATIONUNIT = 33,
        LUMINOUSINTENSITYDISTRIBUTIONUNIT = 34,
        MASSPERLENGTHUNIT = 35,
        MODULUSOFLINEARSUBGRADEREACTIONUNIT = 36,
        MODULUSOFROTATIONALSUBGRADEREACTIONUNIT = 37,
        PHUNIT = 38,
        ROTATIONALMASSUNIT = 39,
        SECTIONAREAINTEGRALUNIT = 40,
        SECTIONMODULUSUNIT = 41,
        SOUNDPOWERUNIT = 42,
        SOUNDPRESSUREUNIT = 43,
        TEMPERATUREGRADIENTUNIT = 44,
        THERMALEXPANSIONCOEFFICIENTUNIT = 45,
        WARPINGCONSTANTUNIT = 46,
        WARPINGMOMENTUNIT = 47,
        USERDEFINED = 48,
        ___unk = -1
    };

    enum class IfcDimensionExtentUsage
    {
        ORIGIN = 0,
        TARGET = 1,
        ___unk = -1
    };

    enum class IfcDirectionSenseEnum
    {
        POSITIVE = 0,
        NEGATIVE = 1,
        ___unk = -1
    };

    enum class IfcDistributionChamberElementTypeEnum
    {
        FORMEDDUCT = 0,
        INSPECTIONCHAMBER = 1,
        INSPECTIONPIT = 2,
        MANHOLE = 3,
        METERCHAMBER = 4,
        SUMP = 5,
        TRENCH = 6,
        VALVECHAMBER = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        ___unk = -1
    };

    enum class IfcDocumentConfidentialityEnum
    {
        PUBLIC = 0,
        RESTRICTED = 1,
        CONFIDENTIAL = 2,
        PERSONAL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcDocumentStatusEnum
    {
        DRAFT = 0,
        FINALDRAFT = 1,
        FINAL = 2,
        REVISION = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcDoorPanelOperationEnum
    {
        SWINGING = 0,
        DOUBLE_ACTING = 1,
        SLIDING = 2,
        FOLDING = 3,
        REVOLVING = 4,
        ROLLINGUP = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcDoorPanelPositionEnum
    {
        LEFT = 0,
        MIDDLE = 1,
        RIGHT = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcDoorStyleConstructionEnum
    {
        ALUMINIUM = 0,
        HIGH_GRADE_STEEL = 1,
        STEEL = 2,
        WOOD = 3,
        ALUMINIUM_WOOD = 4,
        ALUMINIUM_PLASTIC = 5,
        PLASTIC = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcDoorStyleOperationEnum
    {
        SINGLE_SWING_LEFT = 0,
        SINGLE_SWING_RIGHT = 1,
        DOUBLE_DOOR_SINGLE_SWING = 2,
        DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT = 3,
        DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT = 4,
        DOUBLE_SWING_LEFT = 5,
        DOUBLE_SWING_RIGHT = 6,
        DOUBLE_DOOR_DOUBLE_SWING = 7,
        SLIDING_TO_LEFT = 8,
        SLIDING_TO_RIGHT = 9,
        DOUBLE_DOOR_SLIDING = 10,
        FOLDING_TO_LEFT = 11,
        FOLDING_TO_RIGHT = 12,
        DOUBLE_DOOR_FOLDING = 13,
        REVOLVING = 14,
        ROLLINGUP = 15,
        USERDEFINED = 16,
        NOTDEFINED = 17,
        ___unk = -1
    };

    enum class IfcDuctFittingTypeEnum
    {
        BEND = 0,
        CONNECTOR = 1,
        ENTRY = 2,
        EXIT = 3,
        JUNCTION = 4,
        OBSTRUCTION = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcDuctSegmentTypeEnum
    {
        RIGIDSEGMENT = 0,
        FLEXIBLESEGMENT = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcDuctSilencerTypeEnum
    {
        FLATOVAL = 0,
        RECTANGULAR = 1,
        ROUND = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcElectricApplianceTypeEnum
    {
        COMPUTER = 0,
        DIRECTWATERHEATER = 1,
        DISHWASHER = 2,
        ELECTRICCOOKER = 3,
        ELECTRICHEATER = 4,
        FACSIMILE = 5,
        FREESTANDINGFAN = 6,
        FREEZER = 7,
        FRIDGE_FREEZER = 8,
        HANDDRYER = 9,
        INDIRECTWATERHEATER = 10,
        MICROWAVE = 11,
        PHOTOCOPIER = 12,
        PRINTER = 13,
        REFRIGERATOR = 14,
        RADIANTHEATER = 15,
        SCANNER = 16,
        TELEPHONE = 17,
        TUMBLEDRYER = 18,
        TV = 19,
        VENDINGMACHINE = 20,
        WASHINGMACHINE = 21,
        WATERHEATER = 22,
        WATERCOOLER = 23,
        USERDEFINED = 24,
        NOTDEFINED = 25,
        ___unk = -1
    };

    enum class IfcElectricCurrentEnum
    {
        ALTERNATING = 0,
        DIRECT = 1,
        NOTDEFINED = 2,
        ___unk = -1
    };

    enum class IfcElectricDistributionPointFunctionEnum
    {
        ALARMPANEL = 0,
        CONSUMERUNIT = 1,
        CONTROLPANEL = 2,
        DISTRIBUTIONBOARD = 3,
        GASDETECTORPANEL = 4,
        INDICATORPANEL = 5,
        MIMICPANEL = 6,
        MOTORCONTROLCENTRE = 7,
        SWITCHBOARD = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        ___unk = -1
    };

    enum class IfcElectricFlowStorageDeviceTypeEnum
    {
        BATTERY = 0,
        CAPACITORBANK = 1,
        HARMONICFILTER = 2,
        INDUCTORBANK = 3,
        UPS = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcElectricGeneratorTypeEnum
    {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        ___unk = -1
    };

    enum class IfcElectricHeaterTypeEnum
    {
        ELECTRICPOINTHEATER = 0,
        ELECTRICCABLEHEATER = 1,
        ELECTRICMATHEATER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcElectricMotorTypeEnum
    {
        DC = 0,
        INDUCTION = 1,
        POLYPHASE = 2,
        RELUCTANCESYNCHRONOUS = 3,
        SYNCHRONOUS = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcElectricTimeControlTypeEnum
    {
        TIMECLOCK = 0,
        TIMEDELAY = 1,
        RELAY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcElementAssemblyTypeEnum
    {
        ACCESSORY_ASSEMBLY = 0,
        ARCH = 1,
        BEAM_GRID = 2,
        BRACED_FRAME = 3,
        GIRDER = 4,
        REINFORCEMENT_UNIT = 5,
        RIGID_FRAME = 6,
        SLAB_FIELD = 7,
        TRUSS = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        ___unk = -1
    };

    enum class IfcElementCompositionEnum
    {
        COMPLEX = 0,
        ELEMENT = 1,
        PARTIAL = 2,
        ___unk = -1
    };

    enum class IfcEnergySequenceEnum
    {
        PRIMARY = 0,
        SECONDARY = 1,
        TERTIARY = 2,
        AUXILIARY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcEnvironmentalImpactCategoryEnum
    {
        COMBINEDVALUE = 0,
        DISPOSAL = 1,
        EXTRACTION = 2,
        INSTALLATION = 3,
        MANUFACTURE = 4,
        TRANSPORTATION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcEvaporativeCoolerTypeEnum
    {
        DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER = 0,
        DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER = 1,
        DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER = 2,
        DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER = 3,
        DIRECTEVAPORATIVEAIRWASHER = 4,
        INDIRECTEVAPORATIVEPACKAGEAIRCOOLER = 5,
        INDIRECTEVAPORATIVEWETCOIL = 6,
        INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER = 7,
        INDIRECTDIRECTCOMBINATION = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        ___unk = -1
    };

    enum class IfcEvaporatorTypeEnum
    {
        DIRECTEXPANSIONSHELLANDTUBE = 0,
        DIRECTEXPANSIONTUBEINTUBE = 1,
        DIRECTEXPANSIONBRAZEDPLATE = 2,
        FLOODEDSHELLANDTUBE = 3,
        SHELLANDCOIL = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcFanTypeEnum
    {
        CENTRIFUGALFORWARDCURVED = 0,
        CENTRIFUGALRADIAL = 1,
        CENTRIFUGALBACKWARDINCLINEDCURVED = 2,
        CENTRIFUGALAIRFOIL = 3,
        TUBEAXIAL = 4,
        VANEAXIAL = 5,
        PROPELLORAXIAL = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcFilterTypeEnum
    {
        AIRPARTICLEFILTER = 0,
        ODORFILTER = 1,
        OILFILTER = 2,
        STRAINER = 3,
        WATERFILTER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcFireSuppressionTerminalTypeEnum
    {
        BREECHINGINLET = 0,
        FIREHYDRANT = 1,
        HOSEREEL = 2,
        SPRINKLER = 3,
        SPRINKLERDEFLECTOR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcFlowDirectionEnum
    {
        SOURCE = 0,
        SINK = 1,
        SOURCEANDSINK = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcFlowInstrumentTypeEnum
    {
        PRESSUREGAUGE = 0,
        THERMOMETER = 1,
        AMMETER = 2,
        FREQUENCYMETER = 3,
        POWERFACTORMETER = 4,
        PHASEANGLEMETER = 5,
        VOLTMETER_PEAK = 6,
        VOLTMETER_RMS = 7,
        USERDEFINED = 8,
        NOTDEFINED = 9,
        ___unk = -1
    };

    enum class IfcFlowMeterTypeEnum
    {
        ELECTRICMETER = 0,
        ENERGYMETER = 1,
        FLOWMETER = 2,
        GASMETER = 3,
        OILMETER = 4,
        WATERMETER = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcFootingTypeEnum
    {
        FOOTING_BEAM = 0,
        PAD_FOOTING = 1,
        PILE_CAP = 2,
        STRIP_FOOTING = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcGasTerminalTypeEnum
    {
        GASAPPLIANCE = 0,
        GASBOOSTER = 1,
        GASBURNER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcGeometricProjectionEnum
    {
        GRAPH_VIEW = 0,
        SKETCH_VIEW = 1,
        MODEL_VIEW = 2,
        PLAN_VIEW = 3,
        REFLECTED_PLAN_VIEW = 4,
        SECTION_VIEW = 5,
        ELEVATION_VIEW = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcGlobalOrLocalEnum
    {
        GLOBAL_COORDS = 0,
        LOCAL_COORDS = 1,
        ___unk = -1
    };

    enum class IfcHeatExchangerTypeEnum
    {
        PLATE = 0,
        SHELLANDTUBE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcHumidifierTypeEnum
    {
        STEAMINJECTION = 0,
        ADIABATICAIRWASHER = 1,
        ADIABATICPAN = 2,
        ADIABATICWETTEDELEMENT = 3,
        ADIABATICATOMIZING = 4,
        ADIABATICULTRASONIC = 5,
        ADIABATICRIGIDMEDIA = 6,
        ADIABATICCOMPRESSEDAIRNOZZLE = 7,
        ASSISTEDELECTRIC = 8,
        ASSISTEDNATURALGAS = 9,
        ASSISTEDPROPANE = 10,
        ASSISTEDBUTANE = 11,
        ASSISTEDSTEAM = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        ___unk = -1
    };

    enum class IfcInternalOrExternalEnum
    {
        INTERNAL = 0,
        EXTERNAL = 1,
        NOTDEFINED = 2,
        ___unk = -1
    };

    enum class IfcInventoryTypeEnum
    {
        ASSETINVENTORY = 0,
        SPACEINVENTORY = 1,
        FURNITUREINVENTORY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcJunctionBoxTypeEnum
    {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        ___unk = -1
    };

    enum class IfcLampTypeEnum
    {
        COMPACTFLUORESCENT = 0,
        FLUORESCENT = 1,
        HIGHPRESSUREMERCURY = 2,
        HIGHPRESSURESODIUM = 3,
        METALHALIDE = 4,
        TUNGSTENFILAMENT = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcLayerSetDirectionEnum
    {
        AXIS1 = 0,
        AXIS2 = 1,
        AXIS3 = 2,
        ___unk = -1
    };

    enum class IfcLightDistributionCurveEnum
    {
        TYPE_A = 0,
        TYPE_B = 1,
        TYPE_C = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcLightEmissionSourceEnum
    {
        COMPACTFLUORESCENT = 0,
        FLUORESCENT = 1,
        HIGHPRESSUREMERCURY = 2,
        HIGHPRESSURESODIUM = 3,
        LIGHTEMITTINGDIODE = 4,
        LOWPRESSURESODIUM = 5,
        LOWVOLTAGEHALOGEN = 6,
        MAINVOLTAGEHALOGEN = 7,
        METALHALIDE = 8,
        TUNGSTENFILAMENT = 9,
        NOTDEFINED = 10,
        ___unk = -1
    };

    enum class IfcLightFixtureTypeEnum
    {
        POINTSOURCE = 0,
        DIRECTIONSOURCE = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcLoadGroupTypeEnum
    {
        LOAD_GROUP = 0,
        LOAD_CASE = 1,
        LOAD_COMBINATION_GROUP = 2,
        LOAD_COMBINATION = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcLogicalOperatorEnum
    {
        LOGICALAND = 0,
        LOGICALOR = 1,
        ___unk = -1
    };

    enum class IfcMemberTypeEnum
    {
        BRACE = 0,
        CHORD = 1,
        COLLAR = 2,
        MEMBER = 3,
        MULLION = 4,
        PLATE = 5,
        POST = 6,
        PURLIN = 7,
        RAFTER = 8,
        STRINGER = 9,
        STRUT = 10,
        STUD = 11,
        USERDEFINED = 12,
        NOTDEFINED = 13,
        ___unk = -1
    };

    enum class IfcMotorConnectionTypeEnum
    {
        BELTDRIVE = 0,
        COUPLING = 1,
        DIRECTDRIVE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcNullStyle
    {
        NULL_ = 0,
        ___unk = -1
    };

    enum class IfcObjectiveEnum
    {
        CODECOMPLIANCE = 0,
        DESIGNINTENT = 1,
        HEALTHANDSAFETY = 2,
        REQUIREMENT = 3,
        SPECIFICATION = 4,
        TRIGGERCONDITION = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcObjectTypeEnum
    {
        PRODUCT = 0,
        PROCESS = 1,
        CONTROL = 2,
        RESOURCE = 3,
        ACTOR = 4,
        GROUP = 5,
        PROJECT = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcOccupantTypeEnum
    {
        ASSIGNEE = 0,
        ASSIGNOR = 1,
        LESSEE = 2,
        LESSOR = 3,
        LETTINGAGENT = 4,
        OWNER = 5,
        TENANT = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcOutletTypeEnum
    {
        AUDIOVISUALOUTLET = 0,
        COMMUNICATIONSOUTLET = 1,
        POWEROUTLET = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcPermeableCoveringOperationEnum
    {
        GRILL = 0,
        LOUVER = 1,
        SCREEN = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcPhysicalOrVirtualEnum
    {
        PHYSICAL = 0,
        VIRTUAL = 1,
        NOTDEFINED = 2,
        ___unk = -1
    };

    enum class IfcPileConstructionEnum
    {
        CAST_IN_PLACE = 0,
        COMPOSITE = 1,
        PRECAST_CONCRETE = 2,
        PREFAB_STEEL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcPileTypeEnum
    {
        COHESION = 0,
        FRICTION = 1,
        SUPPORT = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcPipeFittingTypeEnum
    {
        BEND = 0,
        CONNECTOR = 1,
        ENTRY = 2,
        EXIT = 3,
        JUNCTION = 4,
        OBSTRUCTION = 5,
        TRANSITION = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcPipeSegmentTypeEnum
    {
        FLEXIBLESEGMENT = 0,
        RIGIDSEGMENT = 1,
        GUTTER = 2,
        SPOOL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcPlateTypeEnum
    {
        CURTAIN_PANEL = 0,
        SHEET = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcProcedureTypeEnum
    {
        ADVICE_CAUTION = 0,
        ADVICE_NOTE = 1,
        ADVICE_WARNING = 2,
        CALIBRATION = 3,
        DIAGNOSTIC = 4,
        SHUTDOWN = 5,
        STARTUP = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcProfileTypeEnum
    {
        CURVE = 0,
        AREA = 1,
        ___unk = -1
    };

    enum class IfcProjectedOrTrueLengthEnum
    {
        PROJECTED_LENGTH = 0,
        TRUE_LENGTH = 1,
        ___unk = -1
    };

    enum class IfcProjectOrderRecordTypeEnum
    {
        CHANGE = 0,
        MAINTENANCE = 1,
        MOVE = 2,
        PURCHASE = 3,
        WORK = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcProjectOrderTypeEnum
    {
        CHANGEORDER = 0,
        MAINTENANCEWORKORDER = 1,
        MOVEORDER = 2,
        PURCHASEORDER = 3,
        WORKORDER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcPropertySourceEnum
    {
        DESIGN = 0,
        DESIGNMAXIMUM = 1,
        DESIGNMINIMUM = 2,
        SIMULATED = 3,
        ASBUILT = 4,
        COMMISSIONING = 5,
        MEASURED = 6,
        USERDEFINED = 7,
        NOTKNOWN = 8,
        ___unk = -1
    };

    enum class IfcProtectiveDeviceTypeEnum
    {
        FUSEDISCONNECTOR = 0,
        CIRCUITBREAKER = 1,
        EARTHFAILUREDEVICE = 2,
        RESIDUALCURRENTCIRCUITBREAKER = 3,
        RESIDUALCURRENTSWITCH = 4,
        VARISTOR = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcPumpTypeEnum
    {
        CIRCULATOR = 0,
        ENDSUCTION = 1,
        SPLITCASE = 2,
        VERTICALINLINE = 3,
        VERTICALTURBINE = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcRailingTypeEnum
    {
        HANDRAIL = 0,
        GUARDRAIL = 1,
        BALUSTRADE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcRampFlightTypeEnum
    {
        STRAIGHT = 0,
        SPIRAL = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcRampTypeEnum
    {
        STRAIGHT_RUN_RAMP = 0,
        TWO_STRAIGHT_RUN_RAMP = 1,
        QUARTER_TURN_RAMP = 2,
        TWO_QUARTER_TURN_RAMP = 3,
        HALF_TURN_RAMP = 4,
        SPIRAL_RAMP = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcReflectanceMethodEnum
    {
        BLINN = 0,
        FLAT = 1,
        GLASS = 2,
        MATT = 3,
        METAL = 4,
        MIRROR = 5,
        PHONG = 6,
        PLASTIC = 7,
        STRAUSS = 8,
        NOTDEFINED = 9,
        ___unk = -1
    };

    enum class IfcReinforcingBarRoleEnum
    {
        MAIN = 0,
        SHEAR = 1,
        LIGATURE = 2,
        STUD = 3,
        PUNCHING = 4,
        EDGE = 5,
        RING = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcReinforcingBarSurfaceEnum
    {
        PLAIN = 0,
        TEXTURED = 1,
        ___unk = -1
    };

    enum class IfcResourceConsumptionEnum
    {
        CONSUMED = 0,
        PARTIALLYCONSUMED = 1,
        NOTCONSUMED = 2,
        OCCUPIED = 3,
        PARTIALLYOCCUPIED = 4,
        NOTOCCUPIED = 5,
        USERDEFINED = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcRibPlateDirectionEnum
    {
        DIRECTION_X = 0,
        DIRECTION_Y = 1,
        ___unk = -1
    };

    enum class IfcRoleEnum
    {
        SUPPLIER = 0,
        MANUFACTURER = 1,
        CONTRACTOR = 2,
        SUBCONTRACTOR = 3,
        ARCHITECT = 4,
        STRUCTURALENGINEER = 5,
        COSTENGINEER = 6,
        CLIENT = 7,
        BUILDINGOWNER = 8,
        BUILDINGOPERATOR = 9,
        MECHANICALENGINEER = 10,
        ELECTRICALENGINEER = 11,
        PROJECTMANAGER = 12,
        FACILITIESMANAGER = 13,
        CIVILENGINEER = 14,
        COMISSIONINGENGINEER = 15,
        ENGINEER = 16,
        OWNER = 17,
        CONSULTANT = 18,
        CONSTRUCTIONMANAGER = 19,
        FIELDCONSTRUCTIONMANAGER = 20,
        RESELLER = 21,
        USERDEFINED = 22,
        ___unk = -1
    };

    enum class IfcRoofTypeEnum
    {
        FLAT_ROOF = 0,
        SHED_ROOF = 1,
        GABLE_ROOF = 2,
        HIP_ROOF = 3,
        HIPPED_GABLE_ROOF = 4,
        GAMBREL_ROOF = 5,
        MANSARD_ROOF = 6,
        BARREL_ROOF = 7,
        RAINBOW_ROOF = 8,
        BUTTERFLY_ROOF = 9,
        PAVILION_ROOF = 10,
        DOME_ROOF = 11,
        FREEFORM = 12,
        NOTDEFINED = 13,
        ___unk = -1
    };

    enum class IfcSanitaryTerminalTypeEnum
    {
        BATH = 0,
        BIDET = 1,
        CISTERN = 2,
        SHOWER = 3,
        SINK = 4,
        SANITARYFOUNTAIN = 5,
        TOILETPAN = 6,
        URINAL = 7,
        WASHHANDBASIN = 8,
        WCSEAT = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        ___unk = -1
    };

    enum class IfcSectionTypeEnum
    {
        UNIFORM = 0,
        TAPERED = 1,
        ___unk = -1
    };

    enum class IfcSensorTypeEnum
    {
        CO2SENSOR = 0,
        FIRESENSOR = 1,
        FLOWSENSOR = 2,
        GASSENSOR = 3,
        HEATSENSOR = 4,
        HUMIDITYSENSOR = 5,
        LIGHTSENSOR = 6,
        MOISTURESENSOR = 7,
        MOVEMENTSENSOR = 8,
        PRESSURESENSOR = 9,
        SMOKESENSOR = 10,
        SOUNDSENSOR = 11,
        TEMPERATURESENSOR = 12,
        USERDEFINED = 13,
        NOTDEFINED = 14,
        ___unk = -1
    };

    enum class IfcSequenceEnum
    {
        START_START = 0,
        START_FINISH = 1,
        FINISH_START = 2,
        FINISH_FINISH = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcServiceLifeFactorTypeEnum
    {
        A_QUALITYOFCOMPONENTS = 0,
        B_DESIGNLEVEL = 1,
        C_WORKEXECUTIONLEVEL = 2,
        D_INDOORENVIRONMENT = 3,
        E_OUTDOORENVIRONMENT = 4,
        F_INUSECONDITIONS = 5,
        G_MAINTENANCELEVEL = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcServiceLifeTypeEnum
    {
        ACTUALSERVICELIFE = 0,
        EXPECTEDSERVICELIFE = 1,
        OPTIMISTICREFERENCESERVICELIFE = 2,
        PESSIMISTICREFERENCESERVICELIFE = 3,
        REFERENCESERVICELIFE = 4,
        ___unk = -1
    };

    enum class IfcSIPrefix
    {
        EXA = 0,
        PETA = 1,
        TERA = 2,
        GIGA = 3,
        MEGA = 4,
        KILO = 5,
        HECTO = 6,
        DECA = 7,
        DECI = 8,
        CENTI = 9,
        MILLI = 10,
        MICRO = 11,
        NANO = 12,
        PICO = 13,
        FEMTO = 14,
        ATTO = 15,
        ___unk = -1
    };

    enum class IfcSIUnitName
    {
        AMPERE = 0,
        BECQUEREL = 1,
        CANDELA = 2,
        COULOMB = 3,
        CUBIC_METRE = 4,
        DEGREE_CELSIUS = 5,
        FARAD = 6,
        GRAM = 7,
        GRAY = 8,
        HENRY = 9,
        HERTZ = 10,
        JOULE = 11,
        KELVIN = 12,
        LUMEN = 13,
        LUX = 14,
        METRE = 15,
        MOLE = 16,
        NEWTON = 17,
        OHM = 18,
        PASCAL = 19,
        RADIAN = 20,
        SECOND = 21,
        SIEMENS = 22,
        SIEVERT = 23,
        SQUARE_METRE = 24,
        STERADIAN = 25,
        TESLA = 26,
        VOLT = 27,
        WATT = 28,
        WEBER = 29,
        ___unk = -1
    };

    enum class IfcSlabTypeEnum
    {
        FLOOR = 0,
        ROOF = 1,
        LANDING = 2,
        BASESLAB = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcSoundScaleEnum
    {
        DBA = 0,
        DBB = 1,
        DBC = 2,
        NC = 3,
        NR = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcSpaceHeaterTypeEnum
    {
        SECTIONALRADIATOR = 0,
        PANELRADIATOR = 1,
        TUBULARRADIATOR = 2,
        CONVECTOR = 3,
        BASEBOARDHEATER = 4,
        FINNEDTUBEUNIT = 5,
        UNITHEATER = 6,
        USERDEFINED = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcSpaceTypeEnum
    {
        USERDEFINED = 0,
        NOTDEFINED = 1,
        ___unk = -1
    };

    enum class IfcStackTerminalTypeEnum
    {
        BIRDCAGE = 0,
        COWL = 1,
        RAINWATERHOPPER = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcStairFlightTypeEnum
    {
        STRAIGHT = 0,
        WINDER = 1,
        SPIRAL = 2,
        CURVED = 3,
        FREEFORM = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcStairTypeEnum
    {
        STRAIGHT_RUN_STAIR = 0,
        TWO_STRAIGHT_RUN_STAIR = 1,
        QUARTER_WINDING_STAIR = 2,
        QUARTER_TURN_STAIR = 3,
        HALF_WINDING_STAIR = 4,
        HALF_TURN_STAIR = 5,
        TWO_QUARTER_WINDING_STAIR = 6,
        TWO_QUARTER_TURN_STAIR = 7,
        THREE_QUARTER_WINDING_STAIR = 8,
        THREE_QUARTER_TURN_STAIR = 9,
        SPIRAL_STAIR = 10,
        DOUBLE_RETURN_STAIR = 11,
        CURVED_RUN_STAIR = 12,
        TWO_CURVED_RUN_STAIR = 13,
        USERDEFINED = 14,
        NOTDEFINED = 15,
        ___unk = -1
    };

    enum class IfcStateEnum
    {
        READWRITE = 0,
        READONLY = 1,
        LOCKED = 2,
        READWRITELOCKED = 3,
        READONLYLOCKED = 4,
        ___unk = -1
    };

    enum class IfcStructuralCurveTypeEnum
    {
        RIGID_JOINED_MEMBER = 0,
        PIN_JOINED_MEMBER = 1,
        CABLE = 2,
        TENSION_MEMBER = 3,
        COMPRESSION_MEMBER = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcStructuralSurfaceTypeEnum
    {
        BENDING_ELEMENT = 0,
        MEMBRANE_ELEMENT = 1,
        SHELL = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcSurfaceSide
    {
        POSITIVE = 0,
        NEGATIVE = 1,
        BOTH = 2,
        ___unk = -1
    };

    enum class IfcSurfaceTextureEnum
    {
        BUMP = 0,
        OPACITY = 1,
        REFLECTION = 2,
        SELFILLUMINATION = 3,
        SHININESS = 4,
        SPECULAR = 5,
        TEXTURE = 6,
        TRANSPARENCYMAP = 7,
        NOTDEFINED = 8,
        ___unk = -1
    };

    enum class IfcSwitchingDeviceTypeEnum
    {
        CONTACTOR = 0,
        EMERGENCYSTOP = 1,
        STARTER = 2,
        SWITCHDISCONNECTOR = 3,
        TOGGLESWITCH = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcTankTypeEnum
    {
        PREFORMED = 0,
        SECTIONAL = 1,
        EXPANSION = 2,
        PRESSUREVESSEL = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcTendonTypeEnum
    {
        STRAND = 0,
        WIRE = 1,
        BAR = 2,
        COATED = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcTextPath
    {
        LEFT = 0,
        RIGHT = 1,
        UP = 2,
        DOWN = 3,
        ___unk = -1
    };

    enum class IfcThermalLoadSourceEnum
    {
        PEOPLE = 0,
        LIGHTING = 1,
        EQUIPMENT = 2,
        VENTILATIONINDOORAIR = 3,
        VENTILATIONOUTSIDEAIR = 4,
        RECIRCULATEDAIR = 5,
        EXHAUSTAIR = 6,
        AIREXCHANGERATE = 7,
        DRYBULBTEMPERATURE = 8,
        RELATIVEHUMIDITY = 9,
        INFILTRATION = 10,
        USERDEFINED = 11,
        NOTDEFINED = 12,
        ___unk = -1
    };

    enum class IfcThermalLoadTypeEnum
    {
        SENSIBLE = 0,
        LATENT = 1,
        RADIANT = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcTimeSeriesDataTypeEnum
    {
        CONTINUOUS = 0,
        DISCRETE = 1,
        DISCRETEBINARY = 2,
        PIECEWISEBINARY = 3,
        PIECEWISECONSTANT = 4,
        PIECEWISECONTINUOUS = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcTimeSeriesScheduleTypeEnum
    {
        ANNUAL = 0,
        MONTHLY = 1,
        WEEKLY = 2,
        DAILY = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcTransformerTypeEnum
    {
        CURRENT = 0,
        FREQUENCY = 1,
        VOLTAGE = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcTransitionCode
    {
        DISCONTINUOUS = 0,
        CONTINUOUS = 1,
        CONTSAMEGRADIENT = 2,
        CONTSAMEGRADIENTSAMECURVATURE = 3,
        ___unk = -1
    };

    enum class IfcTransportElementTypeEnum
    {
        ELEVATOR = 0,
        ESCALATOR = 1,
        MOVINGWALKWAY = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };

    enum class IfcTrimmingPreference
    {
        CARTESIAN = 0,
        PARAMETER = 1,
        UNSPECIFIED = 2,
        ___unk = -1
    };

    enum class IfcTubeBundleTypeEnum
    {
        FINNED = 0,
        USERDEFINED = 1,
        NOTDEFINED = 2,
        ___unk = -1
    };

    enum class IfcUnitaryEquipmentTypeEnum
    {
        AIRHANDLER = 0,
        AIRCONDITIONINGUNIT = 1,
        SPLITSYSTEM = 2,
        ROOFTOPUNIT = 3,
        USERDEFINED = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcUnitEnum
    {
        ABSORBEDDOSEUNIT = 0,
        AMOUNTOFSUBSTANCEUNIT = 1,
        AREAUNIT = 2,
        DOSEEQUIVALENTUNIT = 3,
        ELECTRICCAPACITANCEUNIT = 4,
        ELECTRICCHARGEUNIT = 5,
        ELECTRICCONDUCTANCEUNIT = 6,
        ELECTRICCURRENTUNIT = 7,
        ELECTRICRESISTANCEUNIT = 8,
        ELECTRICVOLTAGEUNIT = 9,
        ENERGYUNIT = 10,
        FORCEUNIT = 11,
        FREQUENCYUNIT = 12,
        ILLUMINANCEUNIT = 13,
        INDUCTANCEUNIT = 14,
        LENGTHUNIT = 15,
        LUMINOUSFLUXUNIT = 16,
        LUMINOUSINTENSITYUNIT = 17,
        MAGNETICFLUXDENSITYUNIT = 18,
        MAGNETICFLUXUNIT = 19,
        MASSUNIT = 20,
        PLANEANGLEUNIT = 21,
        POWERUNIT = 22,
        PRESSUREUNIT = 23,
        RADIOACTIVITYUNIT = 24,
        SOLIDANGLEUNIT = 25,
        THERMODYNAMICTEMPERATUREUNIT = 26,
        TIMEUNIT = 27,
        VOLUMEUNIT = 28,
        USERDEFINED = 29,
        ___unk = -1
    };

    enum class IfcValveTypeEnum
    {
        AIRRELEASE = 0,
        ANTIVACUUM = 1,
        CHANGEOVER = 2,
        CHECK = 3,
        COMMISSIONING = 4,
        DIVERTING = 5,
        DRAWOFFCOCK = 6,
        DOUBLECHECK = 7,
        DOUBLEREGULATING = 8,
        FAUCET = 9,
        FLUSHING = 10,
        GASCOCK = 11,
        GASTAP = 12,
        ISOLATING = 13,
        MIXING = 14,
        PRESSUREREDUCING = 15,
        PRESSURERELIEF = 16,
        REGULATING = 17,
        SAFETYCUTOFF = 18,
        STEAMTRAP = 19,
        STOPCOCK = 20,
        USERDEFINED = 21,
        NOTDEFINED = 22,
        ___unk = -1
    };

    enum class IfcVibrationIsolatorTypeEnum
    {
        COMPRESSION = 0,
        SPRING = 1,
        USERDEFINED = 2,
        NOTDEFINED = 3,
        ___unk = -1
    };

    enum class IfcWallTypeEnum
    {
        STANDARD = 0,
        POLYGONAL = 1,
        SHEAR = 2,
        ELEMENTEDWALL = 3,
        PLUMBINGWALL = 4,
        USERDEFINED = 5,
        NOTDEFINED = 6,
        ___unk = -1
    };

    enum class IfcWasteTerminalTypeEnum
    {
        FLOORTRAP = 0,
        FLOORWASTE = 1,
        GULLYSUMP = 2,
        GULLYTRAP = 3,
        GREASEINTERCEPTOR = 4,
        OILINTERCEPTOR = 5,
        PETROLINTERCEPTOR = 6,
        ROOFDRAIN = 7,
        WASTEDISPOSALUNIT = 8,
        WASTETRAP = 9,
        USERDEFINED = 10,
        NOTDEFINED = 11,
        ___unk = -1
    };

    enum class IfcWindowPanelOperationEnum
    {
        SIDEHUNGRIGHTHAND = 0,
        SIDEHUNGLEFTHAND = 1,
        TILTANDTURNRIGHTHAND = 2,
        TILTANDTURNLEFTHAND = 3,
        TOPHUNG = 4,
        BOTTOMHUNG = 5,
        PIVOTHORIZONTAL = 6,
        PIVOTVERTICAL = 7,
        SLIDINGHORIZONTAL = 8,
        SLIDINGVERTICAL = 9,
        REMOVABLECASEMENT = 10,
        FIXEDCASEMENT = 11,
        OTHEROPERATION = 12,
        NOTDEFINED = 13,
        ___unk = -1
    };

    enum class IfcWindowPanelPositionEnum
    {
        LEFT = 0,
        MIDDLE = 1,
        RIGHT = 2,
        BOTTOM = 3,
        TOP = 4,
        NOTDEFINED = 5,
        ___unk = -1
    };

    enum class IfcWindowStyleConstructionEnum
    {
        ALUMINIUM = 0,
        HIGH_GRADE_STEEL = 1,
        STEEL = 2,
        WOOD = 3,
        ALUMINIUM_WOOD = 4,
        PLASTIC = 5,
        OTHER_CONSTRUCTION = 6,
        NOTDEFINED = 7,
        ___unk = -1
    };

    enum class IfcWindowStyleOperationEnum
    {
        SINGLE_PANEL = 0,
        DOUBLE_PANEL_VERTICAL = 1,
        DOUBLE_PANEL_HORIZONTAL = 2,
        TRIPLE_PANEL_VERTICAL = 3,
        TRIPLE_PANEL_BOTTOM = 4,
        TRIPLE_PANEL_TOP = 5,
        TRIPLE_PANEL_LEFT = 6,
        TRIPLE_PANEL_RIGHT = 7,
        TRIPLE_PANEL_HORIZONTAL = 8,
        USERDEFINED = 9,
        NOTDEFINED = 10,
        ___unk = -1
    };

    enum class IfcWorkControlTypeEnum
    {
        ACTUAL = 0,
        BASELINE = 1,
        PLANNED = 2,
        USERDEFINED = 3,
        NOTDEFINED = 4,
        ___unk = -1
    };
    //
    static TextValue IfcActionSourceTypeEnum_[] = {"DEAD_LOAD_G", "COMPLETION_G1", "LIVE_LOAD_Q", "SNOW_S", "WIND_W", "PRESTRESSING_P", "SETTLEMENT_U", "TEMPERATURE_T", "EARTHQUAKE_E", "FIRE", "IMPULSE", "IMPACT", "TRANSPORT", "ERECTION", "PROPPING", "SYSTEM_IMPERFECTION", "SHRINKAGE", "CREEP", "LACK_OF_FIT", "BUOYANCY", "ICE", "CURRENT", "WAVE", "RAIN", "BRAKES", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcActionTypeEnum_[] = {"PERMANENT_G", "VARIABLE_Q", "EXTRAORDINARY_A", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcActuatorTypeEnum_[] = {"ELECTRICACTUATOR", "HANDOPERATEDACTUATOR", "HYDRAULICACTUATOR", "PNEUMATICACTUATOR", "THERMOSTATICACTUATOR", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcAddressTypeEnum_[] = {"OFFICE", "SITE", "HOME", "DISTRIBUTIONPOINT", "USERDEFINED", NULL};
    static TextValue IfcAheadOrBehind_[] = {"AHEAD", "BEHIND", NULL};
    static TextValue IfcAirTerminalBoxTypeEnum_[] = {"CONSTANTFLOW", "VARIABLEFLOWPRESSUREDEPENDANT", "VARIABLEFLOWPRESSUREINDEPENDANT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcAirTerminalTypeEnum_[] = {"GRILLE", "REGISTER", "DIFFUSER", "EYEBALL", "IRIS", "LINEARGRILLE", "LINEARDIFFUSER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcAirToAirHeatRecoveryTypeEnum_[] = {"FIXEDPLATECOUNTERFLOWEXCHANGER", "FIXEDPLATECROSSFLOWEXCHANGER", "FIXEDPLATEPARALLELFLOWEXCHANGER", "ROTARYWHEEL", "RUNAROUNDCOILLOOP", "HEATPIPE", "TWINTOWERENTHALPYRECOVERYLOOPS", "THERMOSIPHONSEALEDTUBEHEATEXCHANGERS", "THERMOSIPHONCOILTYPEHEATEXCHANGERS", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcAlarmTypeEnum_[] = {"BELL", "BREAKGLASSBUTTON", "LIGHT", "MANUALPULLBOX", "SIREN", "WHISTLE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcAnalysisModelTypeEnum_[] = {"IN_PLANE_LOADING_2D", "OUT_PLANE_LOADING_2D", "LOADING_3D", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcAnalysisTheoryTypeEnum_[] = {"FIRST_ORDER_THEORY", "SECOND_ORDER_THEORY", "THIRD_ORDER_THEORY", "FULL_NONLINEAR_THEORY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcArithmeticOperatorEnum_[] = {"ADD", "DIVIDE", "MULTIPLY", "SUBTRACT", NULL};
    static TextValue IfcAssemblyPlaceEnum_[] = {"SITE", "FACTORY", "NOTDEFINED", NULL};
    static TextValue IfcBeamTypeEnum_[] = {"BEAM", "JOIST", "LINTEL", "T_BEAM", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcBenchmarkEnum_[] = {"GREATERTHAN", "GREATERTHANOREQUALTO", "LESSTHAN", "LESSTHANOREQUALTO", "EQUALTO", "NOTEQUALTO", NULL};
    static TextValue IfcBoilerTypeEnum_[] = {"WATER", "STEAM", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcBooleanOperator_[] = {"UNION", "INTERSECTION", "DIFFERENCE", NULL};
    static TextValue IfcBSplineCurveForm_[] = {"POLYLINE_FORM", "CIRCULAR_ARC", "ELLIPTIC_ARC", "PARABOLIC_ARC", "HYPERBOLIC_ARC", "UNSPECIFIED", NULL};
    static TextValue IfcBuildingElementProxyTypeEnum_[] = {"USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCableCarrierFittingTypeEnum_[] = {"BEND", "CROSS", "REDUCER", "TEE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCableCarrierSegmentTypeEnum_[] = {"CABLELADDERSEGMENT", "CABLETRAYSEGMENT", "CABLETRUNKINGSEGMENT", "CONDUITSEGMENT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCableSegmentTypeEnum_[] = {"CABLESEGMENT", "CONDUCTORSEGMENT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcChangeActionEnum_[] = {"NOCHANGE", "MODIFIED", "ADDED", "DELETED", "MODIFIEDADDED", "MODIFIEDDELETED", NULL};
    static TextValue IfcChillerTypeEnum_[] = {"AIRCOOLED", "WATERCOOLED", "HEATRECOVERY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCoilTypeEnum_[] = {"DXCOOLINGCOIL", "WATERCOOLINGCOIL", "STEAMHEATINGCOIL", "WATERHEATINGCOIL", "ELECTRICHEATINGCOIL", "GASHEATINGCOIL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcColumnTypeEnum_[] = {"COLUMN", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCompressorTypeEnum_[] = {"DYNAMIC", "RECIPROCATING", "ROTARY", "SCROLL", "TROCHOIDAL", "SINGLESTAGE", "BOOSTER", "OPENTYPE", "HERMETIC", "SEMIHERMETIC", "WELDEDSHELLHERMETIC", "ROLLINGPISTON", "ROTARYVANE", "SINGLESCREW", "TWINSCREW", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCondenserTypeEnum_[] = {"WATERCOOLEDSHELLTUBE", "WATERCOOLEDSHELLCOIL", "WATERCOOLEDTUBEINTUBE", "WATERCOOLEDBRAZEDPLATE", "AIRCOOLED", "EVAPORATIVECOOLED", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcConnectionTypeEnum_[] = {"ATPATH", "ATSTART", "ATEND", "NOTDEFINED", NULL};
    static TextValue IfcConstraintEnum_[] = {"HARD", "SOFT", "ADVISORY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcControllerTypeEnum_[] = {"FLOATING", "PROPORTIONAL", "PROPORTIONALINTEGRAL", "PROPORTIONALINTEGRALDERIVATIVE", "TIMEDTWOPOSITION", "TWOPOSITION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCooledBeamTypeEnum_[] = {"ACTIVE", "PASSIVE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCoolingTowerTypeEnum_[] = {"NATURALDRAFT", "MECHANICALINDUCEDDRAFT", "MECHANICALFORCEDDRAFT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCostScheduleTypeEnum_[] = {"BUDGET", "COSTPLAN", "ESTIMATE", "TENDER", "PRICEDBILLOFQUANTITIES", "UNPRICEDBILLOFQUANTITIES", "SCHEDULEOFRATES", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCoveringTypeEnum_[] = {"CEILING", "FLOORING", "CLADDING", "ROOFING", "INSULATION", "MEMBRANE", "SLEEVING", "WRAPPING", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcCurrencyEnum_[] = {"AED", "AES", "ATS", "AUD", "BBD", "BEG", "BGL", "BHD", "BMD", "BND", "BRL", "BSD", "BWP", "BZD", "CAD", "CBD", "CHF", "CLP", "CNY", "CYS", "CZK", "DDP", "DEM", "DKK", "EGL", "EST", "EUR", "FAK", "FIM", "FJD", "FKP", "FRF", "GBP", "GIP", "GMD", "GRX", "HKD", "HUF", "ICK", "IDR", "ILS", "INR", "IRP", "ITL", "JMD", "JOD", "JPY", "KES", "KRW", "KWD", "KYD", "LKR", "LUF", "MTL", "MUR", "MXN", "MYR", "NLG", "NZD", "OMR", "PGK", "PHP", "PKR", "PLN", "PTN", "QAR", "RUR", "SAR", "SCR", "SEK", "SGD", "SKP", "THB", "TRL", "TTD", "TWD", "USD", "VEB", "VND", "XEU", "ZAR", "ZWD", "NOK", NULL};
    static TextValue IfcCurtainWallTypeEnum_[] = {"USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDamperTypeEnum_[] = {"CONTROLDAMPER", "FIREDAMPER", "SMOKEDAMPER", "FIRESMOKEDAMPER", "BACKDRAFTDAMPER", "RELIEFDAMPER", "BLASTDAMPER", "GRAVITYDAMPER", "GRAVITYRELIEFDAMPER", "BALANCINGDAMPER", "FUMEHOODEXHAUST", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDataOriginEnum_[] = {"MEASURED", "PREDICTED", "SIMULATED", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDerivedUnitEnum_[] = {"ANGULARVELOCITYUNIT", "COMPOUNDPLANEANGLEUNIT", "DYNAMICVISCOSITYUNIT", "HEATFLUXDENSITYUNIT", "INTEGERCOUNTRATEUNIT", "ISOTHERMALMOISTURECAPACITYUNIT", "KINEMATICVISCOSITYUNIT", "LINEARVELOCITYUNIT", "MASSDENSITYUNIT", "MASSFLOWRATEUNIT", "MOISTUREDIFFUSIVITYUNIT", "MOLECULARWEIGHTUNIT", "SPECIFICHEATCAPACITYUNIT", "THERMALADMITTANCEUNIT", "THERMALCONDUCTANCEUNIT", "THERMALRESISTANCEUNIT", "THERMALTRANSMITTANCEUNIT", "VAPORPERMEABILITYUNIT", "VOLUMETRICFLOWRATEUNIT", "ROTATIONALFREQUENCYUNIT", "TORQUEUNIT", "MOMENTOFINERTIAUNIT", "LINEARMOMENTUNIT", "LINEARFORCEUNIT", "PLANARFORCEUNIT", "MODULUSOFELASTICITYUNIT", "SHEARMODULUSUNIT", "LINEARSTIFFNESSUNIT", "ROTATIONALSTIFFNESSUNIT", "MODULUSOFSUBGRADEREACTIONUNIT", "ACCELERATIONUNIT", "CURVATUREUNIT", "HEATINGVALUEUNIT", "IONCONCENTRATIONUNIT", "LUMINOUSINTENSITYDISTRIBUTIONUNIT", "MASSPERLENGTHUNIT", "MODULUSOFLINEARSUBGRADEREACTIONUNIT", "MODULUSOFROTATIONALSUBGRADEREACTIONUNIT", "PHUNIT", "ROTATIONALMASSUNIT", "SECTIONAREAINTEGRALUNIT", "SECTIONMODULUSUNIT", "SOUNDPOWERUNIT", "SOUNDPRESSUREUNIT", "TEMPERATUREGRADIENTUNIT", "THERMALEXPANSIONCOEFFICIENTUNIT", "WARPINGCONSTANTUNIT", "WARPINGMOMENTUNIT", "USERDEFINED", NULL};
    static TextValue IfcDimensionExtentUsage_[] = {"ORIGIN", "TARGET", NULL};
    static TextValue IfcDirectionSenseEnum_[] = {"POSITIVE", "NEGATIVE", NULL};
    static TextValue IfcDistributionChamberElementTypeEnum_[] = {"FORMEDDUCT", "INSPECTIONCHAMBER", "INSPECTIONPIT", "MANHOLE", "METERCHAMBER", "SUMP", "TRENCH", "VALVECHAMBER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDocumentConfidentialityEnum_[] = {"PUBLIC", "RESTRICTED", "CONFIDENTIAL", "PERSONAL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDocumentStatusEnum_[] = {"DRAFT", "FINALDRAFT", "FINAL", "REVISION", "NOTDEFINED", NULL};
    static TextValue IfcDoorPanelOperationEnum_[] = {"SWINGING", "DOUBLE_ACTING", "SLIDING", "FOLDING", "REVOLVING", "ROLLINGUP", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDoorPanelPositionEnum_[] = {"LEFT", "MIDDLE", "RIGHT", "NOTDEFINED", NULL};
    static TextValue IfcDoorStyleConstructionEnum_[] = {"ALUMINIUM", "HIGH_GRADE_STEEL", "STEEL", "WOOD", "ALUMINIUM_WOOD", "ALUMINIUM_PLASTIC", "PLASTIC", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDoorStyleOperationEnum_[] = {"SINGLE_SWING_LEFT", "SINGLE_SWING_RIGHT", "DOUBLE_DOOR_SINGLE_SWING", "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT", "DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT", "DOUBLE_SWING_LEFT", "DOUBLE_SWING_RIGHT", "DOUBLE_DOOR_DOUBLE_SWING", "SLIDING_TO_LEFT", "SLIDING_TO_RIGHT", "DOUBLE_DOOR_SLIDING", "FOLDING_TO_LEFT", "FOLDING_TO_RIGHT", "DOUBLE_DOOR_FOLDING", "REVOLVING", "ROLLINGUP", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDuctFittingTypeEnum_[] = {"BEND", "CONNECTOR", "ENTRY", "EXIT", "JUNCTION", "OBSTRUCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDuctSegmentTypeEnum_[] = {"RIGIDSEGMENT", "FLEXIBLESEGMENT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcDuctSilencerTypeEnum_[] = {"FLATOVAL", "RECTANGULAR", "ROUND", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricApplianceTypeEnum_[] = {"COMPUTER", "DIRECTWATERHEATER", "DISHWASHER", "ELECTRICCOOKER", "ELECTRICHEATER", "FACSIMILE", "FREESTANDINGFAN", "FREEZER", "FRIDGE_FREEZER", "HANDDRYER", "INDIRECTWATERHEATER", "MICROWAVE", "PHOTOCOPIER", "PRINTER", "REFRIGERATOR", "RADIANTHEATER", "SCANNER", "TELEPHONE", "TUMBLEDRYER", "TV", "VENDINGMACHINE", "WASHINGMACHINE", "WATERHEATER", "WATERCOOLER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricCurrentEnum_[] = {"ALTERNATING", "DIRECT", "NOTDEFINED", NULL};
    static TextValue IfcElectricDistributionPointFunctionEnum_[] = {"ALARMPANEL", "CONSUMERUNIT", "CONTROLPANEL", "DISTRIBUTIONBOARD", "GASDETECTORPANEL", "INDICATORPANEL", "MIMICPANEL", "MOTORCONTROLCENTRE", "SWITCHBOARD", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricFlowStorageDeviceTypeEnum_[] = {"BATTERY", "CAPACITORBANK", "HARMONICFILTER", "INDUCTORBANK", "UPS", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricGeneratorTypeEnum_[] = {"USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricHeaterTypeEnum_[] = {"ELECTRICPOINTHEATER", "ELECTRICCABLEHEATER", "ELECTRICMATHEATER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricMotorTypeEnum_[] = {"DC", "INDUCTION", "POLYPHASE", "RELUCTANCESYNCHRONOUS", "SYNCHRONOUS", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElectricTimeControlTypeEnum_[] = {"TIMECLOCK", "TIMEDELAY", "RELAY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElementAssemblyTypeEnum_[] = {"ACCESSORY_ASSEMBLY", "ARCH", "BEAM_GRID", "BRACED_FRAME", "GIRDER", "REINFORCEMENT_UNIT", "RIGID_FRAME", "SLAB_FIELD", "TRUSS", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcElementCompositionEnum_[] = {"COMPLEX", "ELEMENT", "PARTIAL", NULL};
    static TextValue IfcEnergySequenceEnum_[] = {"PRIMARY", "SECONDARY", "TERTIARY", "AUXILIARY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcEnvironmentalImpactCategoryEnum_[] = {"COMBINEDVALUE", "DISPOSAL", "EXTRACTION", "INSTALLATION", "MANUFACTURE", "TRANSPORTATION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcEvaporativeCoolerTypeEnum_[] = {"DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER", "DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER", "DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER", "DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER", "DIRECTEVAPORATIVEAIRWASHER", "INDIRECTEVAPORATIVEPACKAGEAIRCOOLER", "INDIRECTEVAPORATIVEWETCOIL", "INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER", "INDIRECTDIRECTCOMBINATION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcEvaporatorTypeEnum_[] = {"DIRECTEXPANSIONSHELLANDTUBE", "DIRECTEXPANSIONTUBEINTUBE", "DIRECTEXPANSIONBRAZEDPLATE", "FLOODEDSHELLANDTUBE", "SHELLANDCOIL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcFanTypeEnum_[] = {"CENTRIFUGALFORWARDCURVED", "CENTRIFUGALRADIAL", "CENTRIFUGALBACKWARDINCLINEDCURVED", "CENTRIFUGALAIRFOIL", "TUBEAXIAL", "VANEAXIAL", "PROPELLORAXIAL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcFilterTypeEnum_[] = {"AIRPARTICLEFILTER", "ODORFILTER", "OILFILTER", "STRAINER", "WATERFILTER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcFireSuppressionTerminalTypeEnum_[] = {"BREECHINGINLET", "FIREHYDRANT", "HOSEREEL", "SPRINKLER", "SPRINKLERDEFLECTOR", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcFlowDirectionEnum_[] = {"SOURCE", "SINK", "SOURCEANDSINK", "NOTDEFINED", NULL};
    static TextValue IfcFlowInstrumentTypeEnum_[] = {"PRESSUREGAUGE", "THERMOMETER", "AMMETER", "FREQUENCYMETER", "POWERFACTORMETER", "PHASEANGLEMETER", "VOLTMETER_PEAK", "VOLTMETER_RMS", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcFlowMeterTypeEnum_[] = {"ELECTRICMETER", "ENERGYMETER", "FLOWMETER", "GASMETER", "OILMETER", "WATERMETER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcFootingTypeEnum_[] = {"FOOTING_BEAM", "PAD_FOOTING", "PILE_CAP", "STRIP_FOOTING", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcGasTerminalTypeEnum_[] = {"GASAPPLIANCE", "GASBOOSTER", "GASBURNER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcGeometricProjectionEnum_[] = {"GRAPH_VIEW", "SKETCH_VIEW", "MODEL_VIEW", "PLAN_VIEW", "REFLECTED_PLAN_VIEW", "SECTION_VIEW", "ELEVATION_VIEW", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcGlobalOrLocalEnum_[] = {"GLOBAL_COORDS", "LOCAL_COORDS", NULL};
    static TextValue IfcHeatExchangerTypeEnum_[] = {"PLATE", "SHELLANDTUBE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcHumidifierTypeEnum_[] = {"STEAMINJECTION", "ADIABATICAIRWASHER", "ADIABATICPAN", "ADIABATICWETTEDELEMENT", "ADIABATICATOMIZING", "ADIABATICULTRASONIC", "ADIABATICRIGIDMEDIA", "ADIABATICCOMPRESSEDAIRNOZZLE", "ASSISTEDELECTRIC", "ASSISTEDNATURALGAS", "ASSISTEDPROPANE", "ASSISTEDBUTANE", "ASSISTEDSTEAM", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcInternalOrExternalEnum_[] = {"INTERNAL", "EXTERNAL", "NOTDEFINED", NULL};
    static TextValue IfcInventoryTypeEnum_[] = {"ASSETINVENTORY", "SPACEINVENTORY", "FURNITUREINVENTORY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcJunctionBoxTypeEnum_[] = {"USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcLampTypeEnum_[] = {"COMPACTFLUORESCENT", "FLUORESCENT", "HIGHPRESSUREMERCURY", "HIGHPRESSURESODIUM", "METALHALIDE", "TUNGSTENFILAMENT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcLayerSetDirectionEnum_[] = {"AXIS1", "AXIS2", "AXIS3", NULL};
    static TextValue IfcLightDistributionCurveEnum_[] = {"TYPE_A", "TYPE_B", "TYPE_C", "NOTDEFINED", NULL};
    static TextValue IfcLightEmissionSourceEnum_[] = {"COMPACTFLUORESCENT", "FLUORESCENT", "HIGHPRESSUREMERCURY", "HIGHPRESSURESODIUM", "LIGHTEMITTINGDIODE", "LOWPRESSURESODIUM", "LOWVOLTAGEHALOGEN", "MAINVOLTAGEHALOGEN", "METALHALIDE", "TUNGSTENFILAMENT", "NOTDEFINED", NULL};
    static TextValue IfcLightFixtureTypeEnum_[] = {"POINTSOURCE", "DIRECTIONSOURCE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcLoadGroupTypeEnum_[] = {"LOAD_GROUP", "LOAD_CASE", "LOAD_COMBINATION_GROUP", "LOAD_COMBINATION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcLogicalOperatorEnum_[] = {"LOGICALAND", "LOGICALOR", NULL};
    static TextValue IfcMemberTypeEnum_[] = {"BRACE", "CHORD", "COLLAR", "MEMBER", "MULLION", "PLATE", "POST", "PURLIN", "RAFTER", "STRINGER", "STRUT", "STUD", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcMotorConnectionTypeEnum_[] = {"BELTDRIVE", "COUPLING", "DIRECTDRIVE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcNullStyle_[] = {"NULL", NULL};
    static TextValue IfcObjectiveEnum_[] = {"CODECOMPLIANCE", "DESIGNINTENT", "HEALTHANDSAFETY", "REQUIREMENT", "SPECIFICATION", "TRIGGERCONDITION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcObjectTypeEnum_[] = {"PRODUCT", "PROCESS", "CONTROL", "RESOURCE", "ACTOR", "GROUP", "PROJECT", "NOTDEFINED", NULL};
    static TextValue IfcOccupantTypeEnum_[] = {"ASSIGNEE", "ASSIGNOR", "LESSEE", "LESSOR", "LETTINGAGENT", "OWNER", "TENANT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcOutletTypeEnum_[] = {"AUDIOVISUALOUTLET", "COMMUNICATIONSOUTLET", "POWEROUTLET", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPermeableCoveringOperationEnum_[] = {"GRILL", "LOUVER", "SCREEN", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPhysicalOrVirtualEnum_[] = {"PHYSICAL", "VIRTUAL", "NOTDEFINED", NULL};
    static TextValue IfcPileConstructionEnum_[] = {"CAST_IN_PLACE", "COMPOSITE", "PRECAST_CONCRETE", "PREFAB_STEEL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPileTypeEnum_[] = {"COHESION", "FRICTION", "SUPPORT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPipeFittingTypeEnum_[] = {"BEND", "CONNECTOR", "ENTRY", "EXIT", "JUNCTION", "OBSTRUCTION", "TRANSITION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPipeSegmentTypeEnum_[] = {"FLEXIBLESEGMENT", "RIGIDSEGMENT", "GUTTER", "SPOOL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPlateTypeEnum_[] = {"CURTAIN_PANEL", "SHEET", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcProcedureTypeEnum_[] = {"ADVICE_CAUTION", "ADVICE_NOTE", "ADVICE_WARNING", "CALIBRATION", "DIAGNOSTIC", "SHUTDOWN", "STARTUP", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcProfileTypeEnum_[] = {"CURVE", "AREA", NULL};
    static TextValue IfcProjectedOrTrueLengthEnum_[] = {"PROJECTED_LENGTH", "TRUE_LENGTH", NULL};
    static TextValue IfcProjectOrderRecordTypeEnum_[] = {"CHANGE", "MAINTENANCE", "MOVE", "PURCHASE", "WORK", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcProjectOrderTypeEnum_[] = {"CHANGEORDER", "MAINTENANCEWORKORDER", "MOVEORDER", "PURCHASEORDER", "WORKORDER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPropertySourceEnum_[] = {"DESIGN", "DESIGNMAXIMUM", "DESIGNMINIMUM", "SIMULATED", "ASBUILT", "COMMISSIONING", "MEASURED", "USERDEFINED", "NOTKNOWN", NULL};
    static TextValue IfcProtectiveDeviceTypeEnum_[] = {"FUSEDISCONNECTOR", "CIRCUITBREAKER", "EARTHFAILUREDEVICE", "RESIDUALCURRENTCIRCUITBREAKER", "RESIDUALCURRENTSWITCH", "VARISTOR", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcPumpTypeEnum_[] = {"CIRCULATOR", "ENDSUCTION", "SPLITCASE", "VERTICALINLINE", "VERTICALTURBINE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcRailingTypeEnum_[] = {"HANDRAIL", "GUARDRAIL", "BALUSTRADE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcRampFlightTypeEnum_[] = {"STRAIGHT", "SPIRAL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcRampTypeEnum_[] = {"STRAIGHT_RUN_RAMP", "TWO_STRAIGHT_RUN_RAMP", "QUARTER_TURN_RAMP", "TWO_QUARTER_TURN_RAMP", "HALF_TURN_RAMP", "SPIRAL_RAMP", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcReflectanceMethodEnum_[] = {"BLINN", "FLAT", "GLASS", "MATT", "METAL", "MIRROR", "PHONG", "PLASTIC", "STRAUSS", "NOTDEFINED", NULL};
    static TextValue IfcReinforcingBarRoleEnum_[] = {"MAIN", "SHEAR", "LIGATURE", "STUD", "PUNCHING", "EDGE", "RING", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcReinforcingBarSurfaceEnum_[] = {"PLAIN", "TEXTURED", NULL};
    static TextValue IfcResourceConsumptionEnum_[] = {"CONSUMED", "PARTIALLYCONSUMED", "NOTCONSUMED", "OCCUPIED", "PARTIALLYOCCUPIED", "NOTOCCUPIED", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcRibPlateDirectionEnum_[] = {"DIRECTION_X", "DIRECTION_Y", NULL};
    static TextValue IfcRoleEnum_[] = {"SUPPLIER", "MANUFACTURER", "CONTRACTOR", "SUBCONTRACTOR", "ARCHITECT", "STRUCTURALENGINEER", "COSTENGINEER", "CLIENT", "BUILDINGOWNER", "BUILDINGOPERATOR", "MECHANICALENGINEER", "ELECTRICALENGINEER", "PROJECTMANAGER", "FACILITIESMANAGER", "CIVILENGINEER", "COMISSIONINGENGINEER", "ENGINEER", "OWNER", "CONSULTANT", "CONSTRUCTIONMANAGER", "FIELDCONSTRUCTIONMANAGER", "RESELLER", "USERDEFINED", NULL};
    static TextValue IfcRoofTypeEnum_[] = {"FLAT_ROOF", "SHED_ROOF", "GABLE_ROOF", "HIP_ROOF", "HIPPED_GABLE_ROOF", "GAMBREL_ROOF", "MANSARD_ROOF", "BARREL_ROOF", "RAINBOW_ROOF", "BUTTERFLY_ROOF", "PAVILION_ROOF", "DOME_ROOF", "FREEFORM", "NOTDEFINED", NULL};
    static TextValue IfcSanitaryTerminalTypeEnum_[] = {"BATH", "BIDET", "CISTERN", "SHOWER", "SINK", "SANITARYFOUNTAIN", "TOILETPAN", "URINAL", "WASHHANDBASIN", "WCSEAT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcSectionTypeEnum_[] = {"UNIFORM", "TAPERED", NULL};
    static TextValue IfcSensorTypeEnum_[] = {"CO2SENSOR", "FIRESENSOR", "FLOWSENSOR", "GASSENSOR", "HEATSENSOR", "HUMIDITYSENSOR", "LIGHTSENSOR", "MOISTURESENSOR", "MOVEMENTSENSOR", "PRESSURESENSOR", "SMOKESENSOR", "SOUNDSENSOR", "TEMPERATURESENSOR", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcSequenceEnum_[] = {"START_START", "START_FINISH", "FINISH_START", "FINISH_FINISH", "NOTDEFINED", NULL};
    static TextValue IfcServiceLifeFactorTypeEnum_[] = {"A_QUALITYOFCOMPONENTS", "B_DESIGNLEVEL", "C_WORKEXECUTIONLEVEL", "D_INDOORENVIRONMENT", "E_OUTDOORENVIRONMENT", "F_INUSECONDITIONS", "G_MAINTENANCELEVEL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcServiceLifeTypeEnum_[] = {"ACTUALSERVICELIFE", "EXPECTEDSERVICELIFE", "OPTIMISTICREFERENCESERVICELIFE", "PESSIMISTICREFERENCESERVICELIFE", "REFERENCESERVICELIFE", NULL};
    static TextValue IfcSIPrefix_[] = {"EXA", "PETA", "TERA", "GIGA", "MEGA", "KILO", "HECTO", "DECA", "DECI", "CENTI", "MILLI", "MICRO", "NANO", "PICO", "FEMTO", "ATTO", NULL};
    static TextValue IfcSIUnitName_[] = {"AMPERE", "BECQUEREL", "CANDELA", "COULOMB", "CUBIC_METRE", "DEGREE_CELSIUS", "FARAD", "GRAM", "GRAY", "HENRY", "HERTZ", "JOULE", "KELVIN", "LUMEN", "LUX", "METRE", "MOLE", "NEWTON", "OHM", "PASCAL", "RADIAN", "SECOND", "SIEMENS", "SIEVERT", "SQUARE_METRE", "STERADIAN", "TESLA", "VOLT", "WATT", "WEBER", NULL};
    static TextValue IfcSlabTypeEnum_[] = {"FLOOR", "ROOF", "LANDING", "BASESLAB", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcSoundScaleEnum_[] = {"DBA", "DBB", "DBC", "NC", "NR", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcSpaceHeaterTypeEnum_[] = {"SECTIONALRADIATOR", "PANELRADIATOR", "TUBULARRADIATOR", "CONVECTOR", "BASEBOARDHEATER", "FINNEDTUBEUNIT", "UNITHEATER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcSpaceTypeEnum_[] = {"USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcStackTerminalTypeEnum_[] = {"BIRDCAGE", "COWL", "RAINWATERHOPPER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcStairFlightTypeEnum_[] = {"STRAIGHT", "WINDER", "SPIRAL", "CURVED", "FREEFORM", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcStairTypeEnum_[] = {"STRAIGHT_RUN_STAIR", "TWO_STRAIGHT_RUN_STAIR", "QUARTER_WINDING_STAIR", "QUARTER_TURN_STAIR", "HALF_WINDING_STAIR", "HALF_TURN_STAIR", "TWO_QUARTER_WINDING_STAIR", "TWO_QUARTER_TURN_STAIR", "THREE_QUARTER_WINDING_STAIR", "THREE_QUARTER_TURN_STAIR", "SPIRAL_STAIR", "DOUBLE_RETURN_STAIR", "CURVED_RUN_STAIR", "TWO_CURVED_RUN_STAIR", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcStateEnum_[] = {"READWRITE", "READONLY", "LOCKED", "READWRITELOCKED", "READONLYLOCKED", NULL};
    static TextValue IfcStructuralCurveTypeEnum_[] = {"RIGID_JOINED_MEMBER", "PIN_JOINED_MEMBER", "CABLE", "TENSION_MEMBER", "COMPRESSION_MEMBER", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcStructuralSurfaceTypeEnum_[] = {"BENDING_ELEMENT", "MEMBRANE_ELEMENT", "SHELL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcSurfaceSide_[] = {"POSITIVE", "NEGATIVE", "BOTH", NULL};
    static TextValue IfcSurfaceTextureEnum_[] = {"BUMP", "OPACITY", "REFLECTION", "SELFILLUMINATION", "SHININESS", "SPECULAR", "TEXTURE", "TRANSPARENCYMAP", "NOTDEFINED", NULL};
    static TextValue IfcSwitchingDeviceTypeEnum_[] = {"CONTACTOR", "EMERGENCYSTOP", "STARTER", "SWITCHDISCONNECTOR", "TOGGLESWITCH", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcTankTypeEnum_[] = {"PREFORMED", "SECTIONAL", "EXPANSION", "PRESSUREVESSEL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcTendonTypeEnum_[] = {"STRAND", "WIRE", "BAR", "COATED", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcTextPath_[] = {"LEFT", "RIGHT", "UP", "DOWN", NULL};
    static TextValue IfcThermalLoadSourceEnum_[] = {"PEOPLE", "LIGHTING", "EQUIPMENT", "VENTILATIONINDOORAIR", "VENTILATIONOUTSIDEAIR", "RECIRCULATEDAIR", "EXHAUSTAIR", "AIREXCHANGERATE", "DRYBULBTEMPERATURE", "RELATIVEHUMIDITY", "INFILTRATION", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcThermalLoadTypeEnum_[] = {"SENSIBLE", "LATENT", "RADIANT", "NOTDEFINED", NULL};
    static TextValue IfcTimeSeriesDataTypeEnum_[] = {"CONTINUOUS", "DISCRETE", "DISCRETEBINARY", "PIECEWISEBINARY", "PIECEWISECONSTANT", "PIECEWISECONTINUOUS", "NOTDEFINED", NULL};
    static TextValue IfcTimeSeriesScheduleTypeEnum_[] = {"ANNUAL", "MONTHLY", "WEEKLY", "DAILY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcTransformerTypeEnum_[] = {"CURRENT", "FREQUENCY", "VOLTAGE", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcTransitionCode_[] = {"DISCONTINUOUS", "CONTINUOUS", "CONTSAMEGRADIENT", "CONTSAMEGRADIENTSAMECURVATURE", NULL};
    static TextValue IfcTransportElementTypeEnum_[] = {"ELEVATOR", "ESCALATOR", "MOVINGWALKWAY", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcTrimmingPreference_[] = {"CARTESIAN", "PARAMETER", "UNSPECIFIED", NULL};
    static TextValue IfcTubeBundleTypeEnum_[] = {"FINNED", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcUnitaryEquipmentTypeEnum_[] = {"AIRHANDLER", "AIRCONDITIONINGUNIT", "SPLITSYSTEM", "ROOFTOPUNIT", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcUnitEnum_[] = {"ABSORBEDDOSEUNIT", "AMOUNTOFSUBSTANCEUNIT", "AREAUNIT", "DOSEEQUIVALENTUNIT", "ELECTRICCAPACITANCEUNIT", "ELECTRICCHARGEUNIT", "ELECTRICCONDUCTANCEUNIT", "ELECTRICCURRENTUNIT", "ELECTRICRESISTANCEUNIT", "ELECTRICVOLTAGEUNIT", "ENERGYUNIT", "FORCEUNIT", "FREQUENCYUNIT", "ILLUMINANCEUNIT", "INDUCTANCEUNIT", "LENGTHUNIT", "LUMINOUSFLUXUNIT", "LUMINOUSINTENSITYUNIT", "MAGNETICFLUXDENSITYUNIT", "MAGNETICFLUXUNIT", "MASSUNIT", "PLANEANGLEUNIT", "POWERUNIT", "PRESSUREUNIT", "RADIOACTIVITYUNIT", "SOLIDANGLEUNIT", "THERMODYNAMICTEMPERATUREUNIT", "TIMEUNIT", "VOLUMEUNIT", "USERDEFINED", NULL};
    static TextValue IfcValveTypeEnum_[] = {"AIRRELEASE", "ANTIVACUUM", "CHANGEOVER", "CHECK", "COMMISSIONING", "DIVERTING", "DRAWOFFCOCK", "DOUBLECHECK", "DOUBLEREGULATING", "FAUCET", "FLUSHING", "GASCOCK", "GASTAP", "ISOLATING", "MIXING", "PRESSUREREDUCING", "PRESSURERELIEF", "REGULATING", "SAFETYCUTOFF", "STEAMTRAP", "STOPCOCK", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcVibrationIsolatorTypeEnum_[] = {"COMPRESSION", "SPRING", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcWallTypeEnum_[] = {"STANDARD", "POLYGONAL", "SHEAR", "ELEMENTEDWALL", "PLUMBINGWALL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcWasteTerminalTypeEnum_[] = {"FLOORTRAP", "FLOORWASTE", "GULLYSUMP", "GULLYTRAP", "GREASEINTERCEPTOR", "OILINTERCEPTOR", "PETROLINTERCEPTOR", "ROOFDRAIN", "WASTEDISPOSALUNIT", "WASTETRAP", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcWindowPanelOperationEnum_[] = {"SIDEHUNGRIGHTHAND", "SIDEHUNGLEFTHAND", "TILTANDTURNRIGHTHAND", "TILTANDTURNLEFTHAND", "TOPHUNG", "BOTTOMHUNG", "PIVOTHORIZONTAL", "PIVOTVERTICAL", "SLIDINGHORIZONTAL", "SLIDINGVERTICAL", "REMOVABLECASEMENT", "FIXEDCASEMENT", "OTHEROPERATION", "NOTDEFINED", NULL};
    static TextValue IfcWindowPanelPositionEnum_[] = {"LEFT", "MIDDLE", "RIGHT", "BOTTOM", "TOP", "NOTDEFINED", NULL};
    static TextValue IfcWindowStyleConstructionEnum_[] = {"ALUMINIUM", "HIGH_GRADE_STEEL", "STEEL", "WOOD", "ALUMINIUM_WOOD", "PLASTIC", "OTHER_CONSTRUCTION", "NOTDEFINED", NULL};
    static TextValue IfcWindowStyleOperationEnum_[] = {"SINGLE_PANEL", "DOUBLE_PANEL_VERTICAL", "DOUBLE_PANEL_HORIZONTAL", "TRIPLE_PANEL_VERTICAL", "TRIPLE_PANEL_BOTTOM", "TRIPLE_PANEL_TOP", "TRIPLE_PANEL_LEFT", "TRIPLE_PANEL_RIGHT", "TRIPLE_PANEL_HORIZONTAL", "USERDEFINED", "NOTDEFINED", NULL};
    static TextValue IfcWorkControlTypeEnum_[] = {"ACTUAL", "BASELINE", "PLANNED", "USERDEFINED", "NOTDEFINED", NULL};

    //
    // Defined types
    // 
    typedef double IfcAbsorbedDoseMeasure;
    typedef double IfcAccelerationMeasure;
    typedef double IfcAmountOfSubstanceMeasure;
    typedef double IfcAngularVelocityMeasure;
    typedef double IfcAreaMeasure;
    typedef bool IfcBoolean;
    typedef TextValue IfcLabel;
    typedef TextValue IfcBoxAlignment;
    typedef std::list<double> IfcComplexNumber;
    template <typename TList> class IfcComplexNumberSerializer : public AggrSerializerSimple<TList, double, sdaiREAL> {};
    typedef std::list<IntValue> IfcCompoundPlaneAngleMeasure;
    template <typename TList> class IfcCompoundPlaneAngleMeasureSerializer : public AggrSerializerSimple<TList, IntValue, sdaiINTEGER> {};
    typedef double IfcContextDependentMeasure;
    typedef double IfcCountMeasure;
    typedef double IfcCurvatureMeasure;
    typedef IntValue IfcDayInMonthNumber;
    typedef IntValue IfcDaylightSavingHour;
    typedef TextValue IfcDescriptiveMeasure;
    typedef IntValue IfcDimensionCount;
    typedef double IfcDoseEquivalentMeasure;
    typedef double IfcDynamicViscosityMeasure;
    typedef double IfcElectricCapacitanceMeasure;
    typedef double IfcElectricChargeMeasure;
    typedef double IfcElectricConductanceMeasure;
    typedef double IfcElectricCurrentMeasure;
    typedef double IfcElectricResistanceMeasure;
    typedef double IfcElectricVoltageMeasure;
    typedef double IfcEnergyMeasure;
    typedef TextValue IfcFontStyle;
    typedef TextValue IfcFontVariant;
    typedef TextValue IfcFontWeight;
    typedef double IfcForceMeasure;
    typedef double IfcFrequencyMeasure;
    typedef TextValue IfcGloballyUniqueId;
    typedef double IfcHeatFluxDensityMeasure;
    typedef double IfcHeatingValueMeasure;
    typedef IntValue IfcHourInDay;
    typedef TextValue IfcIdentifier;
    typedef double IfcIlluminanceMeasure;
    typedef double IfcInductanceMeasure;
    typedef IntValue IfcInteger;
    typedef IntValue IfcIntegerCountRateMeasure;
    typedef double IfcIonConcentrationMeasure;
    typedef double IfcIsothermalMoistureCapacityMeasure;
    typedef double IfcKinematicViscosityMeasure;
    typedef double IfcLengthMeasure;
    typedef double IfcLinearForceMeasure;
    typedef double IfcLinearMomentMeasure;
    typedef double IfcLinearStiffnessMeasure;
    typedef double IfcLinearVelocityMeasure;
    typedef LOGICAL_VALUE IfcLogical;
    typedef double IfcLuminousFluxMeasure;
    typedef double IfcLuminousIntensityDistributionMeasure;
    typedef double IfcLuminousIntensityMeasure;
    typedef double IfcMagneticFluxDensityMeasure;
    typedef double IfcMagneticFluxMeasure;
    typedef double IfcMassDensityMeasure;
    typedef double IfcMassFlowRateMeasure;
    typedef double IfcMassMeasure;
    typedef double IfcMassPerLengthMeasure;
    typedef IntValue IfcMinuteInHour;
    typedef double IfcModulusOfElasticityMeasure;
    typedef double IfcModulusOfLinearSubgradeReactionMeasure;
    typedef double IfcModulusOfRotationalSubgradeReactionMeasure;
    typedef double IfcModulusOfSubgradeReactionMeasure;
    typedef double IfcMoistureDiffusivityMeasure;
    typedef double IfcMolecularWeightMeasure;
    typedef double IfcMomentOfInertiaMeasure;
    typedef double IfcMonetaryMeasure;
    typedef IntValue IfcMonthInYearNumber;
    typedef double IfcRatioMeasure;
    typedef double IfcNormalisedRatioMeasure;
    typedef double IfcNumericMeasure;
    typedef double IfcParameterValue;
    typedef double IfcPHMeasure;
    typedef double IfcPlanarForceMeasure;
    typedef double IfcPlaneAngleMeasure;
    typedef IfcLengthMeasure IfcPositiveLengthMeasure;
    typedef IfcPlaneAngleMeasure IfcPositivePlaneAngleMeasure;
    typedef IfcRatioMeasure IfcPositiveRatioMeasure;
    typedef double IfcPowerMeasure;
    typedef TextValue IfcPresentableText;
    typedef double IfcPressureMeasure;
    typedef double IfcRadioActivityMeasure;
    typedef double IfcReal;
    typedef double IfcRotationalFrequencyMeasure;
    typedef double IfcRotationalMassMeasure;
    typedef double IfcRotationalStiffnessMeasure;
    typedef double IfcSecondInMinute;
    typedef double IfcSectionalAreaIntegralMeasure;
    typedef double IfcSectionModulusMeasure;
    typedef double IfcShearModulusMeasure;
    typedef double IfcSolidAngleMeasure;
    typedef double IfcSoundPowerMeasure;
    typedef double IfcSoundPressureMeasure;
    typedef double IfcSpecificHeatCapacityMeasure;
    typedef double IfcSpecularExponent;
    typedef double IfcSpecularRoughness;
    typedef double IfcTemperatureGradientMeasure;
    typedef TextValue IfcText;
    typedef TextValue IfcTextAlignment;
    typedef TextValue IfcTextDecoration;
    typedef TextValue IfcTextFontName;
    typedef TextValue IfcTextTransformation;
    typedef double IfcThermalAdmittanceMeasure;
    typedef double IfcThermalConductivityMeasure;
    typedef double IfcThermalExpansionCoefficientMeasure;
    typedef double IfcThermalResistanceMeasure;
    typedef double IfcThermalTransmittanceMeasure;
    typedef double IfcThermodynamicTemperatureMeasure;
    typedef double IfcTimeMeasure;
    typedef IntValue IfcTimeStamp;
    typedef double IfcTorqueMeasure;
    typedef double IfcVaporPermeabilityMeasure;
    typedef double IfcVolumeMeasure;
    typedef double IfcVolumetricFlowRateMeasure;
    typedef double IfcWarpingConstantMeasure;
    typedef double IfcWarpingMomentMeasure;
    typedef IntValue IfcYearNumber;

    class IfcActorSelect : public Select
    {
    public:
        IfcActorSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcActorSelect(Select* outer) : Select(outer) {}

        bool is_IfcOrganization() { return IsADBEntity("IfcOrganization"); }
        IfcOrganization get_IfcOrganization();
        void put_IfcOrganization(IfcOrganization inst);

        bool is_IfcPerson() { return IsADBEntity("IfcPerson"); }
        IfcPerson get_IfcPerson();
        void put_IfcPerson(IfcPerson inst);

        bool is_IfcPersonAndOrganization() { return IsADBEntity("IfcPersonAndOrganization"); }
        IfcPersonAndOrganization get_IfcPersonAndOrganization();
        void put_IfcPersonAndOrganization(IfcPersonAndOrganization inst);
    };


    class IfcActorSelect_get : public Select
    {
    public:
        IfcActorSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcActorSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcOrganization() { return IsADBEntity("IfcOrganization"); }
        IfcOrganization get_IfcOrganization();
        bool is_IfcPerson() { return IsADBEntity("IfcPerson"); }
        IfcPerson get_IfcPerson();
        bool is_IfcPersonAndOrganization() { return IsADBEntity("IfcPersonAndOrganization"); }
        IfcPersonAndOrganization get_IfcPersonAndOrganization();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcActorSelect_put : public Select
    {
    public:
        IfcActorSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcActorSelect_put(Select* outer) : Select(outer) {}
        void put_IfcOrganization(IfcOrganization inst);
        void put_IfcPerson(IfcPerson inst);
        void put_IfcPersonAndOrganization(IfcPersonAndOrganization inst);
    };


    class IfcAppliedValueSelect : public Select
    {
    public:
        IfcAppliedValueSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcAppliedValueSelect(Select* outer) : Select(outer) {}

        bool is_IfcRatioMeasure() { return IsADBType("IFCRATIOMEASURE"); }
        Nullable<IfcRatioMeasure> get_IfcRatioMeasure() { return getSimpleValue<IfcRatioMeasure>("IFCRATIOMEASURE", sdaiREAL); }
        void put_IfcRatioMeasure(IfcRatioMeasure value) { putSimpleValue("IFCRATIOMEASURE", sdaiREAL, value); }

        bool is_IfcMeasureWithUnit() { return IsADBEntity("IfcMeasureWithUnit"); }
        IfcMeasureWithUnit get_IfcMeasureWithUnit();
        void put_IfcMeasureWithUnit(IfcMeasureWithUnit inst);

        bool is_IfcMonetaryMeasure() { return IsADBType("IFCMONETARYMEASURE"); }
        Nullable<IfcMonetaryMeasure> get_IfcMonetaryMeasure() { return getSimpleValue<IfcMonetaryMeasure>("IFCMONETARYMEASURE", sdaiREAL); }
        void put_IfcMonetaryMeasure(IfcMonetaryMeasure value) { putSimpleValue("IFCMONETARYMEASURE", sdaiREAL, value); }
    };


    class IfcAppliedValueSelect_get : public Select
    {
    public:
        IfcAppliedValueSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcAppliedValueSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcRatioMeasure() { return IsADBType("IFCRATIOMEASURE"); }
        Nullable<IfcRatioMeasure> get_IfcRatioMeasure() { return getSimpleValue<IfcRatioMeasure>("IFCRATIOMEASURE", sdaiREAL); }
        bool is_IfcMeasureWithUnit() { return IsADBEntity("IfcMeasureWithUnit"); }
        IfcMeasureWithUnit get_IfcMeasureWithUnit();
        bool is_IfcMonetaryMeasure() { return IsADBType("IFCMONETARYMEASURE"); }
        Nullable<IfcMonetaryMeasure> get_IfcMonetaryMeasure() { return getSimpleValue<IfcMonetaryMeasure>("IFCMONETARYMEASURE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcAppliedValueSelect_put : public Select
    {
    public:
        IfcAppliedValueSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcAppliedValueSelect_put(Select* outer) : Select(outer) {}
        void put_IfcRatioMeasure(IfcRatioMeasure value) { putSimpleValue("IFCRATIOMEASURE", sdaiREAL, value); }
        void put_IfcMeasureWithUnit(IfcMeasureWithUnit inst);
        void put_IfcMonetaryMeasure(IfcMonetaryMeasure value) { putSimpleValue("IFCMONETARYMEASURE", sdaiREAL, value); }
    };


    class IfcAxis2Placement : public Select
    {
    public:
        IfcAxis2Placement(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcAxis2Placement(Select* outer) : Select(outer) {}

        bool is_IfcAxis2Placement2D() { return IsADBEntity("IfcAxis2Placement2D"); }
        IfcAxis2Placement2D get_IfcAxis2Placement2D();
        void put_IfcAxis2Placement2D(IfcAxis2Placement2D inst);

        bool is_IfcAxis2Placement3D() { return IsADBEntity("IfcAxis2Placement3D"); }
        IfcAxis2Placement3D get_IfcAxis2Placement3D();
        void put_IfcAxis2Placement3D(IfcAxis2Placement3D inst);
    };


    class IfcAxis2Placement_get : public Select
    {
    public:
        IfcAxis2Placement_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcAxis2Placement_get(Select* outer) : Select(outer) {}
        bool is_IfcAxis2Placement2D() { return IsADBEntity("IfcAxis2Placement2D"); }
        IfcAxis2Placement2D get_IfcAxis2Placement2D();
        bool is_IfcAxis2Placement3D() { return IsADBEntity("IfcAxis2Placement3D"); }
        IfcAxis2Placement3D get_IfcAxis2Placement3D();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcAxis2Placement_put : public Select
    {
    public:
        IfcAxis2Placement_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcAxis2Placement_put(Select* outer) : Select(outer) {}
        void put_IfcAxis2Placement2D(IfcAxis2Placement2D inst);
        void put_IfcAxis2Placement3D(IfcAxis2Placement3D inst);
    };


    class IfcBooleanOperand : public Select
    {
    public:
        IfcBooleanOperand(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcBooleanOperand(Select* outer) : Select(outer) {}

        bool is_IfcSolidModel() { return IsADBEntity("IfcSolidModel"); }
        IfcSolidModel get_IfcSolidModel();
        void put_IfcSolidModel(IfcSolidModel inst);

        bool is_IfcHalfSpaceSolid() { return IsADBEntity("IfcHalfSpaceSolid"); }
        IfcHalfSpaceSolid get_IfcHalfSpaceSolid();
        void put_IfcHalfSpaceSolid(IfcHalfSpaceSolid inst);

        bool is_IfcBooleanResult() { return IsADBEntity("IfcBooleanResult"); }
        IfcBooleanResult get_IfcBooleanResult();
        void put_IfcBooleanResult(IfcBooleanResult inst);

        bool is_IfcCsgPrimitive3D() { return IsADBEntity("IfcCsgPrimitive3D"); }
        IfcCsgPrimitive3D get_IfcCsgPrimitive3D();
        void put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst);
    };


    class IfcBooleanOperand_get : public Select
    {
    public:
        IfcBooleanOperand_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcBooleanOperand_get(Select* outer) : Select(outer) {}
        bool is_IfcSolidModel() { return IsADBEntity("IfcSolidModel"); }
        IfcSolidModel get_IfcSolidModel();
        bool is_IfcHalfSpaceSolid() { return IsADBEntity("IfcHalfSpaceSolid"); }
        IfcHalfSpaceSolid get_IfcHalfSpaceSolid();
        bool is_IfcBooleanResult() { return IsADBEntity("IfcBooleanResult"); }
        IfcBooleanResult get_IfcBooleanResult();
        bool is_IfcCsgPrimitive3D() { return IsADBEntity("IfcCsgPrimitive3D"); }
        IfcCsgPrimitive3D get_IfcCsgPrimitive3D();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcBooleanOperand_put : public Select
    {
    public:
        IfcBooleanOperand_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcBooleanOperand_put(Select* outer) : Select(outer) {}
        void put_IfcSolidModel(IfcSolidModel inst);
        void put_IfcHalfSpaceSolid(IfcHalfSpaceSolid inst);
        void put_IfcBooleanResult(IfcBooleanResult inst);
        void put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst);
    };


    class IfcCharacterStyleSelect : public Select
    {
    public:
        IfcCharacterStyleSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCharacterStyleSelect(Select* outer) : Select(outer) {}

        bool is_IfcTextStyleForDefinedFont() { return IsADBEntity("IfcTextStyleForDefinedFont"); }
        IfcTextStyleForDefinedFont get_IfcTextStyleForDefinedFont();
        void put_IfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont inst);
    };


    class IfcCharacterStyleSelect_get : public Select
    {
    public:
        IfcCharacterStyleSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCharacterStyleSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcTextStyleForDefinedFont() { return IsADBEntity("IfcTextStyleForDefinedFont"); }
        IfcTextStyleForDefinedFont get_IfcTextStyleForDefinedFont();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcCharacterStyleSelect_put : public Select
    {
    public:
        IfcCharacterStyleSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCharacterStyleSelect_put(Select* outer) : Select(outer) {}
        void put_IfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont inst);
    };


    class IfcClassificationNotationSelect : public Select
    {
    public:
        IfcClassificationNotationSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcClassificationNotationSelect(Select* outer) : Select(outer) {}

        bool is_IfcClassificationNotation() { return IsADBEntity("IfcClassificationNotation"); }
        IfcClassificationNotation get_IfcClassificationNotation();
        void put_IfcClassificationNotation(IfcClassificationNotation inst);

        bool is_IfcClassificationReference() { return IsADBEntity("IfcClassificationReference"); }
        IfcClassificationReference get_IfcClassificationReference();
        void put_IfcClassificationReference(IfcClassificationReference inst);
    };


    class IfcClassificationNotationSelect_get : public Select
    {
    public:
        IfcClassificationNotationSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcClassificationNotationSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcClassificationNotation() { return IsADBEntity("IfcClassificationNotation"); }
        IfcClassificationNotation get_IfcClassificationNotation();
        bool is_IfcClassificationReference() { return IsADBEntity("IfcClassificationReference"); }
        IfcClassificationReference get_IfcClassificationReference();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcClassificationNotationSelect_put : public Select
    {
    public:
        IfcClassificationNotationSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcClassificationNotationSelect_put(Select* outer) : Select(outer) {}
        void put_IfcClassificationNotation(IfcClassificationNotation inst);
        void put_IfcClassificationReference(IfcClassificationReference inst);
    };


    class IfcColour : public Select
    {
    public:
        IfcColour(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcColour(Select* outer) : Select(outer) {}

        bool is_IfcColourSpecification() { return IsADBEntity("IfcColourSpecification"); }
        IfcColourSpecification get_IfcColourSpecification();
        void put_IfcColourSpecification(IfcColourSpecification inst);

        bool is_IfcPreDefinedColour() { return IsADBEntity("IfcPreDefinedColour"); }
        IfcPreDefinedColour get_IfcPreDefinedColour();
        void put_IfcPreDefinedColour(IfcPreDefinedColour inst);
    };


    class IfcColour_get : public Select
    {
    public:
        IfcColour_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcColour_get(Select* outer) : Select(outer) {}
        bool is_IfcColourSpecification() { return IsADBEntity("IfcColourSpecification"); }
        IfcColourSpecification get_IfcColourSpecification();
        bool is_IfcPreDefinedColour() { return IsADBEntity("IfcPreDefinedColour"); }
        IfcPreDefinedColour get_IfcPreDefinedColour();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcColour_put : public Select
    {
    public:
        IfcColour_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcColour_put(Select* outer) : Select(outer) {}
        void put_IfcColourSpecification(IfcColourSpecification inst);
        void put_IfcPreDefinedColour(IfcPreDefinedColour inst);
    };


    class IfcColourOrFactor : public Select
    {
    public:
        IfcColourOrFactor(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcColourOrFactor(Select* outer) : Select(outer) {}

        bool is_IfcColourRgb() { return IsADBEntity("IfcColourRgb"); }
        IfcColourRgb get_IfcColourRgb();
        void put_IfcColourRgb(IfcColourRgb inst);

        bool is_IfcNormalisedRatioMeasure() { return IsADBType("IFCNORMALISEDRATIOMEASURE"); }
        Nullable<IfcNormalisedRatioMeasure> get_IfcNormalisedRatioMeasure() { return getSimpleValue<IfcNormalisedRatioMeasure>("IFCNORMALISEDRATIOMEASURE", sdaiREAL); }
        void put_IfcNormalisedRatioMeasure(IfcNormalisedRatioMeasure value) { putSimpleValue("IFCNORMALISEDRATIOMEASURE", sdaiREAL, value); }
    };


    class IfcColourOrFactor_get : public Select
    {
    public:
        IfcColourOrFactor_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcColourOrFactor_get(Select* outer) : Select(outer) {}
        bool is_IfcColourRgb() { return IsADBEntity("IfcColourRgb"); }
        IfcColourRgb get_IfcColourRgb();
        bool is_IfcNormalisedRatioMeasure() { return IsADBType("IFCNORMALISEDRATIOMEASURE"); }
        Nullable<IfcNormalisedRatioMeasure> get_IfcNormalisedRatioMeasure() { return getSimpleValue<IfcNormalisedRatioMeasure>("IFCNORMALISEDRATIOMEASURE", sdaiREAL); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class IfcColourOrFactor_put : public Select
    {
    public:
        IfcColourOrFactor_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcColourOrFactor_put(Select* outer) : Select(outer) {}
        void put_IfcColourRgb(IfcColourRgb inst);
        void put_IfcNormalisedRatioMeasure(IfcNormalisedRatioMeasure value) { putSimpleValue("IFCNORMALISEDRATIOMEASURE", sdaiREAL, value); }
    };


    class IfcConditionCriterionSelect : public Select
    {
    public:
        IfcConditionCriterionSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcConditionCriterionSelect(Select* outer) : Select(outer) {}

        bool is_IfcLabel() { return IsADBType("IFCLABEL"); }
        IfcLabel get_IfcLabel() { return getTextValue("IFCLABEL", sdaiSTRING); }
        void put_IfcLabel(IfcLabel value) { putTextValue("IFCLABEL", sdaiSTRING, value); }

        bool is_IfcMeasureWithUnit() { return IsADBEntity("IfcMeasureWithUnit"); }
        IfcMeasureWithUnit get_IfcMeasureWithUnit();
        void put_IfcMeasureWithUnit(IfcMeasureWithUnit inst);
    };


    class IfcConditionCriterionSelect_get : public Select
    {
    public:
        IfcConditionCriterionSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcConditionCriterionSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcLabel() { return IsADBType("IFCLABEL"); }
        IfcLabel get_IfcLabel() { return getTextValue("IFCLABEL", sdaiSTRING); }
        bool is_IfcMeasureWithUnit() { return IsADBEntity("IfcMeasureWithUnit"); }
        IfcMeasureWithUnit get_IfcMeasureWithUnit();

        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcConditionCriterionSelect_put : public Select
    {
    public:
        IfcConditionCriterionSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcConditionCriterionSelect_put(Select* outer) : Select(outer) {}
        void put_IfcLabel(IfcLabel value) { putTextValue("IFCLABEL", sdaiSTRING, value); }
        void put_IfcMeasureWithUnit(IfcMeasureWithUnit inst);
    };


    class IfcCsgSelect : public Select
    {
    public:
        IfcCsgSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCsgSelect(Select* outer) : Select(outer) {}

        bool is_IfcBooleanResult() { return IsADBEntity("IfcBooleanResult"); }
        IfcBooleanResult get_IfcBooleanResult();
        void put_IfcBooleanResult(IfcBooleanResult inst);

        bool is_IfcCsgPrimitive3D() { return IsADBEntity("IfcCsgPrimitive3D"); }
        IfcCsgPrimitive3D get_IfcCsgPrimitive3D();
        void put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst);
    };


    class IfcCsgSelect_get : public Select
    {
    public:
        IfcCsgSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCsgSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcBooleanResult() { return IsADBEntity("IfcBooleanResult"); }
        IfcBooleanResult get_IfcBooleanResult();
        bool is_IfcCsgPrimitive3D() { return IsADBEntity("IfcCsgPrimitive3D"); }
        IfcCsgPrimitive3D get_IfcCsgPrimitive3D();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcCsgSelect_put : public Select
    {
    public:
        IfcCsgSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCsgSelect_put(Select* outer) : Select(outer) {}
        void put_IfcBooleanResult(IfcBooleanResult inst);
        void put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst);
    };


    class IfcCurveStyleFontSelect : public Select
    {
    public:
        IfcCurveStyleFontSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveStyleFontSelect(Select* outer) : Select(outer) {}

        bool is_IfcPreDefinedCurveFont() { return IsADBEntity("IfcPreDefinedCurveFont"); }
        IfcPreDefinedCurveFont get_IfcPreDefinedCurveFont();
        void put_IfcPreDefinedCurveFont(IfcPreDefinedCurveFont inst);

        bool is_IfcCurveStyleFont() { return IsADBEntity("IfcCurveStyleFont"); }
        IfcCurveStyleFont get_IfcCurveStyleFont();
        void put_IfcCurveStyleFont(IfcCurveStyleFont inst);
    };


    class IfcCurveStyleFontSelect_get : public Select
    {
    public:
        IfcCurveStyleFontSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveStyleFontSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcPreDefinedCurveFont() { return IsADBEntity("IfcPreDefinedCurveFont"); }
        IfcPreDefinedCurveFont get_IfcPreDefinedCurveFont();
        bool is_IfcCurveStyleFont() { return IsADBEntity("IfcCurveStyleFont"); }
        IfcCurveStyleFont get_IfcCurveStyleFont();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcCurveStyleFontSelect_put : public Select
    {
    public:
        IfcCurveStyleFontSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveStyleFontSelect_put(Select* outer) : Select(outer) {}
        void put_IfcPreDefinedCurveFont(IfcPreDefinedCurveFont inst);
        void put_IfcCurveStyleFont(IfcCurveStyleFont inst);
    };


    class IfcCurveFontOrScaledCurveFontSelect : public Select
    {
    public:
        IfcCurveFontOrScaledCurveFontSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveFontOrScaledCurveFontSelect(Select* outer) : Select(outer) {}

        IfcCurveStyleFontSelect _IfcCurveStyleFontSelect() { return IfcCurveStyleFontSelect(this); }

        bool is_IfcCurveStyleFontAndScaling() { return IsADBEntity("IfcCurveStyleFontAndScaling"); }
        IfcCurveStyleFontAndScaling get_IfcCurveStyleFontAndScaling();
        void put_IfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling inst);
    };


    class IfcCurveFontOrScaledCurveFontSelect_get : public Select
    {
    public:
        IfcCurveFontOrScaledCurveFontSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveFontOrScaledCurveFontSelect_get(Select* outer) : Select(outer) {}
        IfcCurveStyleFontSelect_get get_IfcCurveStyleFontSelect() { return IfcCurveStyleFontSelect_get(this); }
        bool is_IfcCurveStyleFontAndScaling() { return IsADBEntity("IfcCurveStyleFontAndScaling"); }
        IfcCurveStyleFontAndScaling get_IfcCurveStyleFontAndScaling();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcCurveFontOrScaledCurveFontSelect_put : public Select
    {
    public:
        IfcCurveFontOrScaledCurveFontSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveFontOrScaledCurveFontSelect_put(Select* outer) : Select(outer) {}
        IfcCurveStyleFontSelect_put put_IfcCurveStyleFontSelect() { return IfcCurveStyleFontSelect_put(this); }
        void put_IfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling inst);
    };


    class IfcCurveOrEdgeCurve : public Select
    {
    public:
        IfcCurveOrEdgeCurve(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveOrEdgeCurve(Select* outer) : Select(outer) {}

        bool is_IfcBoundedCurve() { return IsADBEntity("IfcBoundedCurve"); }
        IfcBoundedCurve get_IfcBoundedCurve();
        void put_IfcBoundedCurve(IfcBoundedCurve inst);

        bool is_IfcEdgeCurve() { return IsADBEntity("IfcEdgeCurve"); }
        IfcEdgeCurve get_IfcEdgeCurve();
        void put_IfcEdgeCurve(IfcEdgeCurve inst);
    };


    class IfcCurveOrEdgeCurve_get : public Select
    {
    public:
        IfcCurveOrEdgeCurve_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveOrEdgeCurve_get(Select* outer) : Select(outer) {}
        bool is_IfcBoundedCurve() { return IsADBEntity("IfcBoundedCurve"); }
        IfcBoundedCurve get_IfcBoundedCurve();
        bool is_IfcEdgeCurve() { return IsADBEntity("IfcEdgeCurve"); }
        IfcEdgeCurve get_IfcEdgeCurve();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcCurveOrEdgeCurve_put : public Select
    {
    public:
        IfcCurveOrEdgeCurve_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcCurveOrEdgeCurve_put(Select* outer) : Select(outer) {}
        void put_IfcBoundedCurve(IfcBoundedCurve inst);
        void put_IfcEdgeCurve(IfcEdgeCurve inst);
    };


    class IfcDateTimeSelect : public Select
    {
    public:
        IfcDateTimeSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDateTimeSelect(Select* outer) : Select(outer) {}

        bool is_IfcCalendarDate() { return IsADBEntity("IfcCalendarDate"); }
        IfcCalendarDate get_IfcCalendarDate();
        void put_IfcCalendarDate(IfcCalendarDate inst);

        bool is_IfcLocalTime() { return IsADBEntity("IfcLocalTime"); }
        IfcLocalTime get_IfcLocalTime();
        void put_IfcLocalTime(IfcLocalTime inst);

        bool is_IfcDateAndTime() { return IsADBEntity("IfcDateAndTime"); }
        IfcDateAndTime get_IfcDateAndTime();
        void put_IfcDateAndTime(IfcDateAndTime inst);
    };


    class IfcDateTimeSelect_get : public Select
    {
    public:
        IfcDateTimeSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDateTimeSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcCalendarDate() { return IsADBEntity("IfcCalendarDate"); }
        IfcCalendarDate get_IfcCalendarDate();
        bool is_IfcLocalTime() { return IsADBEntity("IfcLocalTime"); }
        IfcLocalTime get_IfcLocalTime();
        bool is_IfcDateAndTime() { return IsADBEntity("IfcDateAndTime"); }
        IfcDateAndTime get_IfcDateAndTime();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcDateTimeSelect_put : public Select
    {
    public:
        IfcDateTimeSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDateTimeSelect_put(Select* outer) : Select(outer) {}
        void put_IfcCalendarDate(IfcCalendarDate inst);
        void put_IfcLocalTime(IfcLocalTime inst);
        void put_IfcDateAndTime(IfcDateAndTime inst);
    };


    class IfcDefinedSymbolSelect : public Select
    {
    public:
        IfcDefinedSymbolSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDefinedSymbolSelect(Select* outer) : Select(outer) {}

        bool is_IfcPreDefinedSymbol() { return IsADBEntity("IfcPreDefinedSymbol"); }
        IfcPreDefinedSymbol get_IfcPreDefinedSymbol();
        void put_IfcPreDefinedSymbol(IfcPreDefinedSymbol inst);

        bool is_IfcExternallyDefinedSymbol() { return IsADBEntity("IfcExternallyDefinedSymbol"); }
        IfcExternallyDefinedSymbol get_IfcExternallyDefinedSymbol();
        void put_IfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol inst);
    };


    class IfcDefinedSymbolSelect_get : public Select
    {
    public:
        IfcDefinedSymbolSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDefinedSymbolSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcPreDefinedSymbol() { return IsADBEntity("IfcPreDefinedSymbol"); }
        IfcPreDefinedSymbol get_IfcPreDefinedSymbol();
        bool is_IfcExternallyDefinedSymbol() { return IsADBEntity("IfcExternallyDefinedSymbol"); }
        IfcExternallyDefinedSymbol get_IfcExternallyDefinedSymbol();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcDefinedSymbolSelect_put : public Select
    {
    public:
        IfcDefinedSymbolSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDefinedSymbolSelect_put(Select* outer) : Select(outer) {}
        void put_IfcPreDefinedSymbol(IfcPreDefinedSymbol inst);
        void put_IfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol inst);
    };


    class IfcDerivedMeasureValue : public Select
    {
    public:
        IfcDerivedMeasureValue(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDerivedMeasureValue(Select* outer) : Select(outer) {}

        bool is_IfcVolumetricFlowRateMeasure() { return IsADBType("IFCVOLUMETRICFLOWRATEMEASURE"); }
        Nullable<IfcVolumetricFlowRateMeasure> get_IfcVolumetricFlowRateMeasure() { return getSimpleValue<IfcVolumetricFlowRateMeasure>("IFCVOLUMETRICFLOWRATEMEASURE", sdaiREAL); }
        void put_IfcVolumetricFlowRateMeasure(IfcVolumetricFlowRateMeasure value) { putSimpleValue("IFCVOLUMETRICFLOWRATEMEASURE", sdaiREAL, value); }

        bool is_IfcTimeStamp() { return IsADBType("IFCTIMESTAMP"); }
        Nullable<IfcTimeStamp> get_IfcTimeStamp() { return getSimpleValue<IfcTimeStamp>("IFCTIMESTAMP", sdaiINTEGER); }
        void put_IfcTimeStamp(IfcTimeStamp value) { putSimpleValue("IFCTIMESTAMP", sdaiINTEGER, value); }

        bool is_IfcThermalTransmittanceMeasure() { return IsADBType("IFCTHERMALTRANSMITTANCEMEASURE"); }
        Nullable<IfcThermalTransmittanceMeasure> get_IfcThermalTransmittanceMeasure() { return getSimpleValue<IfcThermalTransmittanceMeasure>("IFCTHERMALTRANSMITTANCEMEASURE", sdaiREAL); }
        void put_IfcThermalTransmittanceMeasure(IfcThermalTransmittanceMeasure value) { putSimpleValue("IFCTHERMALTRANSMITTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcThermalResistanceMeasure() { return IsADBType("IFCTHERMALRESISTANCEMEASURE"); }
        Nullable<IfcThermalResistanceMeasure> get_IfcThermalResistanceMeasure() { return getSimpleValue<IfcThermalResistanceMeasure>("IFCTHERMALRESISTANCEMEASURE", sdaiREAL); }
        void put_IfcThermalResistanceMeasure(IfcThermalResistanceMeasure value) { putSimpleValue("IFCTHERMALRESISTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcThermalAdmittanceMeasure() { return IsADBType("IFCTHERMALADMITTANCEMEASURE"); }
        Nullable<IfcThermalAdmittanceMeasure> get_IfcThermalAdmittanceMeasure() { return getSimpleValue<IfcThermalAdmittanceMeasure>("IFCTHERMALADMITTANCEMEASURE", sdaiREAL); }
        void put_IfcThermalAdmittanceMeasure(IfcThermalAdmittanceMeasure value) { putSimpleValue("IFCTHERMALADMITTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcPressureMeasure() { return IsADBType("IFCPRESSUREMEASURE"); }
        Nullable<IfcPressureMeasure> get_IfcPressureMeasure() { return getSimpleValue<IfcPressureMeasure>("IFCPRESSUREMEASURE", sdaiREAL); }
        void put_IfcPressureMeasure(IfcPressureMeasure value) { putSimpleValue("IFCPRESSUREMEASURE", sdaiREAL, value); }

        bool is_IfcPowerMeasure() { return IsADBType("IFCPOWERMEASURE"); }
        Nullable<IfcPowerMeasure> get_IfcPowerMeasure() { return getSimpleValue<IfcPowerMeasure>("IFCPOWERMEASURE", sdaiREAL); }
        void put_IfcPowerMeasure(IfcPowerMeasure value) { putSimpleValue("IFCPOWERMEASURE", sdaiREAL, value); }

        bool is_IfcMassFlowRateMeasure() { return IsADBType("IFCMASSFLOWRATEMEASURE"); }
        Nullable<IfcMassFlowRateMeasure> get_IfcMassFlowRateMeasure() { return getSimpleValue<IfcMassFlowRateMeasure>("IFCMASSFLOWRATEMEASURE", sdaiREAL); }
        void put_IfcMassFlowRateMeasure(IfcMassFlowRateMeasure value) { putSimpleValue("IFCMASSFLOWRATEMEASURE", sdaiREAL, value); }

        bool is_IfcMassDensityMeasure() { return IsADBType("IFCMASSDENSITYMEASURE"); }
        Nullable<IfcMassDensityMeasure> get_IfcMassDensityMeasure() { return getSimpleValue<IfcMassDensityMeasure>("IFCMASSDENSITYMEASURE", sdaiREAL); }
        void put_IfcMassDensityMeasure(IfcMassDensityMeasure value) { putSimpleValue("IFCMASSDENSITYMEASURE", sdaiREAL, value); }

        bool is_IfcLinearVelocityMeasure() { return IsADBType("IFCLINEARVELOCITYMEASURE"); }
        Nullable<IfcLinearVelocityMeasure> get_IfcLinearVelocityMeasure() { return getSimpleValue<IfcLinearVelocityMeasure>("IFCLINEARVELOCITYMEASURE", sdaiREAL); }
        void put_IfcLinearVelocityMeasure(IfcLinearVelocityMeasure value) { putSimpleValue("IFCLINEARVELOCITYMEASURE", sdaiREAL, value); }

        bool is_IfcKinematicViscosityMeasure() { return IsADBType("IFCKINEMATICVISCOSITYMEASURE"); }
        Nullable<IfcKinematicViscosityMeasure> get_IfcKinematicViscosityMeasure() { return getSimpleValue<IfcKinematicViscosityMeasure>("IFCKINEMATICVISCOSITYMEASURE", sdaiREAL); }
        void put_IfcKinematicViscosityMeasure(IfcKinematicViscosityMeasure value) { putSimpleValue("IFCKINEMATICVISCOSITYMEASURE", sdaiREAL, value); }

        bool is_IfcIntegerCountRateMeasure() { return IsADBType("IFCINTEGERCOUNTRATEMEASURE"); }
        Nullable<IfcIntegerCountRateMeasure> get_IfcIntegerCountRateMeasure() { return getSimpleValue<IfcIntegerCountRateMeasure>("IFCINTEGERCOUNTRATEMEASURE", sdaiINTEGER); }
        void put_IfcIntegerCountRateMeasure(IfcIntegerCountRateMeasure value) { putSimpleValue("IFCINTEGERCOUNTRATEMEASURE", sdaiINTEGER, value); }

        bool is_IfcHeatFluxDensityMeasure() { return IsADBType("IFCHEATFLUXDENSITYMEASURE"); }
        Nullable<IfcHeatFluxDensityMeasure> get_IfcHeatFluxDensityMeasure() { return getSimpleValue<IfcHeatFluxDensityMeasure>("IFCHEATFLUXDENSITYMEASURE", sdaiREAL); }
        void put_IfcHeatFluxDensityMeasure(IfcHeatFluxDensityMeasure value) { putSimpleValue("IFCHEATFLUXDENSITYMEASURE", sdaiREAL, value); }

        bool is_IfcFrequencyMeasure() { return IsADBType("IFCFREQUENCYMEASURE"); }
        Nullable<IfcFrequencyMeasure> get_IfcFrequencyMeasure() { return getSimpleValue<IfcFrequencyMeasure>("IFCFREQUENCYMEASURE", sdaiREAL); }
        void put_IfcFrequencyMeasure(IfcFrequencyMeasure value) { putSimpleValue("IFCFREQUENCYMEASURE", sdaiREAL, value); }

        bool is_IfcEnergyMeasure() { return IsADBType("IFCENERGYMEASURE"); }
        Nullable<IfcEnergyMeasure> get_IfcEnergyMeasure() { return getSimpleValue<IfcEnergyMeasure>("IFCENERGYMEASURE", sdaiREAL); }
        void put_IfcEnergyMeasure(IfcEnergyMeasure value) { putSimpleValue("IFCENERGYMEASURE", sdaiREAL, value); }

        bool is_IfcElectricVoltageMeasure() { return IsADBType("IFCELECTRICVOLTAGEMEASURE"); }
        Nullable<IfcElectricVoltageMeasure> get_IfcElectricVoltageMeasure() { return getSimpleValue<IfcElectricVoltageMeasure>("IFCELECTRICVOLTAGEMEASURE", sdaiREAL); }
        void put_IfcElectricVoltageMeasure(IfcElectricVoltageMeasure value) { putSimpleValue("IFCELECTRICVOLTAGEMEASURE", sdaiREAL, value); }

        bool is_IfcDynamicViscosityMeasure() { return IsADBType("IFCDYNAMICVISCOSITYMEASURE"); }
        Nullable<IfcDynamicViscosityMeasure> get_IfcDynamicViscosityMeasure() { return getSimpleValue<IfcDynamicViscosityMeasure>("IFCDYNAMICVISCOSITYMEASURE", sdaiREAL); }
        void put_IfcDynamicViscosityMeasure(IfcDynamicViscosityMeasure value) { putSimpleValue("IFCDYNAMICVISCOSITYMEASURE", sdaiREAL, value); }

        bool is_IfcCompoundPlaneAngleMeasure() { return IsADBType("IFCCOMPOUNDPLANEANGLEMEASURE"); }

        //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void get_IfcCompoundPlaneAngleMeasure(TList& lst) { SdaiAggr aggr = getAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE"); IfcCompoundPlaneAngleMeasureSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void put_IfcCompoundPlaneAngleMeasure(TList& lst) { IfcCompoundPlaneAngleMeasureSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE", aggr); }

                //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_IfcCompoundPlaneAngleMeasure(TArrayElem arr[], size_t n) { IfcCompoundPlaneAngleMeasure lst; ArrayToList(arr, n, lst); put_IfcCompoundPlaneAngleMeasure(lst); }

        bool is_IfcAngularVelocityMeasure() { return IsADBType("IFCANGULARVELOCITYMEASURE"); }
        Nullable<IfcAngularVelocityMeasure> get_IfcAngularVelocityMeasure() { return getSimpleValue<IfcAngularVelocityMeasure>("IFCANGULARVELOCITYMEASURE", sdaiREAL); }
        void put_IfcAngularVelocityMeasure(IfcAngularVelocityMeasure value) { putSimpleValue("IFCANGULARVELOCITYMEASURE", sdaiREAL, value); }

        bool is_IfcThermalConductivityMeasure() { return IsADBType("IFCTHERMALCONDUCTIVITYMEASURE"); }
        Nullable<IfcThermalConductivityMeasure> get_IfcThermalConductivityMeasure() { return getSimpleValue<IfcThermalConductivityMeasure>("IFCTHERMALCONDUCTIVITYMEASURE", sdaiREAL); }
        void put_IfcThermalConductivityMeasure(IfcThermalConductivityMeasure value) { putSimpleValue("IFCTHERMALCONDUCTIVITYMEASURE", sdaiREAL, value); }

        bool is_IfcMolecularWeightMeasure() { return IsADBType("IFCMOLECULARWEIGHTMEASURE"); }
        Nullable<IfcMolecularWeightMeasure> get_IfcMolecularWeightMeasure() { return getSimpleValue<IfcMolecularWeightMeasure>("IFCMOLECULARWEIGHTMEASURE", sdaiREAL); }
        void put_IfcMolecularWeightMeasure(IfcMolecularWeightMeasure value) { putSimpleValue("IFCMOLECULARWEIGHTMEASURE", sdaiREAL, value); }

        bool is_IfcVaporPermeabilityMeasure() { return IsADBType("IFCVAPORPERMEABILITYMEASURE"); }
        Nullable<IfcVaporPermeabilityMeasure> get_IfcVaporPermeabilityMeasure() { return getSimpleValue<IfcVaporPermeabilityMeasure>("IFCVAPORPERMEABILITYMEASURE", sdaiREAL); }
        void put_IfcVaporPermeabilityMeasure(IfcVaporPermeabilityMeasure value) { putSimpleValue("IFCVAPORPERMEABILITYMEASURE", sdaiREAL, value); }

        bool is_IfcMoistureDiffusivityMeasure() { return IsADBType("IFCMOISTUREDIFFUSIVITYMEASURE"); }
        Nullable<IfcMoistureDiffusivityMeasure> get_IfcMoistureDiffusivityMeasure() { return getSimpleValue<IfcMoistureDiffusivityMeasure>("IFCMOISTUREDIFFUSIVITYMEASURE", sdaiREAL); }
        void put_IfcMoistureDiffusivityMeasure(IfcMoistureDiffusivityMeasure value) { putSimpleValue("IFCMOISTUREDIFFUSIVITYMEASURE", sdaiREAL, value); }

        bool is_IfcIsothermalMoistureCapacityMeasure() { return IsADBType("IFCISOTHERMALMOISTURECAPACITYMEASURE"); }
        Nullable<IfcIsothermalMoistureCapacityMeasure> get_IfcIsothermalMoistureCapacityMeasure() { return getSimpleValue<IfcIsothermalMoistureCapacityMeasure>("IFCISOTHERMALMOISTURECAPACITYMEASURE", sdaiREAL); }
        void put_IfcIsothermalMoistureCapacityMeasure(IfcIsothermalMoistureCapacityMeasure value) { putSimpleValue("IFCISOTHERMALMOISTURECAPACITYMEASURE", sdaiREAL, value); }

        bool is_IfcSpecificHeatCapacityMeasure() { return IsADBType("IFCSPECIFICHEATCAPACITYMEASURE"); }
        Nullable<IfcSpecificHeatCapacityMeasure> get_IfcSpecificHeatCapacityMeasure() { return getSimpleValue<IfcSpecificHeatCapacityMeasure>("IFCSPECIFICHEATCAPACITYMEASURE", sdaiREAL); }
        void put_IfcSpecificHeatCapacityMeasure(IfcSpecificHeatCapacityMeasure value) { putSimpleValue("IFCSPECIFICHEATCAPACITYMEASURE", sdaiREAL, value); }

        bool is_IfcMonetaryMeasure() { return IsADBType("IFCMONETARYMEASURE"); }
        Nullable<IfcMonetaryMeasure> get_IfcMonetaryMeasure() { return getSimpleValue<IfcMonetaryMeasure>("IFCMONETARYMEASURE", sdaiREAL); }
        void put_IfcMonetaryMeasure(IfcMonetaryMeasure value) { putSimpleValue("IFCMONETARYMEASURE", sdaiREAL, value); }

        bool is_IfcMagneticFluxDensityMeasure() { return IsADBType("IFCMAGNETICFLUXDENSITYMEASURE"); }
        Nullable<IfcMagneticFluxDensityMeasure> get_IfcMagneticFluxDensityMeasure() { return getSimpleValue<IfcMagneticFluxDensityMeasure>("IFCMAGNETICFLUXDENSITYMEASURE", sdaiREAL); }
        void put_IfcMagneticFluxDensityMeasure(IfcMagneticFluxDensityMeasure value) { putSimpleValue("IFCMAGNETICFLUXDENSITYMEASURE", sdaiREAL, value); }

        bool is_IfcMagneticFluxMeasure() { return IsADBType("IFCMAGNETICFLUXMEASURE"); }
        Nullable<IfcMagneticFluxMeasure> get_IfcMagneticFluxMeasure() { return getSimpleValue<IfcMagneticFluxMeasure>("IFCMAGNETICFLUXMEASURE", sdaiREAL); }
        void put_IfcMagneticFluxMeasure(IfcMagneticFluxMeasure value) { putSimpleValue("IFCMAGNETICFLUXMEASURE", sdaiREAL, value); }

        bool is_IfcLuminousFluxMeasure() { return IsADBType("IFCLUMINOUSFLUXMEASURE"); }
        Nullable<IfcLuminousFluxMeasure> get_IfcLuminousFluxMeasure() { return getSimpleValue<IfcLuminousFluxMeasure>("IFCLUMINOUSFLUXMEASURE", sdaiREAL); }
        void put_IfcLuminousFluxMeasure(IfcLuminousFluxMeasure value) { putSimpleValue("IFCLUMINOUSFLUXMEASURE", sdaiREAL, value); }

        bool is_IfcForceMeasure() { return IsADBType("IFCFORCEMEASURE"); }
        Nullable<IfcForceMeasure> get_IfcForceMeasure() { return getSimpleValue<IfcForceMeasure>("IFCFORCEMEASURE", sdaiREAL); }
        void put_IfcForceMeasure(IfcForceMeasure value) { putSimpleValue("IFCFORCEMEASURE", sdaiREAL, value); }

        bool is_IfcInductanceMeasure() { return IsADBType("IFCINDUCTANCEMEASURE"); }
        Nullable<IfcInductanceMeasure> get_IfcInductanceMeasure() { return getSimpleValue<IfcInductanceMeasure>("IFCINDUCTANCEMEASURE", sdaiREAL); }
        void put_IfcInductanceMeasure(IfcInductanceMeasure value) { putSimpleValue("IFCINDUCTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcIlluminanceMeasure() { return IsADBType("IFCILLUMINANCEMEASURE"); }
        Nullable<IfcIlluminanceMeasure> get_IfcIlluminanceMeasure() { return getSimpleValue<IfcIlluminanceMeasure>("IFCILLUMINANCEMEASURE", sdaiREAL); }
        void put_IfcIlluminanceMeasure(IfcIlluminanceMeasure value) { putSimpleValue("IFCILLUMINANCEMEASURE", sdaiREAL, value); }

        bool is_IfcElectricResistanceMeasure() { return IsADBType("IFCELECTRICRESISTANCEMEASURE"); }
        Nullable<IfcElectricResistanceMeasure> get_IfcElectricResistanceMeasure() { return getSimpleValue<IfcElectricResistanceMeasure>("IFCELECTRICRESISTANCEMEASURE", sdaiREAL); }
        void put_IfcElectricResistanceMeasure(IfcElectricResistanceMeasure value) { putSimpleValue("IFCELECTRICRESISTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcElectricConductanceMeasure() { return IsADBType("IFCELECTRICCONDUCTANCEMEASURE"); }
        Nullable<IfcElectricConductanceMeasure> get_IfcElectricConductanceMeasure() { return getSimpleValue<IfcElectricConductanceMeasure>("IFCELECTRICCONDUCTANCEMEASURE", sdaiREAL); }
        void put_IfcElectricConductanceMeasure(IfcElectricConductanceMeasure value) { putSimpleValue("IFCELECTRICCONDUCTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcElectricChargeMeasure() { return IsADBType("IFCELECTRICCHARGEMEASURE"); }
        Nullable<IfcElectricChargeMeasure> get_IfcElectricChargeMeasure() { return getSimpleValue<IfcElectricChargeMeasure>("IFCELECTRICCHARGEMEASURE", sdaiREAL); }
        void put_IfcElectricChargeMeasure(IfcElectricChargeMeasure value) { putSimpleValue("IFCELECTRICCHARGEMEASURE", sdaiREAL, value); }

        bool is_IfcDoseEquivalentMeasure() { return IsADBType("IFCDOSEEQUIVALENTMEASURE"); }
        Nullable<IfcDoseEquivalentMeasure> get_IfcDoseEquivalentMeasure() { return getSimpleValue<IfcDoseEquivalentMeasure>("IFCDOSEEQUIVALENTMEASURE", sdaiREAL); }
        void put_IfcDoseEquivalentMeasure(IfcDoseEquivalentMeasure value) { putSimpleValue("IFCDOSEEQUIVALENTMEASURE", sdaiREAL, value); }

        bool is_IfcElectricCapacitanceMeasure() { return IsADBType("IFCELECTRICCAPACITANCEMEASURE"); }
        Nullable<IfcElectricCapacitanceMeasure> get_IfcElectricCapacitanceMeasure() { return getSimpleValue<IfcElectricCapacitanceMeasure>("IFCELECTRICCAPACITANCEMEASURE", sdaiREAL); }
        void put_IfcElectricCapacitanceMeasure(IfcElectricCapacitanceMeasure value) { putSimpleValue("IFCELECTRICCAPACITANCEMEASURE", sdaiREAL, value); }

        bool is_IfcAbsorbedDoseMeasure() { return IsADBType("IFCABSORBEDDOSEMEASURE"); }
        Nullable<IfcAbsorbedDoseMeasure> get_IfcAbsorbedDoseMeasure() { return getSimpleValue<IfcAbsorbedDoseMeasure>("IFCABSORBEDDOSEMEASURE", sdaiREAL); }
        void put_IfcAbsorbedDoseMeasure(IfcAbsorbedDoseMeasure value) { putSimpleValue("IFCABSORBEDDOSEMEASURE", sdaiREAL, value); }

        bool is_IfcRadioActivityMeasure() { return IsADBType("IFCRADIOACTIVITYMEASURE"); }
        Nullable<IfcRadioActivityMeasure> get_IfcRadioActivityMeasure() { return getSimpleValue<IfcRadioActivityMeasure>("IFCRADIOACTIVITYMEASURE", sdaiREAL); }
        void put_IfcRadioActivityMeasure(IfcRadioActivityMeasure value) { putSimpleValue("IFCRADIOACTIVITYMEASURE", sdaiREAL, value); }

        bool is_IfcRotationalFrequencyMeasure() { return IsADBType("IFCROTATIONALFREQUENCYMEASURE"); }
        Nullable<IfcRotationalFrequencyMeasure> get_IfcRotationalFrequencyMeasure() { return getSimpleValue<IfcRotationalFrequencyMeasure>("IFCROTATIONALFREQUENCYMEASURE", sdaiREAL); }
        void put_IfcRotationalFrequencyMeasure(IfcRotationalFrequencyMeasure value) { putSimpleValue("IFCROTATIONALFREQUENCYMEASURE", sdaiREAL, value); }

        bool is_IfcTorqueMeasure() { return IsADBType("IFCTORQUEMEASURE"); }
        Nullable<IfcTorqueMeasure> get_IfcTorqueMeasure() { return getSimpleValue<IfcTorqueMeasure>("IFCTORQUEMEASURE", sdaiREAL); }
        void put_IfcTorqueMeasure(IfcTorqueMeasure value) { putSimpleValue("IFCTORQUEMEASURE", sdaiREAL, value); }

        bool is_IfcAccelerationMeasure() { return IsADBType("IFCACCELERATIONMEASURE"); }
        Nullable<IfcAccelerationMeasure> get_IfcAccelerationMeasure() { return getSimpleValue<IfcAccelerationMeasure>("IFCACCELERATIONMEASURE", sdaiREAL); }
        void put_IfcAccelerationMeasure(IfcAccelerationMeasure value) { putSimpleValue("IFCACCELERATIONMEASURE", sdaiREAL, value); }

        bool is_IfcLinearForceMeasure() { return IsADBType("IFCLINEARFORCEMEASURE"); }
        Nullable<IfcLinearForceMeasure> get_IfcLinearForceMeasure() { return getSimpleValue<IfcLinearForceMeasure>("IFCLINEARFORCEMEASURE", sdaiREAL); }
        void put_IfcLinearForceMeasure(IfcLinearForceMeasure value) { putSimpleValue("IFCLINEARFORCEMEASURE", sdaiREAL, value); }

        bool is_IfcLinearStiffnessMeasure() { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); }
        Nullable<IfcLinearStiffnessMeasure> get_IfcLinearStiffnessMeasure() { return getSimpleValue<IfcLinearStiffnessMeasure>("IFCLINEARSTIFFNESSMEASURE", sdaiREAL); }
        void put_IfcLinearStiffnessMeasure(IfcLinearStiffnessMeasure value) { putSimpleValue("IFCLINEARSTIFFNESSMEASURE", sdaiREAL, value); }

        bool is_IfcModulusOfSubgradeReactionMeasure() { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); }
        Nullable<IfcModulusOfSubgradeReactionMeasure> get_IfcModulusOfSubgradeReactionMeasure() { return getSimpleValue<IfcModulusOfSubgradeReactionMeasure>("IFCMODULUSOFSUBGRADEREACTIONMEASURE", sdaiREAL); }
        void put_IfcModulusOfSubgradeReactionMeasure(IfcModulusOfSubgradeReactionMeasure value) { putSimpleValue("IFCMODULUSOFSUBGRADEREACTIONMEASURE", sdaiREAL, value); }

        bool is_IfcModulusOfElasticityMeasure() { return IsADBType("IFCMODULUSOFELASTICITYMEASURE"); }
        Nullable<IfcModulusOfElasticityMeasure> get_IfcModulusOfElasticityMeasure() { return getSimpleValue<IfcModulusOfElasticityMeasure>("IFCMODULUSOFELASTICITYMEASURE", sdaiREAL); }
        void put_IfcModulusOfElasticityMeasure(IfcModulusOfElasticityMeasure value) { putSimpleValue("IFCMODULUSOFELASTICITYMEASURE", sdaiREAL, value); }

        bool is_IfcMomentOfInertiaMeasure() { return IsADBType("IFCMOMENTOFINERTIAMEASURE"); }
        Nullable<IfcMomentOfInertiaMeasure> get_IfcMomentOfInertiaMeasure() { return getSimpleValue<IfcMomentOfInertiaMeasure>("IFCMOMENTOFINERTIAMEASURE", sdaiREAL); }
        void put_IfcMomentOfInertiaMeasure(IfcMomentOfInertiaMeasure value) { putSimpleValue("IFCMOMENTOFINERTIAMEASURE", sdaiREAL, value); }

        bool is_IfcPlanarForceMeasure() { return IsADBType("IFCPLANARFORCEMEASURE"); }
        Nullable<IfcPlanarForceMeasure> get_IfcPlanarForceMeasure() { return getSimpleValue<IfcPlanarForceMeasure>("IFCPLANARFORCEMEASURE", sdaiREAL); }
        void put_IfcPlanarForceMeasure(IfcPlanarForceMeasure value) { putSimpleValue("IFCPLANARFORCEMEASURE", sdaiREAL, value); }

        bool is_IfcRotationalStiffnessMeasure() { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); }
        Nullable<IfcRotationalStiffnessMeasure> get_IfcRotationalStiffnessMeasure() { return getSimpleValue<IfcRotationalStiffnessMeasure>("IFCROTATIONALSTIFFNESSMEASURE", sdaiREAL); }
        void put_IfcRotationalStiffnessMeasure(IfcRotationalStiffnessMeasure value) { putSimpleValue("IFCROTATIONALSTIFFNESSMEASURE", sdaiREAL, value); }

        bool is_IfcShearModulusMeasure() { return IsADBType("IFCSHEARMODULUSMEASURE"); }
        Nullable<IfcShearModulusMeasure> get_IfcShearModulusMeasure() { return getSimpleValue<IfcShearModulusMeasure>("IFCSHEARMODULUSMEASURE", sdaiREAL); }
        void put_IfcShearModulusMeasure(IfcShearModulusMeasure value) { putSimpleValue("IFCSHEARMODULUSMEASURE", sdaiREAL, value); }

        bool is_IfcLinearMomentMeasure() { return IsADBType("IFCLINEARMOMENTMEASURE"); }
        Nullable<IfcLinearMomentMeasure> get_IfcLinearMomentMeasure() { return getSimpleValue<IfcLinearMomentMeasure>("IFCLINEARMOMENTMEASURE", sdaiREAL); }
        void put_IfcLinearMomentMeasure(IfcLinearMomentMeasure value) { putSimpleValue("IFCLINEARMOMENTMEASURE", sdaiREAL, value); }

        bool is_IfcLuminousIntensityDistributionMeasure() { return IsADBType("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE"); }
        Nullable<IfcLuminousIntensityDistributionMeasure> get_IfcLuminousIntensityDistributionMeasure() { return getSimpleValue<IfcLuminousIntensityDistributionMeasure>("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", sdaiREAL); }
        void put_IfcLuminousIntensityDistributionMeasure(IfcLuminousIntensityDistributionMeasure value) { putSimpleValue("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", sdaiREAL, value); }

        bool is_IfcCurvatureMeasure() { return IsADBType("IFCCURVATUREMEASURE"); }
        Nullable<IfcCurvatureMeasure> get_IfcCurvatureMeasure() { return getSimpleValue<IfcCurvatureMeasure>("IFCCURVATUREMEASURE", sdaiREAL); }
        void put_IfcCurvatureMeasure(IfcCurvatureMeasure value) { putSimpleValue("IFCCURVATUREMEASURE", sdaiREAL, value); }

        bool is_IfcMassPerLengthMeasure() { return IsADBType("IFCMASSPERLENGTHMEASURE"); }
        Nullable<IfcMassPerLengthMeasure> get_IfcMassPerLengthMeasure() { return getSimpleValue<IfcMassPerLengthMeasure>("IFCMASSPERLENGTHMEASURE", sdaiREAL); }
        void put_IfcMassPerLengthMeasure(IfcMassPerLengthMeasure value) { putSimpleValue("IFCMASSPERLENGTHMEASURE", sdaiREAL, value); }

        bool is_IfcModulusOfLinearSubgradeReactionMeasure() { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); }
        Nullable<IfcModulusOfLinearSubgradeReactionMeasure> get_IfcModulusOfLinearSubgradeReactionMeasure() { return getSimpleValue<IfcModulusOfLinearSubgradeReactionMeasure>("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", sdaiREAL); }
        void put_IfcModulusOfLinearSubgradeReactionMeasure(IfcModulusOfLinearSubgradeReactionMeasure value) { putSimpleValue("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", sdaiREAL, value); }

        bool is_IfcModulusOfRotationalSubgradeReactionMeasure() { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); }
        Nullable<IfcModulusOfRotationalSubgradeReactionMeasure> get_IfcModulusOfRotationalSubgradeReactionMeasure() { return getSimpleValue<IfcModulusOfRotationalSubgradeReactionMeasure>("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", sdaiREAL); }
        void put_IfcModulusOfRotationalSubgradeReactionMeasure(IfcModulusOfRotationalSubgradeReactionMeasure value) { putSimpleValue("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", sdaiREAL, value); }

        bool is_IfcRotationalMassMeasure() { return IsADBType("IFCROTATIONALMASSMEASURE"); }
        Nullable<IfcRotationalMassMeasure> get_IfcRotationalMassMeasure() { return getSimpleValue<IfcRotationalMassMeasure>("IFCROTATIONALMASSMEASURE", sdaiREAL); }
        void put_IfcRotationalMassMeasure(IfcRotationalMassMeasure value) { putSimpleValue("IFCROTATIONALMASSMEASURE", sdaiREAL, value); }

        bool is_IfcSectionalAreaIntegralMeasure() { return IsADBType("IFCSECTIONALAREAINTEGRALMEASURE"); }
        Nullable<IfcSectionalAreaIntegralMeasure> get_IfcSectionalAreaIntegralMeasure() { return getSimpleValue<IfcSectionalAreaIntegralMeasure>("IFCSECTIONALAREAINTEGRALMEASURE", sdaiREAL); }
        void put_IfcSectionalAreaIntegralMeasure(IfcSectionalAreaIntegralMeasure value) { putSimpleValue("IFCSECTIONALAREAINTEGRALMEASURE", sdaiREAL, value); }

        bool is_IfcSectionModulusMeasure() { return IsADBType("IFCSECTIONMODULUSMEASURE"); }
        Nullable<IfcSectionModulusMeasure> get_IfcSectionModulusMeasure() { return getSimpleValue<IfcSectionModulusMeasure>("IFCSECTIONMODULUSMEASURE", sdaiREAL); }
        void put_IfcSectionModulusMeasure(IfcSectionModulusMeasure value) { putSimpleValue("IFCSECTIONMODULUSMEASURE", sdaiREAL, value); }

        bool is_IfcTemperatureGradientMeasure() { return IsADBType("IFCTEMPERATUREGRADIENTMEASURE"); }
        Nullable<IfcTemperatureGradientMeasure> get_IfcTemperatureGradientMeasure() { return getSimpleValue<IfcTemperatureGradientMeasure>("IFCTEMPERATUREGRADIENTMEASURE", sdaiREAL); }
        void put_IfcTemperatureGradientMeasure(IfcTemperatureGradientMeasure value) { putSimpleValue("IFCTEMPERATUREGRADIENTMEASURE", sdaiREAL, value); }

        bool is_IfcThermalExpansionCoefficientMeasure() { return IsADBType("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE"); }
        Nullable<IfcThermalExpansionCoefficientMeasure> get_IfcThermalExpansionCoefficientMeasure() { return getSimpleValue<IfcThermalExpansionCoefficientMeasure>("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", sdaiREAL); }
        void put_IfcThermalExpansionCoefficientMeasure(IfcThermalExpansionCoefficientMeasure value) { putSimpleValue("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", sdaiREAL, value); }

        bool is_IfcWarpingConstantMeasure() { return IsADBType("IFCWARPINGCONSTANTMEASURE"); }
        Nullable<IfcWarpingConstantMeasure> get_IfcWarpingConstantMeasure() { return getSimpleValue<IfcWarpingConstantMeasure>("IFCWARPINGCONSTANTMEASURE", sdaiREAL); }
        void put_IfcWarpingConstantMeasure(IfcWarpingConstantMeasure value) { putSimpleValue("IFCWARPINGCONSTANTMEASURE", sdaiREAL, value); }

        bool is_IfcWarpingMomentMeasure() { return IsADBType("IFCWARPINGMOMENTMEASURE"); }
        Nullable<IfcWarpingMomentMeasure> get_IfcWarpingMomentMeasure() { return getSimpleValue<IfcWarpingMomentMeasure>("IFCWARPINGMOMENTMEASURE", sdaiREAL); }
        void put_IfcWarpingMomentMeasure(IfcWarpingMomentMeasure value) { putSimpleValue("IFCWARPINGMOMENTMEASURE", sdaiREAL, value); }

        bool is_IfcSoundPowerMeasure() { return IsADBType("IFCSOUNDPOWERMEASURE"); }
        Nullable<IfcSoundPowerMeasure> get_IfcSoundPowerMeasure() { return getSimpleValue<IfcSoundPowerMeasure>("IFCSOUNDPOWERMEASURE", sdaiREAL); }
        void put_IfcSoundPowerMeasure(IfcSoundPowerMeasure value) { putSimpleValue("IFCSOUNDPOWERMEASURE", sdaiREAL, value); }

        bool is_IfcSoundPressureMeasure() { return IsADBType("IFCSOUNDPRESSUREMEASURE"); }
        Nullable<IfcSoundPressureMeasure> get_IfcSoundPressureMeasure() { return getSimpleValue<IfcSoundPressureMeasure>("IFCSOUNDPRESSUREMEASURE", sdaiREAL); }
        void put_IfcSoundPressureMeasure(IfcSoundPressureMeasure value) { putSimpleValue("IFCSOUNDPRESSUREMEASURE", sdaiREAL, value); }

        bool is_IfcHeatingValueMeasure() { return IsADBType("IFCHEATINGVALUEMEASURE"); }
        Nullable<IfcHeatingValueMeasure> get_IfcHeatingValueMeasure() { return getSimpleValue<IfcHeatingValueMeasure>("IFCHEATINGVALUEMEASURE", sdaiREAL); }
        void put_IfcHeatingValueMeasure(IfcHeatingValueMeasure value) { putSimpleValue("IFCHEATINGVALUEMEASURE", sdaiREAL, value); }

        bool is_IfcPHMeasure() { return IsADBType("IFCPHMEASURE"); }
        Nullable<IfcPHMeasure> get_IfcPHMeasure() { return getSimpleValue<IfcPHMeasure>("IFCPHMEASURE", sdaiREAL); }
        void put_IfcPHMeasure(IfcPHMeasure value) { putSimpleValue("IFCPHMEASURE", sdaiREAL, value); }

        bool is_IfcIonConcentrationMeasure() { return IsADBType("IFCIONCONCENTRATIONMEASURE"); }
        Nullable<IfcIonConcentrationMeasure> get_IfcIonConcentrationMeasure() { return getSimpleValue<IfcIonConcentrationMeasure>("IFCIONCONCENTRATIONMEASURE", sdaiREAL); }
        void put_IfcIonConcentrationMeasure(IfcIonConcentrationMeasure value) { putSimpleValue("IFCIONCONCENTRATIONMEASURE", sdaiREAL, value); }
    };


    class IfcDerivedMeasureValue_get : public Select
    {
    public:
        IfcDerivedMeasureValue_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDerivedMeasureValue_get(Select* outer) : Select(outer) {}
        bool is_IfcVolumetricFlowRateMeasure() { return IsADBType("IFCVOLUMETRICFLOWRATEMEASURE"); }
        Nullable<IfcVolumetricFlowRateMeasure> get_IfcVolumetricFlowRateMeasure() { return getSimpleValue<IfcVolumetricFlowRateMeasure>("IFCVOLUMETRICFLOWRATEMEASURE", sdaiREAL); }
        bool is_IfcTimeStamp() { return IsADBType("IFCTIMESTAMP"); }
        Nullable<IfcTimeStamp> get_IfcTimeStamp() { return getSimpleValue<IfcTimeStamp>("IFCTIMESTAMP", sdaiINTEGER); }
        bool is_IfcThermalTransmittanceMeasure() { return IsADBType("IFCTHERMALTRANSMITTANCEMEASURE"); }
        Nullable<IfcThermalTransmittanceMeasure> get_IfcThermalTransmittanceMeasure() { return getSimpleValue<IfcThermalTransmittanceMeasure>("IFCTHERMALTRANSMITTANCEMEASURE", sdaiREAL); }
        bool is_IfcThermalResistanceMeasure() { return IsADBType("IFCTHERMALRESISTANCEMEASURE"); }
        Nullable<IfcThermalResistanceMeasure> get_IfcThermalResistanceMeasure() { return getSimpleValue<IfcThermalResistanceMeasure>("IFCTHERMALRESISTANCEMEASURE", sdaiREAL); }
        bool is_IfcThermalAdmittanceMeasure() { return IsADBType("IFCTHERMALADMITTANCEMEASURE"); }
        Nullable<IfcThermalAdmittanceMeasure> get_IfcThermalAdmittanceMeasure() { return getSimpleValue<IfcThermalAdmittanceMeasure>("IFCTHERMALADMITTANCEMEASURE", sdaiREAL); }
        bool is_IfcPressureMeasure() { return IsADBType("IFCPRESSUREMEASURE"); }
        Nullable<IfcPressureMeasure> get_IfcPressureMeasure() { return getSimpleValue<IfcPressureMeasure>("IFCPRESSUREMEASURE", sdaiREAL); }
        bool is_IfcPowerMeasure() { return IsADBType("IFCPOWERMEASURE"); }
        Nullable<IfcPowerMeasure> get_IfcPowerMeasure() { return getSimpleValue<IfcPowerMeasure>("IFCPOWERMEASURE", sdaiREAL); }
        bool is_IfcMassFlowRateMeasure() { return IsADBType("IFCMASSFLOWRATEMEASURE"); }
        Nullable<IfcMassFlowRateMeasure> get_IfcMassFlowRateMeasure() { return getSimpleValue<IfcMassFlowRateMeasure>("IFCMASSFLOWRATEMEASURE", sdaiREAL); }
        bool is_IfcMassDensityMeasure() { return IsADBType("IFCMASSDENSITYMEASURE"); }
        Nullable<IfcMassDensityMeasure> get_IfcMassDensityMeasure() { return getSimpleValue<IfcMassDensityMeasure>("IFCMASSDENSITYMEASURE", sdaiREAL); }
        bool is_IfcLinearVelocityMeasure() { return IsADBType("IFCLINEARVELOCITYMEASURE"); }
        Nullable<IfcLinearVelocityMeasure> get_IfcLinearVelocityMeasure() { return getSimpleValue<IfcLinearVelocityMeasure>("IFCLINEARVELOCITYMEASURE", sdaiREAL); }
        bool is_IfcKinematicViscosityMeasure() { return IsADBType("IFCKINEMATICVISCOSITYMEASURE"); }
        Nullable<IfcKinematicViscosityMeasure> get_IfcKinematicViscosityMeasure() { return getSimpleValue<IfcKinematicViscosityMeasure>("IFCKINEMATICVISCOSITYMEASURE", sdaiREAL); }
        bool is_IfcIntegerCountRateMeasure() { return IsADBType("IFCINTEGERCOUNTRATEMEASURE"); }
        Nullable<IfcIntegerCountRateMeasure> get_IfcIntegerCountRateMeasure() { return getSimpleValue<IfcIntegerCountRateMeasure>("IFCINTEGERCOUNTRATEMEASURE", sdaiINTEGER); }
        bool is_IfcHeatFluxDensityMeasure() { return IsADBType("IFCHEATFLUXDENSITYMEASURE"); }
        Nullable<IfcHeatFluxDensityMeasure> get_IfcHeatFluxDensityMeasure() { return getSimpleValue<IfcHeatFluxDensityMeasure>("IFCHEATFLUXDENSITYMEASURE", sdaiREAL); }
        bool is_IfcFrequencyMeasure() { return IsADBType("IFCFREQUENCYMEASURE"); }
        Nullable<IfcFrequencyMeasure> get_IfcFrequencyMeasure() { return getSimpleValue<IfcFrequencyMeasure>("IFCFREQUENCYMEASURE", sdaiREAL); }
        bool is_IfcEnergyMeasure() { return IsADBType("IFCENERGYMEASURE"); }
        Nullable<IfcEnergyMeasure> get_IfcEnergyMeasure() { return getSimpleValue<IfcEnergyMeasure>("IFCENERGYMEASURE", sdaiREAL); }
        bool is_IfcElectricVoltageMeasure() { return IsADBType("IFCELECTRICVOLTAGEMEASURE"); }
        Nullable<IfcElectricVoltageMeasure> get_IfcElectricVoltageMeasure() { return getSimpleValue<IfcElectricVoltageMeasure>("IFCELECTRICVOLTAGEMEASURE", sdaiREAL); }
        bool is_IfcDynamicViscosityMeasure() { return IsADBType("IFCDYNAMICVISCOSITYMEASURE"); }
        Nullable<IfcDynamicViscosityMeasure> get_IfcDynamicViscosityMeasure() { return getSimpleValue<IfcDynamicViscosityMeasure>("IFCDYNAMICVISCOSITYMEASURE", sdaiREAL); }
        bool is_IfcCompoundPlaneAngleMeasure() { return IsADBType("IFCCOMPOUNDPLANEANGLEMEASURE"); }

        //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void get_IfcCompoundPlaneAngleMeasure(TList& lst) { SdaiAggr aggr = getAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE"); IfcCompoundPlaneAngleMeasureSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }
        bool is_IfcAngularVelocityMeasure() { return IsADBType("IFCANGULARVELOCITYMEASURE"); }
        Nullable<IfcAngularVelocityMeasure> get_IfcAngularVelocityMeasure() { return getSimpleValue<IfcAngularVelocityMeasure>("IFCANGULARVELOCITYMEASURE", sdaiREAL); }
        bool is_IfcThermalConductivityMeasure() { return IsADBType("IFCTHERMALCONDUCTIVITYMEASURE"); }
        Nullable<IfcThermalConductivityMeasure> get_IfcThermalConductivityMeasure() { return getSimpleValue<IfcThermalConductivityMeasure>("IFCTHERMALCONDUCTIVITYMEASURE", sdaiREAL); }
        bool is_IfcMolecularWeightMeasure() { return IsADBType("IFCMOLECULARWEIGHTMEASURE"); }
        Nullable<IfcMolecularWeightMeasure> get_IfcMolecularWeightMeasure() { return getSimpleValue<IfcMolecularWeightMeasure>("IFCMOLECULARWEIGHTMEASURE", sdaiREAL); }
        bool is_IfcVaporPermeabilityMeasure() { return IsADBType("IFCVAPORPERMEABILITYMEASURE"); }
        Nullable<IfcVaporPermeabilityMeasure> get_IfcVaporPermeabilityMeasure() { return getSimpleValue<IfcVaporPermeabilityMeasure>("IFCVAPORPERMEABILITYMEASURE", sdaiREAL); }
        bool is_IfcMoistureDiffusivityMeasure() { return IsADBType("IFCMOISTUREDIFFUSIVITYMEASURE"); }
        Nullable<IfcMoistureDiffusivityMeasure> get_IfcMoistureDiffusivityMeasure() { return getSimpleValue<IfcMoistureDiffusivityMeasure>("IFCMOISTUREDIFFUSIVITYMEASURE", sdaiREAL); }
        bool is_IfcIsothermalMoistureCapacityMeasure() { return IsADBType("IFCISOTHERMALMOISTURECAPACITYMEASURE"); }
        Nullable<IfcIsothermalMoistureCapacityMeasure> get_IfcIsothermalMoistureCapacityMeasure() { return getSimpleValue<IfcIsothermalMoistureCapacityMeasure>("IFCISOTHERMALMOISTURECAPACITYMEASURE", sdaiREAL); }
        bool is_IfcSpecificHeatCapacityMeasure() { return IsADBType("IFCSPECIFICHEATCAPACITYMEASURE"); }
        Nullable<IfcSpecificHeatCapacityMeasure> get_IfcSpecificHeatCapacityMeasure() { return getSimpleValue<IfcSpecificHeatCapacityMeasure>("IFCSPECIFICHEATCAPACITYMEASURE", sdaiREAL); }
        bool is_IfcMonetaryMeasure() { return IsADBType("IFCMONETARYMEASURE"); }
        Nullable<IfcMonetaryMeasure> get_IfcMonetaryMeasure() { return getSimpleValue<IfcMonetaryMeasure>("IFCMONETARYMEASURE", sdaiREAL); }
        bool is_IfcMagneticFluxDensityMeasure() { return IsADBType("IFCMAGNETICFLUXDENSITYMEASURE"); }
        Nullable<IfcMagneticFluxDensityMeasure> get_IfcMagneticFluxDensityMeasure() { return getSimpleValue<IfcMagneticFluxDensityMeasure>("IFCMAGNETICFLUXDENSITYMEASURE", sdaiREAL); }
        bool is_IfcMagneticFluxMeasure() { return IsADBType("IFCMAGNETICFLUXMEASURE"); }
        Nullable<IfcMagneticFluxMeasure> get_IfcMagneticFluxMeasure() { return getSimpleValue<IfcMagneticFluxMeasure>("IFCMAGNETICFLUXMEASURE", sdaiREAL); }
        bool is_IfcLuminousFluxMeasure() { return IsADBType("IFCLUMINOUSFLUXMEASURE"); }
        Nullable<IfcLuminousFluxMeasure> get_IfcLuminousFluxMeasure() { return getSimpleValue<IfcLuminousFluxMeasure>("IFCLUMINOUSFLUXMEASURE", sdaiREAL); }
        bool is_IfcForceMeasure() { return IsADBType("IFCFORCEMEASURE"); }
        Nullable<IfcForceMeasure> get_IfcForceMeasure() { return getSimpleValue<IfcForceMeasure>("IFCFORCEMEASURE", sdaiREAL); }
        bool is_IfcInductanceMeasure() { return IsADBType("IFCINDUCTANCEMEASURE"); }
        Nullable<IfcInductanceMeasure> get_IfcInductanceMeasure() { return getSimpleValue<IfcInductanceMeasure>("IFCINDUCTANCEMEASURE", sdaiREAL); }
        bool is_IfcIlluminanceMeasure() { return IsADBType("IFCILLUMINANCEMEASURE"); }
        Nullable<IfcIlluminanceMeasure> get_IfcIlluminanceMeasure() { return getSimpleValue<IfcIlluminanceMeasure>("IFCILLUMINANCEMEASURE", sdaiREAL); }
        bool is_IfcElectricResistanceMeasure() { return IsADBType("IFCELECTRICRESISTANCEMEASURE"); }
        Nullable<IfcElectricResistanceMeasure> get_IfcElectricResistanceMeasure() { return getSimpleValue<IfcElectricResistanceMeasure>("IFCELECTRICRESISTANCEMEASURE", sdaiREAL); }
        bool is_IfcElectricConductanceMeasure() { return IsADBType("IFCELECTRICCONDUCTANCEMEASURE"); }
        Nullable<IfcElectricConductanceMeasure> get_IfcElectricConductanceMeasure() { return getSimpleValue<IfcElectricConductanceMeasure>("IFCELECTRICCONDUCTANCEMEASURE", sdaiREAL); }
        bool is_IfcElectricChargeMeasure() { return IsADBType("IFCELECTRICCHARGEMEASURE"); }
        Nullable<IfcElectricChargeMeasure> get_IfcElectricChargeMeasure() { return getSimpleValue<IfcElectricChargeMeasure>("IFCELECTRICCHARGEMEASURE", sdaiREAL); }
        bool is_IfcDoseEquivalentMeasure() { return IsADBType("IFCDOSEEQUIVALENTMEASURE"); }
        Nullable<IfcDoseEquivalentMeasure> get_IfcDoseEquivalentMeasure() { return getSimpleValue<IfcDoseEquivalentMeasure>("IFCDOSEEQUIVALENTMEASURE", sdaiREAL); }
        bool is_IfcElectricCapacitanceMeasure() { return IsADBType("IFCELECTRICCAPACITANCEMEASURE"); }
        Nullable<IfcElectricCapacitanceMeasure> get_IfcElectricCapacitanceMeasure() { return getSimpleValue<IfcElectricCapacitanceMeasure>("IFCELECTRICCAPACITANCEMEASURE", sdaiREAL); }
        bool is_IfcAbsorbedDoseMeasure() { return IsADBType("IFCABSORBEDDOSEMEASURE"); }
        Nullable<IfcAbsorbedDoseMeasure> get_IfcAbsorbedDoseMeasure() { return getSimpleValue<IfcAbsorbedDoseMeasure>("IFCABSORBEDDOSEMEASURE", sdaiREAL); }
        bool is_IfcRadioActivityMeasure() { return IsADBType("IFCRADIOACTIVITYMEASURE"); }
        Nullable<IfcRadioActivityMeasure> get_IfcRadioActivityMeasure() { return getSimpleValue<IfcRadioActivityMeasure>("IFCRADIOACTIVITYMEASURE", sdaiREAL); }
        bool is_IfcRotationalFrequencyMeasure() { return IsADBType("IFCROTATIONALFREQUENCYMEASURE"); }
        Nullable<IfcRotationalFrequencyMeasure> get_IfcRotationalFrequencyMeasure() { return getSimpleValue<IfcRotationalFrequencyMeasure>("IFCROTATIONALFREQUENCYMEASURE", sdaiREAL); }
        bool is_IfcTorqueMeasure() { return IsADBType("IFCTORQUEMEASURE"); }
        Nullable<IfcTorqueMeasure> get_IfcTorqueMeasure() { return getSimpleValue<IfcTorqueMeasure>("IFCTORQUEMEASURE", sdaiREAL); }
        bool is_IfcAccelerationMeasure() { return IsADBType("IFCACCELERATIONMEASURE"); }
        Nullable<IfcAccelerationMeasure> get_IfcAccelerationMeasure() { return getSimpleValue<IfcAccelerationMeasure>("IFCACCELERATIONMEASURE", sdaiREAL); }
        bool is_IfcLinearForceMeasure() { return IsADBType("IFCLINEARFORCEMEASURE"); }
        Nullable<IfcLinearForceMeasure> get_IfcLinearForceMeasure() { return getSimpleValue<IfcLinearForceMeasure>("IFCLINEARFORCEMEASURE", sdaiREAL); }
        bool is_IfcLinearStiffnessMeasure() { return IsADBType("IFCLINEARSTIFFNESSMEASURE"); }
        Nullable<IfcLinearStiffnessMeasure> get_IfcLinearStiffnessMeasure() { return getSimpleValue<IfcLinearStiffnessMeasure>("IFCLINEARSTIFFNESSMEASURE", sdaiREAL); }
        bool is_IfcModulusOfSubgradeReactionMeasure() { return IsADBType("IFCMODULUSOFSUBGRADEREACTIONMEASURE"); }
        Nullable<IfcModulusOfSubgradeReactionMeasure> get_IfcModulusOfSubgradeReactionMeasure() { return getSimpleValue<IfcModulusOfSubgradeReactionMeasure>("IFCMODULUSOFSUBGRADEREACTIONMEASURE", sdaiREAL); }
        bool is_IfcModulusOfElasticityMeasure() { return IsADBType("IFCMODULUSOFELASTICITYMEASURE"); }
        Nullable<IfcModulusOfElasticityMeasure> get_IfcModulusOfElasticityMeasure() { return getSimpleValue<IfcModulusOfElasticityMeasure>("IFCMODULUSOFELASTICITYMEASURE", sdaiREAL); }
        bool is_IfcMomentOfInertiaMeasure() { return IsADBType("IFCMOMENTOFINERTIAMEASURE"); }
        Nullable<IfcMomentOfInertiaMeasure> get_IfcMomentOfInertiaMeasure() { return getSimpleValue<IfcMomentOfInertiaMeasure>("IFCMOMENTOFINERTIAMEASURE", sdaiREAL); }
        bool is_IfcPlanarForceMeasure() { return IsADBType("IFCPLANARFORCEMEASURE"); }
        Nullable<IfcPlanarForceMeasure> get_IfcPlanarForceMeasure() { return getSimpleValue<IfcPlanarForceMeasure>("IFCPLANARFORCEMEASURE", sdaiREAL); }
        bool is_IfcRotationalStiffnessMeasure() { return IsADBType("IFCROTATIONALSTIFFNESSMEASURE"); }
        Nullable<IfcRotationalStiffnessMeasure> get_IfcRotationalStiffnessMeasure() { return getSimpleValue<IfcRotationalStiffnessMeasure>("IFCROTATIONALSTIFFNESSMEASURE", sdaiREAL); }
        bool is_IfcShearModulusMeasure() { return IsADBType("IFCSHEARMODULUSMEASURE"); }
        Nullable<IfcShearModulusMeasure> get_IfcShearModulusMeasure() { return getSimpleValue<IfcShearModulusMeasure>("IFCSHEARMODULUSMEASURE", sdaiREAL); }
        bool is_IfcLinearMomentMeasure() { return IsADBType("IFCLINEARMOMENTMEASURE"); }
        Nullable<IfcLinearMomentMeasure> get_IfcLinearMomentMeasure() { return getSimpleValue<IfcLinearMomentMeasure>("IFCLINEARMOMENTMEASURE", sdaiREAL); }
        bool is_IfcLuminousIntensityDistributionMeasure() { return IsADBType("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE"); }
        Nullable<IfcLuminousIntensityDistributionMeasure> get_IfcLuminousIntensityDistributionMeasure() { return getSimpleValue<IfcLuminousIntensityDistributionMeasure>("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", sdaiREAL); }
        bool is_IfcCurvatureMeasure() { return IsADBType("IFCCURVATUREMEASURE"); }
        Nullable<IfcCurvatureMeasure> get_IfcCurvatureMeasure() { return getSimpleValue<IfcCurvatureMeasure>("IFCCURVATUREMEASURE", sdaiREAL); }
        bool is_IfcMassPerLengthMeasure() { return IsADBType("IFCMASSPERLENGTHMEASURE"); }
        Nullable<IfcMassPerLengthMeasure> get_IfcMassPerLengthMeasure() { return getSimpleValue<IfcMassPerLengthMeasure>("IFCMASSPERLENGTHMEASURE", sdaiREAL); }
        bool is_IfcModulusOfLinearSubgradeReactionMeasure() { return IsADBType("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE"); }
        Nullable<IfcModulusOfLinearSubgradeReactionMeasure> get_IfcModulusOfLinearSubgradeReactionMeasure() { return getSimpleValue<IfcModulusOfLinearSubgradeReactionMeasure>("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", sdaiREAL); }
        bool is_IfcModulusOfRotationalSubgradeReactionMeasure() { return IsADBType("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE"); }
        Nullable<IfcModulusOfRotationalSubgradeReactionMeasure> get_IfcModulusOfRotationalSubgradeReactionMeasure() { return getSimpleValue<IfcModulusOfRotationalSubgradeReactionMeasure>("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", sdaiREAL); }
        bool is_IfcRotationalMassMeasure() { return IsADBType("IFCROTATIONALMASSMEASURE"); }
        Nullable<IfcRotationalMassMeasure> get_IfcRotationalMassMeasure() { return getSimpleValue<IfcRotationalMassMeasure>("IFCROTATIONALMASSMEASURE", sdaiREAL); }
        bool is_IfcSectionalAreaIntegralMeasure() { return IsADBType("IFCSECTIONALAREAINTEGRALMEASURE"); }
        Nullable<IfcSectionalAreaIntegralMeasure> get_IfcSectionalAreaIntegralMeasure() { return getSimpleValue<IfcSectionalAreaIntegralMeasure>("IFCSECTIONALAREAINTEGRALMEASURE", sdaiREAL); }
        bool is_IfcSectionModulusMeasure() { return IsADBType("IFCSECTIONMODULUSMEASURE"); }
        Nullable<IfcSectionModulusMeasure> get_IfcSectionModulusMeasure() { return getSimpleValue<IfcSectionModulusMeasure>("IFCSECTIONMODULUSMEASURE", sdaiREAL); }
        bool is_IfcTemperatureGradientMeasure() { return IsADBType("IFCTEMPERATUREGRADIENTMEASURE"); }
        Nullable<IfcTemperatureGradientMeasure> get_IfcTemperatureGradientMeasure() { return getSimpleValue<IfcTemperatureGradientMeasure>("IFCTEMPERATUREGRADIENTMEASURE", sdaiREAL); }
        bool is_IfcThermalExpansionCoefficientMeasure() { return IsADBType("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE"); }
        Nullable<IfcThermalExpansionCoefficientMeasure> get_IfcThermalExpansionCoefficientMeasure() { return getSimpleValue<IfcThermalExpansionCoefficientMeasure>("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", sdaiREAL); }
        bool is_IfcWarpingConstantMeasure() { return IsADBType("IFCWARPINGCONSTANTMEASURE"); }
        Nullable<IfcWarpingConstantMeasure> get_IfcWarpingConstantMeasure() { return getSimpleValue<IfcWarpingConstantMeasure>("IFCWARPINGCONSTANTMEASURE", sdaiREAL); }
        bool is_IfcWarpingMomentMeasure() { return IsADBType("IFCWARPINGMOMENTMEASURE"); }
        Nullable<IfcWarpingMomentMeasure> get_IfcWarpingMomentMeasure() { return getSimpleValue<IfcWarpingMomentMeasure>("IFCWARPINGMOMENTMEASURE", sdaiREAL); }
        bool is_IfcSoundPowerMeasure() { return IsADBType("IFCSOUNDPOWERMEASURE"); }
        Nullable<IfcSoundPowerMeasure> get_IfcSoundPowerMeasure() { return getSimpleValue<IfcSoundPowerMeasure>("IFCSOUNDPOWERMEASURE", sdaiREAL); }
        bool is_IfcSoundPressureMeasure() { return IsADBType("IFCSOUNDPRESSUREMEASURE"); }
        Nullable<IfcSoundPressureMeasure> get_IfcSoundPressureMeasure() { return getSimpleValue<IfcSoundPressureMeasure>("IFCSOUNDPRESSUREMEASURE", sdaiREAL); }
        bool is_IfcHeatingValueMeasure() { return IsADBType("IFCHEATINGVALUEMEASURE"); }
        Nullable<IfcHeatingValueMeasure> get_IfcHeatingValueMeasure() { return getSimpleValue<IfcHeatingValueMeasure>("IFCHEATINGVALUEMEASURE", sdaiREAL); }
        bool is_IfcPHMeasure() { return IsADBType("IFCPHMEASURE"); }
        Nullable<IfcPHMeasure> get_IfcPHMeasure() { return getSimpleValue<IfcPHMeasure>("IFCPHMEASURE", sdaiREAL); }
        bool is_IfcIonConcentrationMeasure() { return IsADBType("IFCIONCONCENTRATIONMEASURE"); }
        Nullable<IfcIonConcentrationMeasure> get_IfcIonConcentrationMeasure() { return getSimpleValue<IfcIonConcentrationMeasure>("IFCIONCONCENTRATIONMEASURE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        Nullable<IntValue> as_int() { IntValue val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
    };


    class IfcDerivedMeasureValue_put : public Select
    {
    public:
        IfcDerivedMeasureValue_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDerivedMeasureValue_put(Select* outer) : Select(outer) {}
        void put_IfcVolumetricFlowRateMeasure(IfcVolumetricFlowRateMeasure value) { putSimpleValue("IFCVOLUMETRICFLOWRATEMEASURE", sdaiREAL, value); }
        void put_IfcTimeStamp(IfcTimeStamp value) { putSimpleValue("IFCTIMESTAMP", sdaiINTEGER, value); }
        void put_IfcThermalTransmittanceMeasure(IfcThermalTransmittanceMeasure value) { putSimpleValue("IFCTHERMALTRANSMITTANCEMEASURE", sdaiREAL, value); }
        void put_IfcThermalResistanceMeasure(IfcThermalResistanceMeasure value) { putSimpleValue("IFCTHERMALRESISTANCEMEASURE", sdaiREAL, value); }
        void put_IfcThermalAdmittanceMeasure(IfcThermalAdmittanceMeasure value) { putSimpleValue("IFCTHERMALADMITTANCEMEASURE", sdaiREAL, value); }
        void put_IfcPressureMeasure(IfcPressureMeasure value) { putSimpleValue("IFCPRESSUREMEASURE", sdaiREAL, value); }
        void put_IfcPowerMeasure(IfcPowerMeasure value) { putSimpleValue("IFCPOWERMEASURE", sdaiREAL, value); }
        void put_IfcMassFlowRateMeasure(IfcMassFlowRateMeasure value) { putSimpleValue("IFCMASSFLOWRATEMEASURE", sdaiREAL, value); }
        void put_IfcMassDensityMeasure(IfcMassDensityMeasure value) { putSimpleValue("IFCMASSDENSITYMEASURE", sdaiREAL, value); }
        void put_IfcLinearVelocityMeasure(IfcLinearVelocityMeasure value) { putSimpleValue("IFCLINEARVELOCITYMEASURE", sdaiREAL, value); }
        void put_IfcKinematicViscosityMeasure(IfcKinematicViscosityMeasure value) { putSimpleValue("IFCKINEMATICVISCOSITYMEASURE", sdaiREAL, value); }
        void put_IfcIntegerCountRateMeasure(IfcIntegerCountRateMeasure value) { putSimpleValue("IFCINTEGERCOUNTRATEMEASURE", sdaiINTEGER, value); }
        void put_IfcHeatFluxDensityMeasure(IfcHeatFluxDensityMeasure value) { putSimpleValue("IFCHEATFLUXDENSITYMEASURE", sdaiREAL, value); }
        void put_IfcFrequencyMeasure(IfcFrequencyMeasure value) { putSimpleValue("IFCFREQUENCYMEASURE", sdaiREAL, value); }
        void put_IfcEnergyMeasure(IfcEnergyMeasure value) { putSimpleValue("IFCENERGYMEASURE", sdaiREAL, value); }
        void put_IfcElectricVoltageMeasure(IfcElectricVoltageMeasure value) { putSimpleValue("IFCELECTRICVOLTAGEMEASURE", sdaiREAL, value); }
        void put_IfcDynamicViscosityMeasure(IfcDynamicViscosityMeasure value) { putSimpleValue("IFCDYNAMICVISCOSITYMEASURE", sdaiREAL, value); }

                //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void put_IfcCompoundPlaneAngleMeasure(TList& lst) { IfcCompoundPlaneAngleMeasureSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("IFCCOMPOUNDPLANEANGLEMEASURE", aggr); }

                //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_IfcCompoundPlaneAngleMeasure(TArrayElem arr[], size_t n) { IfcCompoundPlaneAngleMeasure lst; ArrayToList(arr, n, lst); put_IfcCompoundPlaneAngleMeasure(lst); }
        void put_IfcAngularVelocityMeasure(IfcAngularVelocityMeasure value) { putSimpleValue("IFCANGULARVELOCITYMEASURE", sdaiREAL, value); }
        void put_IfcThermalConductivityMeasure(IfcThermalConductivityMeasure value) { putSimpleValue("IFCTHERMALCONDUCTIVITYMEASURE", sdaiREAL, value); }
        void put_IfcMolecularWeightMeasure(IfcMolecularWeightMeasure value) { putSimpleValue("IFCMOLECULARWEIGHTMEASURE", sdaiREAL, value); }
        void put_IfcVaporPermeabilityMeasure(IfcVaporPermeabilityMeasure value) { putSimpleValue("IFCVAPORPERMEABILITYMEASURE", sdaiREAL, value); }
        void put_IfcMoistureDiffusivityMeasure(IfcMoistureDiffusivityMeasure value) { putSimpleValue("IFCMOISTUREDIFFUSIVITYMEASURE", sdaiREAL, value); }
        void put_IfcIsothermalMoistureCapacityMeasure(IfcIsothermalMoistureCapacityMeasure value) { putSimpleValue("IFCISOTHERMALMOISTURECAPACITYMEASURE", sdaiREAL, value); }
        void put_IfcSpecificHeatCapacityMeasure(IfcSpecificHeatCapacityMeasure value) { putSimpleValue("IFCSPECIFICHEATCAPACITYMEASURE", sdaiREAL, value); }
        void put_IfcMonetaryMeasure(IfcMonetaryMeasure value) { putSimpleValue("IFCMONETARYMEASURE", sdaiREAL, value); }
        void put_IfcMagneticFluxDensityMeasure(IfcMagneticFluxDensityMeasure value) { putSimpleValue("IFCMAGNETICFLUXDENSITYMEASURE", sdaiREAL, value); }
        void put_IfcMagneticFluxMeasure(IfcMagneticFluxMeasure value) { putSimpleValue("IFCMAGNETICFLUXMEASURE", sdaiREAL, value); }
        void put_IfcLuminousFluxMeasure(IfcLuminousFluxMeasure value) { putSimpleValue("IFCLUMINOUSFLUXMEASURE", sdaiREAL, value); }
        void put_IfcForceMeasure(IfcForceMeasure value) { putSimpleValue("IFCFORCEMEASURE", sdaiREAL, value); }
        void put_IfcInductanceMeasure(IfcInductanceMeasure value) { putSimpleValue("IFCINDUCTANCEMEASURE", sdaiREAL, value); }
        void put_IfcIlluminanceMeasure(IfcIlluminanceMeasure value) { putSimpleValue("IFCILLUMINANCEMEASURE", sdaiREAL, value); }
        void put_IfcElectricResistanceMeasure(IfcElectricResistanceMeasure value) { putSimpleValue("IFCELECTRICRESISTANCEMEASURE", sdaiREAL, value); }
        void put_IfcElectricConductanceMeasure(IfcElectricConductanceMeasure value) { putSimpleValue("IFCELECTRICCONDUCTANCEMEASURE", sdaiREAL, value); }
        void put_IfcElectricChargeMeasure(IfcElectricChargeMeasure value) { putSimpleValue("IFCELECTRICCHARGEMEASURE", sdaiREAL, value); }
        void put_IfcDoseEquivalentMeasure(IfcDoseEquivalentMeasure value) { putSimpleValue("IFCDOSEEQUIVALENTMEASURE", sdaiREAL, value); }
        void put_IfcElectricCapacitanceMeasure(IfcElectricCapacitanceMeasure value) { putSimpleValue("IFCELECTRICCAPACITANCEMEASURE", sdaiREAL, value); }
        void put_IfcAbsorbedDoseMeasure(IfcAbsorbedDoseMeasure value) { putSimpleValue("IFCABSORBEDDOSEMEASURE", sdaiREAL, value); }
        void put_IfcRadioActivityMeasure(IfcRadioActivityMeasure value) { putSimpleValue("IFCRADIOACTIVITYMEASURE", sdaiREAL, value); }
        void put_IfcRotationalFrequencyMeasure(IfcRotationalFrequencyMeasure value) { putSimpleValue("IFCROTATIONALFREQUENCYMEASURE", sdaiREAL, value); }
        void put_IfcTorqueMeasure(IfcTorqueMeasure value) { putSimpleValue("IFCTORQUEMEASURE", sdaiREAL, value); }
        void put_IfcAccelerationMeasure(IfcAccelerationMeasure value) { putSimpleValue("IFCACCELERATIONMEASURE", sdaiREAL, value); }
        void put_IfcLinearForceMeasure(IfcLinearForceMeasure value) { putSimpleValue("IFCLINEARFORCEMEASURE", sdaiREAL, value); }
        void put_IfcLinearStiffnessMeasure(IfcLinearStiffnessMeasure value) { putSimpleValue("IFCLINEARSTIFFNESSMEASURE", sdaiREAL, value); }
        void put_IfcModulusOfSubgradeReactionMeasure(IfcModulusOfSubgradeReactionMeasure value) { putSimpleValue("IFCMODULUSOFSUBGRADEREACTIONMEASURE", sdaiREAL, value); }
        void put_IfcModulusOfElasticityMeasure(IfcModulusOfElasticityMeasure value) { putSimpleValue("IFCMODULUSOFELASTICITYMEASURE", sdaiREAL, value); }
        void put_IfcMomentOfInertiaMeasure(IfcMomentOfInertiaMeasure value) { putSimpleValue("IFCMOMENTOFINERTIAMEASURE", sdaiREAL, value); }
        void put_IfcPlanarForceMeasure(IfcPlanarForceMeasure value) { putSimpleValue("IFCPLANARFORCEMEASURE", sdaiREAL, value); }
        void put_IfcRotationalStiffnessMeasure(IfcRotationalStiffnessMeasure value) { putSimpleValue("IFCROTATIONALSTIFFNESSMEASURE", sdaiREAL, value); }
        void put_IfcShearModulusMeasure(IfcShearModulusMeasure value) { putSimpleValue("IFCSHEARMODULUSMEASURE", sdaiREAL, value); }
        void put_IfcLinearMomentMeasure(IfcLinearMomentMeasure value) { putSimpleValue("IFCLINEARMOMENTMEASURE", sdaiREAL, value); }
        void put_IfcLuminousIntensityDistributionMeasure(IfcLuminousIntensityDistributionMeasure value) { putSimpleValue("IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE", sdaiREAL, value); }
        void put_IfcCurvatureMeasure(IfcCurvatureMeasure value) { putSimpleValue("IFCCURVATUREMEASURE", sdaiREAL, value); }
        void put_IfcMassPerLengthMeasure(IfcMassPerLengthMeasure value) { putSimpleValue("IFCMASSPERLENGTHMEASURE", sdaiREAL, value); }
        void put_IfcModulusOfLinearSubgradeReactionMeasure(IfcModulusOfLinearSubgradeReactionMeasure value) { putSimpleValue("IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE", sdaiREAL, value); }
        void put_IfcModulusOfRotationalSubgradeReactionMeasure(IfcModulusOfRotationalSubgradeReactionMeasure value) { putSimpleValue("IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE", sdaiREAL, value); }
        void put_IfcRotationalMassMeasure(IfcRotationalMassMeasure value) { putSimpleValue("IFCROTATIONALMASSMEASURE", sdaiREAL, value); }
        void put_IfcSectionalAreaIntegralMeasure(IfcSectionalAreaIntegralMeasure value) { putSimpleValue("IFCSECTIONALAREAINTEGRALMEASURE", sdaiREAL, value); }
        void put_IfcSectionModulusMeasure(IfcSectionModulusMeasure value) { putSimpleValue("IFCSECTIONMODULUSMEASURE", sdaiREAL, value); }
        void put_IfcTemperatureGradientMeasure(IfcTemperatureGradientMeasure value) { putSimpleValue("IFCTEMPERATUREGRADIENTMEASURE", sdaiREAL, value); }
        void put_IfcThermalExpansionCoefficientMeasure(IfcThermalExpansionCoefficientMeasure value) { putSimpleValue("IFCTHERMALEXPANSIONCOEFFICIENTMEASURE", sdaiREAL, value); }
        void put_IfcWarpingConstantMeasure(IfcWarpingConstantMeasure value) { putSimpleValue("IFCWARPINGCONSTANTMEASURE", sdaiREAL, value); }
        void put_IfcWarpingMomentMeasure(IfcWarpingMomentMeasure value) { putSimpleValue("IFCWARPINGMOMENTMEASURE", sdaiREAL, value); }
        void put_IfcSoundPowerMeasure(IfcSoundPowerMeasure value) { putSimpleValue("IFCSOUNDPOWERMEASURE", sdaiREAL, value); }
        void put_IfcSoundPressureMeasure(IfcSoundPressureMeasure value) { putSimpleValue("IFCSOUNDPRESSUREMEASURE", sdaiREAL, value); }
        void put_IfcHeatingValueMeasure(IfcHeatingValueMeasure value) { putSimpleValue("IFCHEATINGVALUEMEASURE", sdaiREAL, value); }
        void put_IfcPHMeasure(IfcPHMeasure value) { putSimpleValue("IFCPHMEASURE", sdaiREAL, value); }
        void put_IfcIonConcentrationMeasure(IfcIonConcentrationMeasure value) { putSimpleValue("IFCIONCONCENTRATIONMEASURE", sdaiREAL, value); }
    };


    class IfcDocumentSelect : public Select
    {
    public:
        IfcDocumentSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDocumentSelect(Select* outer) : Select(outer) {}

        bool is_IfcDocumentReference() { return IsADBEntity("IfcDocumentReference"); }
        IfcDocumentReference get_IfcDocumentReference();
        void put_IfcDocumentReference(IfcDocumentReference inst);

        bool is_IfcDocumentInformation() { return IsADBEntity("IfcDocumentInformation"); }
        IfcDocumentInformation get_IfcDocumentInformation();
        void put_IfcDocumentInformation(IfcDocumentInformation inst);
    };


    class IfcDocumentSelect_get : public Select
    {
    public:
        IfcDocumentSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDocumentSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcDocumentReference() { return IsADBEntity("IfcDocumentReference"); }
        IfcDocumentReference get_IfcDocumentReference();
        bool is_IfcDocumentInformation() { return IsADBEntity("IfcDocumentInformation"); }
        IfcDocumentInformation get_IfcDocumentInformation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcDocumentSelect_put : public Select
    {
    public:
        IfcDocumentSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDocumentSelect_put(Select* outer) : Select(outer) {}
        void put_IfcDocumentReference(IfcDocumentReference inst);
        void put_IfcDocumentInformation(IfcDocumentInformation inst);
    };


    class IfcDraughtingCalloutElement : public Select
    {
    public:
        IfcDraughtingCalloutElement(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDraughtingCalloutElement(Select* outer) : Select(outer) {}

        bool is_IfcAnnotationCurveOccurrence() { return IsADBEntity("IfcAnnotationCurveOccurrence"); }
        IfcAnnotationCurveOccurrence get_IfcAnnotationCurveOccurrence();
        void put_IfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence inst);

        bool is_IfcAnnotationTextOccurrence() { return IsADBEntity("IfcAnnotationTextOccurrence"); }
        IfcAnnotationTextOccurrence get_IfcAnnotationTextOccurrence();
        void put_IfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence inst);

        bool is_IfcAnnotationSymbolOccurrence() { return IsADBEntity("IfcAnnotationSymbolOccurrence"); }
        IfcAnnotationSymbolOccurrence get_IfcAnnotationSymbolOccurrence();
        void put_IfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence inst);
    };


    class IfcDraughtingCalloutElement_get : public Select
    {
    public:
        IfcDraughtingCalloutElement_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDraughtingCalloutElement_get(Select* outer) : Select(outer) {}
        bool is_IfcAnnotationCurveOccurrence() { return IsADBEntity("IfcAnnotationCurveOccurrence"); }
        IfcAnnotationCurveOccurrence get_IfcAnnotationCurveOccurrence();
        bool is_IfcAnnotationTextOccurrence() { return IsADBEntity("IfcAnnotationTextOccurrence"); }
        IfcAnnotationTextOccurrence get_IfcAnnotationTextOccurrence();
        bool is_IfcAnnotationSymbolOccurrence() { return IsADBEntity("IfcAnnotationSymbolOccurrence"); }
        IfcAnnotationSymbolOccurrence get_IfcAnnotationSymbolOccurrence();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcDraughtingCalloutElement_put : public Select
    {
    public:
        IfcDraughtingCalloutElement_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcDraughtingCalloutElement_put(Select* outer) : Select(outer) {}
        void put_IfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence inst);
        void put_IfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence inst);
        void put_IfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence inst);
    };


    class IfcFillAreaStyleTileShapeSelect : public Select
    {
    public:
        IfcFillAreaStyleTileShapeSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcFillAreaStyleTileShapeSelect(Select* outer) : Select(outer) {}

        bool is_IfcFillAreaStyleTileSymbolWithStyle() { return IsADBEntity("IfcFillAreaStyleTileSymbolWithStyle"); }
        IfcFillAreaStyleTileSymbolWithStyle get_IfcFillAreaStyleTileSymbolWithStyle();
        void put_IfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle inst);
    };


    class IfcFillAreaStyleTileShapeSelect_get : public Select
    {
    public:
        IfcFillAreaStyleTileShapeSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcFillAreaStyleTileShapeSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcFillAreaStyleTileSymbolWithStyle() { return IsADBEntity("IfcFillAreaStyleTileSymbolWithStyle"); }
        IfcFillAreaStyleTileSymbolWithStyle get_IfcFillAreaStyleTileSymbolWithStyle();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcFillAreaStyleTileShapeSelect_put : public Select
    {
    public:
        IfcFillAreaStyleTileShapeSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcFillAreaStyleTileShapeSelect_put(Select* outer) : Select(outer) {}
        void put_IfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle inst);
    };


    class IfcFillStyleSelect : public Select
    {
    public:
        IfcFillStyleSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcFillStyleSelect(Select* outer) : Select(outer) {}

        bool is_IfcFillAreaStyleHatching() { return IsADBEntity("IfcFillAreaStyleHatching"); }
        IfcFillAreaStyleHatching get_IfcFillAreaStyleHatching();
        void put_IfcFillAreaStyleHatching(IfcFillAreaStyleHatching inst);

        bool is_IfcFillAreaStyleTiles() { return IsADBEntity("IfcFillAreaStyleTiles"); }
        IfcFillAreaStyleTiles get_IfcFillAreaStyleTiles();
        void put_IfcFillAreaStyleTiles(IfcFillAreaStyleTiles inst);

        IfcColour _IfcColour() { return IfcColour(this); }

        bool is_IfcExternallyDefinedHatchStyle() { return IsADBEntity("IfcExternallyDefinedHatchStyle"); }
        IfcExternallyDefinedHatchStyle get_IfcExternallyDefinedHatchStyle();
        void put_IfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle inst);
    };


    class IfcFillStyleSelect_get : public Select
    {
    public:
        IfcFillStyleSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcFillStyleSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcFillAreaStyleHatching() { return IsADBEntity("IfcFillAreaStyleHatching"); }
        IfcFillAreaStyleHatching get_IfcFillAreaStyleHatching();
        bool is_IfcFillAreaStyleTiles() { return IsADBEntity("IfcFillAreaStyleTiles"); }
        IfcFillAreaStyleTiles get_IfcFillAreaStyleTiles();
        IfcColour_get get_IfcColour() { return IfcColour_get(this); }
        bool is_IfcExternallyDefinedHatchStyle() { return IsADBEntity("IfcExternallyDefinedHatchStyle"); }
        IfcExternallyDefinedHatchStyle get_IfcExternallyDefinedHatchStyle();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcFillStyleSelect_put : public Select
    {
    public:
        IfcFillStyleSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcFillStyleSelect_put(Select* outer) : Select(outer) {}
        void put_IfcFillAreaStyleHatching(IfcFillAreaStyleHatching inst);
        void put_IfcFillAreaStyleTiles(IfcFillAreaStyleTiles inst);
        IfcColour_put put_IfcColour() { return IfcColour_put(this); }
        void put_IfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle inst);
    };


    class IfcGeometricSetSelect : public Select
    {
    public:
        IfcGeometricSetSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcGeometricSetSelect(Select* outer) : Select(outer) {}

        bool is_IfcPoint() { return IsADBEntity("IfcPoint"); }
        IfcPoint get_IfcPoint();
        void put_IfcPoint(IfcPoint inst);

        bool is_IfcCurve() { return IsADBEntity("IfcCurve"); }
        IfcCurve get_IfcCurve();
        void put_IfcCurve(IfcCurve inst);

        bool is_IfcSurface() { return IsADBEntity("IfcSurface"); }
        IfcSurface get_IfcSurface();
        void put_IfcSurface(IfcSurface inst);
    };


    class IfcGeometricSetSelect_get : public Select
    {
    public:
        IfcGeometricSetSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcGeometricSetSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcPoint() { return IsADBEntity("IfcPoint"); }
        IfcPoint get_IfcPoint();
        bool is_IfcCurve() { return IsADBEntity("IfcCurve"); }
        IfcCurve get_IfcCurve();
        bool is_IfcSurface() { return IsADBEntity("IfcSurface"); }
        IfcSurface get_IfcSurface();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcGeometricSetSelect_put : public Select
    {
    public:
        IfcGeometricSetSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcGeometricSetSelect_put(Select* outer) : Select(outer) {}
        void put_IfcPoint(IfcPoint inst);
        void put_IfcCurve(IfcCurve inst);
        void put_IfcSurface(IfcSurface inst);
    };


    class IfcHatchLineDistanceSelect : public Select
    {
    public:
        IfcHatchLineDistanceSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcHatchLineDistanceSelect(Select* outer) : Select(outer) {}

        bool is_IfcOneDirectionRepeatFactor() { return IsADBEntity("IfcOneDirectionRepeatFactor"); }
        IfcOneDirectionRepeatFactor get_IfcOneDirectionRepeatFactor();
        void put_IfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor inst);

        bool is_IfcPositiveLengthMeasure() { return IsADBType("IFCPOSITIVELENGTHMEASURE"); }
        Nullable<IfcPositiveLengthMeasure> get_IfcPositiveLengthMeasure() { return getSimpleValue<IfcPositiveLengthMeasure>("IFCPOSITIVELENGTHMEASURE", sdaiREAL); }
        void put_IfcPositiveLengthMeasure(IfcPositiveLengthMeasure value) { putSimpleValue("IFCPOSITIVELENGTHMEASURE", sdaiREAL, value); }
    };


    class IfcHatchLineDistanceSelect_get : public Select
    {
    public:
        IfcHatchLineDistanceSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcHatchLineDistanceSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcOneDirectionRepeatFactor() { return IsADBEntity("IfcOneDirectionRepeatFactor"); }
        IfcOneDirectionRepeatFactor get_IfcOneDirectionRepeatFactor();
        bool is_IfcPositiveLengthMeasure() { return IsADBType("IFCPOSITIVELENGTHMEASURE"); }
        Nullable<IfcPositiveLengthMeasure> get_IfcPositiveLengthMeasure() { return getSimpleValue<IfcPositiveLengthMeasure>("IFCPOSITIVELENGTHMEASURE", sdaiREAL); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class IfcHatchLineDistanceSelect_put : public Select
    {
    public:
        IfcHatchLineDistanceSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcHatchLineDistanceSelect_put(Select* outer) : Select(outer) {}
        void put_IfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor inst);
        void put_IfcPositiveLengthMeasure(IfcPositiveLengthMeasure value) { putSimpleValue("IFCPOSITIVELENGTHMEASURE", sdaiREAL, value); }
    };


    class IfcLayeredItem : public Select
    {
    public:
        IfcLayeredItem(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLayeredItem(Select* outer) : Select(outer) {}

        bool is_IfcRepresentationItem() { return IsADBEntity("IfcRepresentationItem"); }
        IfcRepresentationItem get_IfcRepresentationItem();
        void put_IfcRepresentationItem(IfcRepresentationItem inst);

        bool is_IfcRepresentation() { return IsADBEntity("IfcRepresentation"); }
        IfcRepresentation get_IfcRepresentation();
        void put_IfcRepresentation(IfcRepresentation inst);
    };


    class IfcLayeredItem_get : public Select
    {
    public:
        IfcLayeredItem_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLayeredItem_get(Select* outer) : Select(outer) {}
        bool is_IfcRepresentationItem() { return IsADBEntity("IfcRepresentationItem"); }
        IfcRepresentationItem get_IfcRepresentationItem();
        bool is_IfcRepresentation() { return IsADBEntity("IfcRepresentation"); }
        IfcRepresentation get_IfcRepresentation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcLayeredItem_put : public Select
    {
    public:
        IfcLayeredItem_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLayeredItem_put(Select* outer) : Select(outer) {}
        void put_IfcRepresentationItem(IfcRepresentationItem inst);
        void put_IfcRepresentation(IfcRepresentation inst);
    };


    class IfcLibrarySelect : public Select
    {
    public:
        IfcLibrarySelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLibrarySelect(Select* outer) : Select(outer) {}

        bool is_IfcLibraryReference() { return IsADBEntity("IfcLibraryReference"); }
        IfcLibraryReference get_IfcLibraryReference();
        void put_IfcLibraryReference(IfcLibraryReference inst);

        bool is_IfcLibraryInformation() { return IsADBEntity("IfcLibraryInformation"); }
        IfcLibraryInformation get_IfcLibraryInformation();
        void put_IfcLibraryInformation(IfcLibraryInformation inst);
    };


    class IfcLibrarySelect_get : public Select
    {
    public:
        IfcLibrarySelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLibrarySelect_get(Select* outer) : Select(outer) {}
        bool is_IfcLibraryReference() { return IsADBEntity("IfcLibraryReference"); }
        IfcLibraryReference get_IfcLibraryReference();
        bool is_IfcLibraryInformation() { return IsADBEntity("IfcLibraryInformation"); }
        IfcLibraryInformation get_IfcLibraryInformation();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcLibrarySelect_put : public Select
    {
    public:
        IfcLibrarySelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLibrarySelect_put(Select* outer) : Select(outer) {}
        void put_IfcLibraryReference(IfcLibraryReference inst);
        void put_IfcLibraryInformation(IfcLibraryInformation inst);
    };


    class IfcLightDistributionDataSourceSelect : public Select
    {
    public:
        IfcLightDistributionDataSourceSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLightDistributionDataSourceSelect(Select* outer) : Select(outer) {}

        bool is_IfcExternalReference() { return IsADBEntity("IfcExternalReference"); }
        IfcExternalReference get_IfcExternalReference();
        void put_IfcExternalReference(IfcExternalReference inst);

        bool is_IfcLightIntensityDistribution() { return IsADBEntity("IfcLightIntensityDistribution"); }
        IfcLightIntensityDistribution get_IfcLightIntensityDistribution();
        void put_IfcLightIntensityDistribution(IfcLightIntensityDistribution inst);
    };


    class IfcLightDistributionDataSourceSelect_get : public Select
    {
    public:
        IfcLightDistributionDataSourceSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLightDistributionDataSourceSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcExternalReference() { return IsADBEntity("IfcExternalReference"); }
        IfcExternalReference get_IfcExternalReference();
        bool is_IfcLightIntensityDistribution() { return IsADBEntity("IfcLightIntensityDistribution"); }
        IfcLightIntensityDistribution get_IfcLightIntensityDistribution();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcLightDistributionDataSourceSelect_put : public Select
    {
    public:
        IfcLightDistributionDataSourceSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcLightDistributionDataSourceSelect_put(Select* outer) : Select(outer) {}
        void put_IfcExternalReference(IfcExternalReference inst);
        void put_IfcLightIntensityDistribution(IfcLightIntensityDistribution inst);
    };


    class IfcMaterialSelect : public Select
    {
    public:
        IfcMaterialSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMaterialSelect(Select* outer) : Select(outer) {}

        bool is_IfcMaterial() { return IsADBEntity("IfcMaterial"); }
        IfcMaterial get_IfcMaterial();
        void put_IfcMaterial(IfcMaterial inst);

        bool is_IfcMaterialList() { return IsADBEntity("IfcMaterialList"); }
        IfcMaterialList get_IfcMaterialList();
        void put_IfcMaterialList(IfcMaterialList inst);

        bool is_IfcMaterialLayerSetUsage() { return IsADBEntity("IfcMaterialLayerSetUsage"); }
        IfcMaterialLayerSetUsage get_IfcMaterialLayerSetUsage();
        void put_IfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage inst);

        bool is_IfcMaterialLayerSet() { return IsADBEntity("IfcMaterialLayerSet"); }
        IfcMaterialLayerSet get_IfcMaterialLayerSet();
        void put_IfcMaterialLayerSet(IfcMaterialLayerSet inst);

        bool is_IfcMaterialLayer() { return IsADBEntity("IfcMaterialLayer"); }
        IfcMaterialLayer get_IfcMaterialLayer();
        void put_IfcMaterialLayer(IfcMaterialLayer inst);
    };


    class IfcMaterialSelect_get : public Select
    {
    public:
        IfcMaterialSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMaterialSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcMaterial() { return IsADBEntity("IfcMaterial"); }
        IfcMaterial get_IfcMaterial();
        bool is_IfcMaterialList() { return IsADBEntity("IfcMaterialList"); }
        IfcMaterialList get_IfcMaterialList();
        bool is_IfcMaterialLayerSetUsage() { return IsADBEntity("IfcMaterialLayerSetUsage"); }
        IfcMaterialLayerSetUsage get_IfcMaterialLayerSetUsage();
        bool is_IfcMaterialLayerSet() { return IsADBEntity("IfcMaterialLayerSet"); }
        IfcMaterialLayerSet get_IfcMaterialLayerSet();
        bool is_IfcMaterialLayer() { return IsADBEntity("IfcMaterialLayer"); }
        IfcMaterialLayer get_IfcMaterialLayer();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcMaterialSelect_put : public Select
    {
    public:
        IfcMaterialSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMaterialSelect_put(Select* outer) : Select(outer) {}
        void put_IfcMaterial(IfcMaterial inst);
        void put_IfcMaterialList(IfcMaterialList inst);
        void put_IfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage inst);
        void put_IfcMaterialLayerSet(IfcMaterialLayerSet inst);
        void put_IfcMaterialLayer(IfcMaterialLayer inst);
    };


    class IfcMeasureValue : public Select
    {
    public:
        IfcMeasureValue(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMeasureValue(Select* outer) : Select(outer) {}

        bool is_IfcVolumeMeasure() { return IsADBType("IFCVOLUMEMEASURE"); }
        Nullable<IfcVolumeMeasure> get_IfcVolumeMeasure() { return getSimpleValue<IfcVolumeMeasure>("IFCVOLUMEMEASURE", sdaiREAL); }
        void put_IfcVolumeMeasure(IfcVolumeMeasure value) { putSimpleValue("IFCVOLUMEMEASURE", sdaiREAL, value); }

        bool is_IfcTimeMeasure() { return IsADBType("IFCTIMEMEASURE"); }
        Nullable<IfcTimeMeasure> get_IfcTimeMeasure() { return getSimpleValue<IfcTimeMeasure>("IFCTIMEMEASURE", sdaiREAL); }
        void put_IfcTimeMeasure(IfcTimeMeasure value) { putSimpleValue("IFCTIMEMEASURE", sdaiREAL, value); }

        bool is_IfcThermodynamicTemperatureMeasure() { return IsADBType("IFCTHERMODYNAMICTEMPERATUREMEASURE"); }
        Nullable<IfcThermodynamicTemperatureMeasure> get_IfcThermodynamicTemperatureMeasure() { return getSimpleValue<IfcThermodynamicTemperatureMeasure>("IFCTHERMODYNAMICTEMPERATUREMEASURE", sdaiREAL); }
        void put_IfcThermodynamicTemperatureMeasure(IfcThermodynamicTemperatureMeasure value) { putSimpleValue("IFCTHERMODYNAMICTEMPERATUREMEASURE", sdaiREAL, value); }

        bool is_IfcSolidAngleMeasure() { return IsADBType("IFCSOLIDANGLEMEASURE"); }
        Nullable<IfcSolidAngleMeasure> get_IfcSolidAngleMeasure() { return getSimpleValue<IfcSolidAngleMeasure>("IFCSOLIDANGLEMEASURE", sdaiREAL); }
        void put_IfcSolidAngleMeasure(IfcSolidAngleMeasure value) { putSimpleValue("IFCSOLIDANGLEMEASURE", sdaiREAL, value); }

        bool is_IfcPositiveRatioMeasure() { return IsADBType("IFCPOSITIVERATIOMEASURE"); }
        Nullable<IfcPositiveRatioMeasure> get_IfcPositiveRatioMeasure() { return getSimpleValue<IfcPositiveRatioMeasure>("IFCPOSITIVERATIOMEASURE", sdaiREAL); }
        void put_IfcPositiveRatioMeasure(IfcPositiveRatioMeasure value) { putSimpleValue("IFCPOSITIVERATIOMEASURE", sdaiREAL, value); }

        bool is_IfcRatioMeasure() { return IsADBType("IFCRATIOMEASURE"); }
        Nullable<IfcRatioMeasure> get_IfcRatioMeasure() { return getSimpleValue<IfcRatioMeasure>("IFCRATIOMEASURE", sdaiREAL); }
        void put_IfcRatioMeasure(IfcRatioMeasure value) { putSimpleValue("IFCRATIOMEASURE", sdaiREAL, value); }

        bool is_IfcPositivePlaneAngleMeasure() { return IsADBType("IFCPOSITIVEPLANEANGLEMEASURE"); }
        Nullable<IfcPositivePlaneAngleMeasure> get_IfcPositivePlaneAngleMeasure() { return getSimpleValue<IfcPositivePlaneAngleMeasure>("IFCPOSITIVEPLANEANGLEMEASURE", sdaiREAL); }
        void put_IfcPositivePlaneAngleMeasure(IfcPositivePlaneAngleMeasure value) { putSimpleValue("IFCPOSITIVEPLANEANGLEMEASURE", sdaiREAL, value); }

        bool is_IfcPlaneAngleMeasure() { return IsADBType("IFCPLANEANGLEMEASURE"); }
        Nullable<IfcPlaneAngleMeasure> get_IfcPlaneAngleMeasure() { return getSimpleValue<IfcPlaneAngleMeasure>("IFCPLANEANGLEMEASURE", sdaiREAL); }
        void put_IfcPlaneAngleMeasure(IfcPlaneAngleMeasure value) { putSimpleValue("IFCPLANEANGLEMEASURE", sdaiREAL, value); }

        bool is_IfcParameterValue() { return IsADBType("IFCPARAMETERVALUE"); }
        Nullable<IfcParameterValue> get_IfcParameterValue() { return getSimpleValue<IfcParameterValue>("IFCPARAMETERVALUE", sdaiREAL); }
        void put_IfcParameterValue(IfcParameterValue value) { putSimpleValue("IFCPARAMETERVALUE", sdaiREAL, value); }

        bool is_IfcNumericMeasure() { return IsADBType("IFCNUMERICMEASURE"); }
        Nullable<IfcNumericMeasure> get_IfcNumericMeasure() { return getSimpleValue<IfcNumericMeasure>("IFCNUMERICMEASURE", sdaiREAL); }
        void put_IfcNumericMeasure(IfcNumericMeasure value) { putSimpleValue("IFCNUMERICMEASURE", sdaiREAL, value); }

        bool is_IfcMassMeasure() { return IsADBType("IFCMASSMEASURE"); }
        Nullable<IfcMassMeasure> get_IfcMassMeasure() { return getSimpleValue<IfcMassMeasure>("IFCMASSMEASURE", sdaiREAL); }
        void put_IfcMassMeasure(IfcMassMeasure value) { putSimpleValue("IFCMASSMEASURE", sdaiREAL, value); }

        bool is_IfcPositiveLengthMeasure() { return IsADBType("IFCPOSITIVELENGTHMEASURE"); }
        Nullable<IfcPositiveLengthMeasure> get_IfcPositiveLengthMeasure() { return getSimpleValue<IfcPositiveLengthMeasure>("IFCPOSITIVELENGTHMEASURE", sdaiREAL); }
        void put_IfcPositiveLengthMeasure(IfcPositiveLengthMeasure value) { putSimpleValue("IFCPOSITIVELENGTHMEASURE", sdaiREAL, value); }

        bool is_IfcLengthMeasure() { return IsADBType("IFCLENGTHMEASURE"); }
        Nullable<IfcLengthMeasure> get_IfcLengthMeasure() { return getSimpleValue<IfcLengthMeasure>("IFCLENGTHMEASURE", sdaiREAL); }
        void put_IfcLengthMeasure(IfcLengthMeasure value) { putSimpleValue("IFCLENGTHMEASURE", sdaiREAL, value); }

        bool is_IfcElectricCurrentMeasure() { return IsADBType("IFCELECTRICCURRENTMEASURE"); }
        Nullable<IfcElectricCurrentMeasure> get_IfcElectricCurrentMeasure() { return getSimpleValue<IfcElectricCurrentMeasure>("IFCELECTRICCURRENTMEASURE", sdaiREAL); }
        void put_IfcElectricCurrentMeasure(IfcElectricCurrentMeasure value) { putSimpleValue("IFCELECTRICCURRENTMEASURE", sdaiREAL, value); }

        bool is_IfcDescriptiveMeasure() { return IsADBType("IFCDESCRIPTIVEMEASURE"); }
        IfcDescriptiveMeasure get_IfcDescriptiveMeasure() { return getTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING); }
        void put_IfcDescriptiveMeasure(IfcDescriptiveMeasure value) { putTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING, value); }

        bool is_IfcCountMeasure() { return IsADBType("IFCCOUNTMEASURE"); }
        Nullable<IfcCountMeasure> get_IfcCountMeasure() { return getSimpleValue<IfcCountMeasure>("IFCCOUNTMEASURE", sdaiREAL); }
        void put_IfcCountMeasure(IfcCountMeasure value) { putSimpleValue("IFCCOUNTMEASURE", sdaiREAL, value); }

        bool is_IfcContextDependentMeasure() { return IsADBType("IFCCONTEXTDEPENDENTMEASURE"); }
        Nullable<IfcContextDependentMeasure> get_IfcContextDependentMeasure() { return getSimpleValue<IfcContextDependentMeasure>("IFCCONTEXTDEPENDENTMEASURE", sdaiREAL); }
        void put_IfcContextDependentMeasure(IfcContextDependentMeasure value) { putSimpleValue("IFCCONTEXTDEPENDENTMEASURE", sdaiREAL, value); }

        bool is_IfcAreaMeasure() { return IsADBType("IFCAREAMEASURE"); }
        Nullable<IfcAreaMeasure> get_IfcAreaMeasure() { return getSimpleValue<IfcAreaMeasure>("IFCAREAMEASURE", sdaiREAL); }
        void put_IfcAreaMeasure(IfcAreaMeasure value) { putSimpleValue("IFCAREAMEASURE", sdaiREAL, value); }

        bool is_IfcAmountOfSubstanceMeasure() { return IsADBType("IFCAMOUNTOFSUBSTANCEMEASURE"); }
        Nullable<IfcAmountOfSubstanceMeasure> get_IfcAmountOfSubstanceMeasure() { return getSimpleValue<IfcAmountOfSubstanceMeasure>("IFCAMOUNTOFSUBSTANCEMEASURE", sdaiREAL); }
        void put_IfcAmountOfSubstanceMeasure(IfcAmountOfSubstanceMeasure value) { putSimpleValue("IFCAMOUNTOFSUBSTANCEMEASURE", sdaiREAL, value); }

        bool is_IfcLuminousIntensityMeasure() { return IsADBType("IFCLUMINOUSINTENSITYMEASURE"); }
        Nullable<IfcLuminousIntensityMeasure> get_IfcLuminousIntensityMeasure() { return getSimpleValue<IfcLuminousIntensityMeasure>("IFCLUMINOUSINTENSITYMEASURE", sdaiREAL); }
        void put_IfcLuminousIntensityMeasure(IfcLuminousIntensityMeasure value) { putSimpleValue("IFCLUMINOUSINTENSITYMEASURE", sdaiREAL, value); }

        bool is_IfcNormalisedRatioMeasure() { return IsADBType("IFCNORMALISEDRATIOMEASURE"); }
        Nullable<IfcNormalisedRatioMeasure> get_IfcNormalisedRatioMeasure() { return getSimpleValue<IfcNormalisedRatioMeasure>("IFCNORMALISEDRATIOMEASURE", sdaiREAL); }
        void put_IfcNormalisedRatioMeasure(IfcNormalisedRatioMeasure value) { putSimpleValue("IFCNORMALISEDRATIOMEASURE", sdaiREAL, value); }

        bool is_IfcComplexNumber() { return IsADBType("IFCCOMPLEXNUMBER"); }

        //TList may be IfcComplexNumber or list of converible elements
        template <typename TList> void get_IfcComplexNumber(TList& lst) { SdaiAggr aggr = getAggrValue("IFCCOMPLEXNUMBER"); IfcComplexNumberSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

                //TList may be IfcComplexNumber or list of converible elements
        template <typename TList> void put_IfcComplexNumber(TList& lst) { IfcComplexNumberSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("IFCCOMPLEXNUMBER", aggr); }

                //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_IfcComplexNumber(TArrayElem arr[], size_t n) { IfcComplexNumber lst; ArrayToList(arr, n, lst); put_IfcComplexNumber(lst); }
    };


    class IfcMeasureValue_get : public Select
    {
    public:
        IfcMeasureValue_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMeasureValue_get(Select* outer) : Select(outer) {}
        bool is_IfcVolumeMeasure() { return IsADBType("IFCVOLUMEMEASURE"); }
        Nullable<IfcVolumeMeasure> get_IfcVolumeMeasure() { return getSimpleValue<IfcVolumeMeasure>("IFCVOLUMEMEASURE", sdaiREAL); }
        bool is_IfcTimeMeasure() { return IsADBType("IFCTIMEMEASURE"); }
        Nullable<IfcTimeMeasure> get_IfcTimeMeasure() { return getSimpleValue<IfcTimeMeasure>("IFCTIMEMEASURE", sdaiREAL); }
        bool is_IfcThermodynamicTemperatureMeasure() { return IsADBType("IFCTHERMODYNAMICTEMPERATUREMEASURE"); }
        Nullable<IfcThermodynamicTemperatureMeasure> get_IfcThermodynamicTemperatureMeasure() { return getSimpleValue<IfcThermodynamicTemperatureMeasure>("IFCTHERMODYNAMICTEMPERATUREMEASURE", sdaiREAL); }
        bool is_IfcSolidAngleMeasure() { return IsADBType("IFCSOLIDANGLEMEASURE"); }
        Nullable<IfcSolidAngleMeasure> get_IfcSolidAngleMeasure() { return getSimpleValue<IfcSolidAngleMeasure>("IFCSOLIDANGLEMEASURE", sdaiREAL); }
        bool is_IfcPositiveRatioMeasure() { return IsADBType("IFCPOSITIVERATIOMEASURE"); }
        Nullable<IfcPositiveRatioMeasure> get_IfcPositiveRatioMeasure() { return getSimpleValue<IfcPositiveRatioMeasure>("IFCPOSITIVERATIOMEASURE", sdaiREAL); }
        bool is_IfcRatioMeasure() { return IsADBType("IFCRATIOMEASURE"); }
        Nullable<IfcRatioMeasure> get_IfcRatioMeasure() { return getSimpleValue<IfcRatioMeasure>("IFCRATIOMEASURE", sdaiREAL); }
        bool is_IfcPositivePlaneAngleMeasure() { return IsADBType("IFCPOSITIVEPLANEANGLEMEASURE"); }
        Nullable<IfcPositivePlaneAngleMeasure> get_IfcPositivePlaneAngleMeasure() { return getSimpleValue<IfcPositivePlaneAngleMeasure>("IFCPOSITIVEPLANEANGLEMEASURE", sdaiREAL); }
        bool is_IfcPlaneAngleMeasure() { return IsADBType("IFCPLANEANGLEMEASURE"); }
        Nullable<IfcPlaneAngleMeasure> get_IfcPlaneAngleMeasure() { return getSimpleValue<IfcPlaneAngleMeasure>("IFCPLANEANGLEMEASURE", sdaiREAL); }
        bool is_IfcParameterValue() { return IsADBType("IFCPARAMETERVALUE"); }
        Nullable<IfcParameterValue> get_IfcParameterValue() { return getSimpleValue<IfcParameterValue>("IFCPARAMETERVALUE", sdaiREAL); }
        bool is_IfcNumericMeasure() { return IsADBType("IFCNUMERICMEASURE"); }
        Nullable<IfcNumericMeasure> get_IfcNumericMeasure() { return getSimpleValue<IfcNumericMeasure>("IFCNUMERICMEASURE", sdaiREAL); }
        bool is_IfcMassMeasure() { return IsADBType("IFCMASSMEASURE"); }
        Nullable<IfcMassMeasure> get_IfcMassMeasure() { return getSimpleValue<IfcMassMeasure>("IFCMASSMEASURE", sdaiREAL); }
        bool is_IfcPositiveLengthMeasure() { return IsADBType("IFCPOSITIVELENGTHMEASURE"); }
        Nullable<IfcPositiveLengthMeasure> get_IfcPositiveLengthMeasure() { return getSimpleValue<IfcPositiveLengthMeasure>("IFCPOSITIVELENGTHMEASURE", sdaiREAL); }
        bool is_IfcLengthMeasure() { return IsADBType("IFCLENGTHMEASURE"); }
        Nullable<IfcLengthMeasure> get_IfcLengthMeasure() { return getSimpleValue<IfcLengthMeasure>("IFCLENGTHMEASURE", sdaiREAL); }
        bool is_IfcElectricCurrentMeasure() { return IsADBType("IFCELECTRICCURRENTMEASURE"); }
        Nullable<IfcElectricCurrentMeasure> get_IfcElectricCurrentMeasure() { return getSimpleValue<IfcElectricCurrentMeasure>("IFCELECTRICCURRENTMEASURE", sdaiREAL); }
        bool is_IfcDescriptiveMeasure() { return IsADBType("IFCDESCRIPTIVEMEASURE"); }
        IfcDescriptiveMeasure get_IfcDescriptiveMeasure() { return getTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING); }
        bool is_IfcCountMeasure() { return IsADBType("IFCCOUNTMEASURE"); }
        Nullable<IfcCountMeasure> get_IfcCountMeasure() { return getSimpleValue<IfcCountMeasure>("IFCCOUNTMEASURE", sdaiREAL); }
        bool is_IfcContextDependentMeasure() { return IsADBType("IFCCONTEXTDEPENDENTMEASURE"); }
        Nullable<IfcContextDependentMeasure> get_IfcContextDependentMeasure() { return getSimpleValue<IfcContextDependentMeasure>("IFCCONTEXTDEPENDENTMEASURE", sdaiREAL); }
        bool is_IfcAreaMeasure() { return IsADBType("IFCAREAMEASURE"); }
        Nullable<IfcAreaMeasure> get_IfcAreaMeasure() { return getSimpleValue<IfcAreaMeasure>("IFCAREAMEASURE", sdaiREAL); }
        bool is_IfcAmountOfSubstanceMeasure() { return IsADBType("IFCAMOUNTOFSUBSTANCEMEASURE"); }
        Nullable<IfcAmountOfSubstanceMeasure> get_IfcAmountOfSubstanceMeasure() { return getSimpleValue<IfcAmountOfSubstanceMeasure>("IFCAMOUNTOFSUBSTANCEMEASURE", sdaiREAL); }
        bool is_IfcLuminousIntensityMeasure() { return IsADBType("IFCLUMINOUSINTENSITYMEASURE"); }
        Nullable<IfcLuminousIntensityMeasure> get_IfcLuminousIntensityMeasure() { return getSimpleValue<IfcLuminousIntensityMeasure>("IFCLUMINOUSINTENSITYMEASURE", sdaiREAL); }
        bool is_IfcNormalisedRatioMeasure() { return IsADBType("IFCNORMALISEDRATIOMEASURE"); }
        Nullable<IfcNormalisedRatioMeasure> get_IfcNormalisedRatioMeasure() { return getSimpleValue<IfcNormalisedRatioMeasure>("IFCNORMALISEDRATIOMEASURE", sdaiREAL); }
        bool is_IfcComplexNumber() { return IsADBType("IFCCOMPLEXNUMBER"); }

        //TList may be IfcComplexNumber or list of converible elements
        template <typename TList> void get_IfcComplexNumber(TList& lst) { SdaiAggr aggr = getAggrValue("IFCCOMPLEXNUMBER"); IfcComplexNumberSerializer<TList> sr; sr.FromSdaiAggr(lst, m_instance, aggr); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class IfcMeasureValue_put : public Select
    {
    public:
        IfcMeasureValue_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMeasureValue_put(Select* outer) : Select(outer) {}
        void put_IfcVolumeMeasure(IfcVolumeMeasure value) { putSimpleValue("IFCVOLUMEMEASURE", sdaiREAL, value); }
        void put_IfcTimeMeasure(IfcTimeMeasure value) { putSimpleValue("IFCTIMEMEASURE", sdaiREAL, value); }
        void put_IfcThermodynamicTemperatureMeasure(IfcThermodynamicTemperatureMeasure value) { putSimpleValue("IFCTHERMODYNAMICTEMPERATUREMEASURE", sdaiREAL, value); }
        void put_IfcSolidAngleMeasure(IfcSolidAngleMeasure value) { putSimpleValue("IFCSOLIDANGLEMEASURE", sdaiREAL, value); }
        void put_IfcPositiveRatioMeasure(IfcPositiveRatioMeasure value) { putSimpleValue("IFCPOSITIVERATIOMEASURE", sdaiREAL, value); }
        void put_IfcRatioMeasure(IfcRatioMeasure value) { putSimpleValue("IFCRATIOMEASURE", sdaiREAL, value); }
        void put_IfcPositivePlaneAngleMeasure(IfcPositivePlaneAngleMeasure value) { putSimpleValue("IFCPOSITIVEPLANEANGLEMEASURE", sdaiREAL, value); }
        void put_IfcPlaneAngleMeasure(IfcPlaneAngleMeasure value) { putSimpleValue("IFCPLANEANGLEMEASURE", sdaiREAL, value); }
        void put_IfcParameterValue(IfcParameterValue value) { putSimpleValue("IFCPARAMETERVALUE", sdaiREAL, value); }
        void put_IfcNumericMeasure(IfcNumericMeasure value) { putSimpleValue("IFCNUMERICMEASURE", sdaiREAL, value); }
        void put_IfcMassMeasure(IfcMassMeasure value) { putSimpleValue("IFCMASSMEASURE", sdaiREAL, value); }
        void put_IfcPositiveLengthMeasure(IfcPositiveLengthMeasure value) { putSimpleValue("IFCPOSITIVELENGTHMEASURE", sdaiREAL, value); }
        void put_IfcLengthMeasure(IfcLengthMeasure value) { putSimpleValue("IFCLENGTHMEASURE", sdaiREAL, value); }
        void put_IfcElectricCurrentMeasure(IfcElectricCurrentMeasure value) { putSimpleValue("IFCELECTRICCURRENTMEASURE", sdaiREAL, value); }
        void put_IfcDescriptiveMeasure(IfcDescriptiveMeasure value) { putTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING, value); }
        void put_IfcCountMeasure(IfcCountMeasure value) { putSimpleValue("IFCCOUNTMEASURE", sdaiREAL, value); }
        void put_IfcContextDependentMeasure(IfcContextDependentMeasure value) { putSimpleValue("IFCCONTEXTDEPENDENTMEASURE", sdaiREAL, value); }
        void put_IfcAreaMeasure(IfcAreaMeasure value) { putSimpleValue("IFCAREAMEASURE", sdaiREAL, value); }
        void put_IfcAmountOfSubstanceMeasure(IfcAmountOfSubstanceMeasure value) { putSimpleValue("IFCAMOUNTOFSUBSTANCEMEASURE", sdaiREAL, value); }
        void put_IfcLuminousIntensityMeasure(IfcLuminousIntensityMeasure value) { putSimpleValue("IFCLUMINOUSINTENSITYMEASURE", sdaiREAL, value); }
        void put_IfcNormalisedRatioMeasure(IfcNormalisedRatioMeasure value) { putSimpleValue("IFCNORMALISEDRATIOMEASURE", sdaiREAL, value); }

                //TList may be IfcComplexNumber or list of converible elements
        template <typename TList> void put_IfcComplexNumber(TList& lst) { IfcComplexNumberSerializer<TList> sr; SdaiAggr aggr = sr.ToSdaiAggr(lst, m_instance, NULL); putAggrValue("IFCCOMPLEXNUMBER", aggr); }

                //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_IfcComplexNumber(TArrayElem arr[], size_t n) { IfcComplexNumber lst; ArrayToList(arr, n, lst); put_IfcComplexNumber(lst); }
    };


    class IfcMetricValueSelect : public Select
    {
    public:
        IfcMetricValueSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMetricValueSelect(Select* outer) : Select(outer) {}

        IfcDateTimeSelect _IfcDateTimeSelect() { return IfcDateTimeSelect(this); }

        bool is_IfcMeasureWithUnit() { return IsADBEntity("IfcMeasureWithUnit"); }
        IfcMeasureWithUnit get_IfcMeasureWithUnit();
        void put_IfcMeasureWithUnit(IfcMeasureWithUnit inst);

        bool is_IfcTable() { return IsADBEntity("IfcTable"); }
        IfcTable get_IfcTable();
        void put_IfcTable(IfcTable inst);

        bool is_IfcText() { return IsADBType("IFCTEXT"); }
        IfcText get_IfcText() { return getTextValue("IFCTEXT", sdaiSTRING); }
        void put_IfcText(IfcText value) { putTextValue("IFCTEXT", sdaiSTRING, value); }

        bool is_IfcTimeSeries() { return IsADBEntity("IfcTimeSeries"); }
        IfcTimeSeries get_IfcTimeSeries();
        void put_IfcTimeSeries(IfcTimeSeries inst);

        bool is_IfcCostValue() { return IsADBEntity("IfcCostValue"); }
        IfcCostValue get_IfcCostValue();
        void put_IfcCostValue(IfcCostValue inst);
    };


    class IfcMetricValueSelect_get : public Select
    {
    public:
        IfcMetricValueSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMetricValueSelect_get(Select* outer) : Select(outer) {}
        IfcDateTimeSelect_get get_IfcDateTimeSelect() { return IfcDateTimeSelect_get(this); }
        bool is_IfcMeasureWithUnit() { return IsADBEntity("IfcMeasureWithUnit"); }
        IfcMeasureWithUnit get_IfcMeasureWithUnit();
        bool is_IfcTable() { return IsADBEntity("IfcTable"); }
        IfcTable get_IfcTable();
        bool is_IfcText() { return IsADBType("IFCTEXT"); }
        IfcText get_IfcText() { return getTextValue("IFCTEXT", sdaiSTRING); }
        bool is_IfcTimeSeries() { return IsADBEntity("IfcTimeSeries"); }
        IfcTimeSeries get_IfcTimeSeries();
        bool is_IfcCostValue() { return IsADBEntity("IfcCostValue"); }
        IfcCostValue get_IfcCostValue();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class IfcMetricValueSelect_put : public Select
    {
    public:
        IfcMetricValueSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcMetricValueSelect_put(Select* outer) : Select(outer) {}
        IfcDateTimeSelect_put put_IfcDateTimeSelect() { return IfcDateTimeSelect_put(this); }
        void put_IfcMeasureWithUnit(IfcMeasureWithUnit inst);
        void put_IfcTable(IfcTable inst);
        void put_IfcText(IfcText value) { putTextValue("IFCTEXT", sdaiSTRING, value); }
        void put_IfcTimeSeries(IfcTimeSeries inst);
        void put_IfcCostValue(IfcCostValue inst);
    };


    class IfcObjectReferenceSelect : public Select
    {
    public:
        IfcObjectReferenceSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcObjectReferenceSelect(Select* outer) : Select(outer) {}

        bool is_IfcMaterial() { return IsADBEntity("IfcMaterial"); }
        IfcMaterial get_IfcMaterial();
        void put_IfcMaterial(IfcMaterial inst);

        bool is_IfcPerson() { return IsADBEntity("IfcPerson"); }
        IfcPerson get_IfcPerson();
        void put_IfcPerson(IfcPerson inst);

        bool is_IfcDateAndTime() { return IsADBEntity("IfcDateAndTime"); }
        IfcDateAndTime get_IfcDateAndTime();
        void put_IfcDateAndTime(IfcDateAndTime inst);

        bool is_IfcMaterialList() { return IsADBEntity("IfcMaterialList"); }
        IfcMaterialList get_IfcMaterialList();
        void put_IfcMaterialList(IfcMaterialList inst);

        bool is_IfcOrganization() { return IsADBEntity("IfcOrganization"); }
        IfcOrganization get_IfcOrganization();
        void put_IfcOrganization(IfcOrganization inst);

        bool is_IfcCalendarDate() { return IsADBEntity("IfcCalendarDate"); }
        IfcCalendarDate get_IfcCalendarDate();
        void put_IfcCalendarDate(IfcCalendarDate inst);

        bool is_IfcLocalTime() { return IsADBEntity("IfcLocalTime"); }
        IfcLocalTime get_IfcLocalTime();
        void put_IfcLocalTime(IfcLocalTime inst);

        bool is_IfcPersonAndOrganization() { return IsADBEntity("IfcPersonAndOrganization"); }
        IfcPersonAndOrganization get_IfcPersonAndOrganization();
        void put_IfcPersonAndOrganization(IfcPersonAndOrganization inst);

        bool is_IfcMaterialLayer() { return IsADBEntity("IfcMaterialLayer"); }
        IfcMaterialLayer get_IfcMaterialLayer();
        void put_IfcMaterialLayer(IfcMaterialLayer inst);

        bool is_IfcExternalReference() { return IsADBEntity("IfcExternalReference"); }
        IfcExternalReference get_IfcExternalReference();
        void put_IfcExternalReference(IfcExternalReference inst);

        bool is_IfcTimeSeries() { return IsADBEntity("IfcTimeSeries"); }
        IfcTimeSeries get_IfcTimeSeries();
        void put_IfcTimeSeries(IfcTimeSeries inst);

        bool is_IfcAddress() { return IsADBEntity("IfcAddress"); }
        IfcAddress get_IfcAddress();
        void put_IfcAddress(IfcAddress inst);

        bool is_IfcAppliedValue() { return IsADBEntity("IfcAppliedValue"); }
        IfcAppliedValue get_IfcAppliedValue();
        void put_IfcAppliedValue(IfcAppliedValue inst);
    };


    class IfcObjectReferenceSelect_get : public Select
    {
    public:
        IfcObjectReferenceSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcObjectReferenceSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcMaterial() { return IsADBEntity("IfcMaterial"); }
        IfcMaterial get_IfcMaterial();
        bool is_IfcPerson() { return IsADBEntity("IfcPerson"); }
        IfcPerson get_IfcPerson();
        bool is_IfcDateAndTime() { return IsADBEntity("IfcDateAndTime"); }
        IfcDateAndTime get_IfcDateAndTime();
        bool is_IfcMaterialList() { return IsADBEntity("IfcMaterialList"); }
        IfcMaterialList get_IfcMaterialList();
        bool is_IfcOrganization() { return IsADBEntity("IfcOrganization"); }
        IfcOrganization get_IfcOrganization();
        bool is_IfcCalendarDate() { return IsADBEntity("IfcCalendarDate"); }
        IfcCalendarDate get_IfcCalendarDate();
        bool is_IfcLocalTime() { return IsADBEntity("IfcLocalTime"); }
        IfcLocalTime get_IfcLocalTime();
        bool is_IfcPersonAndOrganization() { return IsADBEntity("IfcPersonAndOrganization"); }
        IfcPersonAndOrganization get_IfcPersonAndOrganization();
        bool is_IfcMaterialLayer() { return IsADBEntity("IfcMaterialLayer"); }
        IfcMaterialLayer get_IfcMaterialLayer();
        bool is_IfcExternalReference() { return IsADBEntity("IfcExternalReference"); }
        IfcExternalReference get_IfcExternalReference();
        bool is_IfcTimeSeries() { return IsADBEntity("IfcTimeSeries"); }
        IfcTimeSeries get_IfcTimeSeries();
        bool is_IfcAddress() { return IsADBEntity("IfcAddress"); }
        IfcAddress get_IfcAddress();
        bool is_IfcAppliedValue() { return IsADBEntity("IfcAppliedValue"); }
        IfcAppliedValue get_IfcAppliedValue();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcObjectReferenceSelect_put : public Select
    {
    public:
        IfcObjectReferenceSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcObjectReferenceSelect_put(Select* outer) : Select(outer) {}
        void put_IfcMaterial(IfcMaterial inst);
        void put_IfcPerson(IfcPerson inst);
        void put_IfcDateAndTime(IfcDateAndTime inst);
        void put_IfcMaterialList(IfcMaterialList inst);
        void put_IfcOrganization(IfcOrganization inst);
        void put_IfcCalendarDate(IfcCalendarDate inst);
        void put_IfcLocalTime(IfcLocalTime inst);
        void put_IfcPersonAndOrganization(IfcPersonAndOrganization inst);
        void put_IfcMaterialLayer(IfcMaterialLayer inst);
        void put_IfcExternalReference(IfcExternalReference inst);
        void put_IfcTimeSeries(IfcTimeSeries inst);
        void put_IfcAddress(IfcAddress inst);
        void put_IfcAppliedValue(IfcAppliedValue inst);
    };


    class IfcOrientationSelect : public Select
    {
    public:
        IfcOrientationSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcOrientationSelect(Select* outer) : Select(outer) {}

        bool is_IfcPlaneAngleMeasure() { return IsADBType("IFCPLANEANGLEMEASURE"); }
        Nullable<IfcPlaneAngleMeasure> get_IfcPlaneAngleMeasure() { return getSimpleValue<IfcPlaneAngleMeasure>("IFCPLANEANGLEMEASURE", sdaiREAL); }
        void put_IfcPlaneAngleMeasure(IfcPlaneAngleMeasure value) { putSimpleValue("IFCPLANEANGLEMEASURE", sdaiREAL, value); }

        bool is_IfcDirection() { return IsADBEntity("IfcDirection"); }
        IfcDirection get_IfcDirection();
        void put_IfcDirection(IfcDirection inst);
    };


    class IfcOrientationSelect_get : public Select
    {
    public:
        IfcOrientationSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcOrientationSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcPlaneAngleMeasure() { return IsADBType("IFCPLANEANGLEMEASURE"); }
        Nullable<IfcPlaneAngleMeasure> get_IfcPlaneAngleMeasure() { return getSimpleValue<IfcPlaneAngleMeasure>("IFCPLANEANGLEMEASURE", sdaiREAL); }
        bool is_IfcDirection() { return IsADBEntity("IfcDirection"); }
        IfcDirection get_IfcDirection();

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcOrientationSelect_put : public Select
    {
    public:
        IfcOrientationSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcOrientationSelect_put(Select* outer) : Select(outer) {}
        void put_IfcPlaneAngleMeasure(IfcPlaneAngleMeasure value) { putSimpleValue("IFCPLANEANGLEMEASURE", sdaiREAL, value); }
        void put_IfcDirection(IfcDirection inst);
    };


    class IfcPointOrVertexPoint : public Select
    {
    public:
        IfcPointOrVertexPoint(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcPointOrVertexPoint(Select* outer) : Select(outer) {}

        bool is_IfcPoint() { return IsADBEntity("IfcPoint"); }
        IfcPoint get_IfcPoint();
        void put_IfcPoint(IfcPoint inst);

        bool is_IfcVertexPoint() { return IsADBEntity("IfcVertexPoint"); }
        IfcVertexPoint get_IfcVertexPoint();
        void put_IfcVertexPoint(IfcVertexPoint inst);
    };


    class IfcPointOrVertexPoint_get : public Select
    {
    public:
        IfcPointOrVertexPoint_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcPointOrVertexPoint_get(Select* outer) : Select(outer) {}
        bool is_IfcPoint() { return IsADBEntity("IfcPoint"); }
        IfcPoint get_IfcPoint();
        bool is_IfcVertexPoint() { return IsADBEntity("IfcVertexPoint"); }
        IfcVertexPoint get_IfcVertexPoint();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcPointOrVertexPoint_put : public Select
    {
    public:
        IfcPointOrVertexPoint_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcPointOrVertexPoint_put(Select* outer) : Select(outer) {}
        void put_IfcPoint(IfcPoint inst);
        void put_IfcVertexPoint(IfcVertexPoint inst);
    };


    class IfcPresentationStyleSelect : public Select
    {
    public:
        IfcPresentationStyleSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcPresentationStyleSelect(Select* outer) : Select(outer) {}

        bool is_IfcNullStyle() { return IsADBType("IFCNULLSTYLE"); }
        Nullable<IfcNullStyle> get_IfcNullStyle() { int v = getEnumerationValue("IFCNULLSTYLE", IfcNullStyle_); if (v >= 0) return (IfcNullStyle) v; else return Nullable<IfcNullStyle>(); }
        void put_IfcNullStyle(IfcNullStyle value) { TextValue val = IfcNullStyle_[(int) value]; putEnumerationValue("IFCNULLSTYLE", val); }

        bool is_IfcCurveStyle() { return IsADBEntity("IfcCurveStyle"); }
        IfcCurveStyle get_IfcCurveStyle();
        void put_IfcCurveStyle(IfcCurveStyle inst);

        bool is_IfcSymbolStyle() { return IsADBEntity("IfcSymbolStyle"); }
        IfcSymbolStyle get_IfcSymbolStyle();
        void put_IfcSymbolStyle(IfcSymbolStyle inst);

        bool is_IfcFillAreaStyle() { return IsADBEntity("IfcFillAreaStyle"); }
        IfcFillAreaStyle get_IfcFillAreaStyle();
        void put_IfcFillAreaStyle(IfcFillAreaStyle inst);

        bool is_IfcTextStyle() { return IsADBEntity("IfcTextStyle"); }
        IfcTextStyle get_IfcTextStyle();
        void put_IfcTextStyle(IfcTextStyle inst);

        bool is_IfcSurfaceStyle() { return IsADBEntity("IfcSurfaceStyle"); }
        IfcSurfaceStyle get_IfcSurfaceStyle();
        void put_IfcSurfaceStyle(IfcSurfaceStyle inst);
    };


    class IfcPresentationStyleSelect_get : public Select
    {
    public:
        IfcPresentationStyleSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcPresentationStyleSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcNullStyle() { return IsADBType("IFCNULLSTYLE"); }
        Nullable<IfcNullStyle> get_IfcNullStyle() { int v = getEnumerationValue("IFCNULLSTYLE", IfcNullStyle_); if (v >= 0) return (IfcNullStyle) v; else return Nullable<IfcNullStyle>(); }
        bool is_IfcCurveStyle() { return IsADBEntity("IfcCurveStyle"); }
        IfcCurveStyle get_IfcCurveStyle();
        bool is_IfcSymbolStyle() { return IsADBEntity("IfcSymbolStyle"); }
        IfcSymbolStyle get_IfcSymbolStyle();
        bool is_IfcFillAreaStyle() { return IsADBEntity("IfcFillAreaStyle"); }
        IfcFillAreaStyle get_IfcFillAreaStyle();
        bool is_IfcTextStyle() { return IsADBEntity("IfcTextStyle"); }
        IfcTextStyle get_IfcTextStyle();
        bool is_IfcSurfaceStyle() { return IsADBEntity("IfcSurfaceStyle"); }
        IfcSurfaceStyle get_IfcSurfaceStyle();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcPresentationStyleSelect_put : public Select
    {
    public:
        IfcPresentationStyleSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcPresentationStyleSelect_put(Select* outer) : Select(outer) {}
        void put_IfcNullStyle(IfcNullStyle value) { TextValue val = IfcNullStyle_[(int) value]; putEnumerationValue("IFCNULLSTYLE", val); }
        void put_IfcCurveStyle(IfcCurveStyle inst);
        void put_IfcSymbolStyle(IfcSymbolStyle inst);
        void put_IfcFillAreaStyle(IfcFillAreaStyle inst);
        void put_IfcTextStyle(IfcTextStyle inst);
        void put_IfcSurfaceStyle(IfcSurfaceStyle inst);
    };


    class IfcShell : public Select
    {
    public:
        IfcShell(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcShell(Select* outer) : Select(outer) {}

        bool is_IfcClosedShell() { return IsADBEntity("IfcClosedShell"); }
        IfcClosedShell get_IfcClosedShell();
        void put_IfcClosedShell(IfcClosedShell inst);

        bool is_IfcOpenShell() { return IsADBEntity("IfcOpenShell"); }
        IfcOpenShell get_IfcOpenShell();
        void put_IfcOpenShell(IfcOpenShell inst);
    };


    class IfcShell_get : public Select
    {
    public:
        IfcShell_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcShell_get(Select* outer) : Select(outer) {}
        bool is_IfcClosedShell() { return IsADBEntity("IfcClosedShell"); }
        IfcClosedShell get_IfcClosedShell();
        bool is_IfcOpenShell() { return IsADBEntity("IfcOpenShell"); }
        IfcOpenShell get_IfcOpenShell();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcShell_put : public Select
    {
    public:
        IfcShell_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcShell_put(Select* outer) : Select(outer) {}
        void put_IfcClosedShell(IfcClosedShell inst);
        void put_IfcOpenShell(IfcOpenShell inst);
    };


    class IfcSimpleValue : public Select
    {
    public:
        IfcSimpleValue(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSimpleValue(Select* outer) : Select(outer) {}

        bool is_IfcInteger() { return IsADBType("IFCINTEGER"); }
        Nullable<IfcInteger> get_IfcInteger() { return getSimpleValue<IfcInteger>("IFCINTEGER", sdaiINTEGER); }
        void put_IfcInteger(IfcInteger value) { putSimpleValue("IFCINTEGER", sdaiINTEGER, value); }

        bool is_IfcReal() { return IsADBType("IFCREAL"); }
        Nullable<IfcReal> get_IfcReal() { return getSimpleValue<IfcReal>("IFCREAL", sdaiREAL); }
        void put_IfcReal(IfcReal value) { putSimpleValue("IFCREAL", sdaiREAL, value); }

        bool is_IfcBoolean() { return IsADBType("IFCBOOLEAN"); }
        Nullable<IfcBoolean> get_IfcBoolean() { return getSimpleValue<IfcBoolean>("IFCBOOLEAN", sdaiBOOLEAN); }
        void put_IfcBoolean(IfcBoolean value) { putSimpleValue("IFCBOOLEAN", sdaiBOOLEAN, value); }

        bool is_IfcIdentifier() { return IsADBType("IFCIDENTIFIER"); }
        IfcIdentifier get_IfcIdentifier() { return getTextValue("IFCIDENTIFIER", sdaiSTRING); }
        void put_IfcIdentifier(IfcIdentifier value) { putTextValue("IFCIDENTIFIER", sdaiSTRING, value); }

        bool is_IfcText() { return IsADBType("IFCTEXT"); }
        IfcText get_IfcText() { return getTextValue("IFCTEXT", sdaiSTRING); }
        void put_IfcText(IfcText value) { putTextValue("IFCTEXT", sdaiSTRING, value); }

        bool is_IfcLabel() { return IsADBType("IFCLABEL"); }
        IfcLabel get_IfcLabel() { return getTextValue("IFCLABEL", sdaiSTRING); }
        void put_IfcLabel(IfcLabel value) { putTextValue("IFCLABEL", sdaiSTRING, value); }

        bool is_IfcLogical() { return IsADBType("IFCLOGICAL"); }
        Nullable<IfcLogical> get_IfcLogical() { int v = getEnumerationValue("IFCLOGICAL", LOGICAL_VALUE_); if (v >= 0) return (IfcLogical) v; else return Nullable<IfcLogical>(); }
        void put_IfcLogical(IfcLogical value) { TextValue val = LOGICAL_VALUE_[(int) value]; putEnumerationValue("IFCLOGICAL", val); }
    };


    class IfcSimpleValue_get : public Select
    {
    public:
        IfcSimpleValue_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSimpleValue_get(Select* outer) : Select(outer) {}
        bool is_IfcInteger() { return IsADBType("IFCINTEGER"); }
        Nullable<IfcInteger> get_IfcInteger() { return getSimpleValue<IfcInteger>("IFCINTEGER", sdaiINTEGER); }
        bool is_IfcReal() { return IsADBType("IFCREAL"); }
        Nullable<IfcReal> get_IfcReal() { return getSimpleValue<IfcReal>("IFCREAL", sdaiREAL); }
        bool is_IfcBoolean() { return IsADBType("IFCBOOLEAN"); }
        Nullable<IfcBoolean> get_IfcBoolean() { return getSimpleValue<IfcBoolean>("IFCBOOLEAN", sdaiBOOLEAN); }
        bool is_IfcIdentifier() { return IsADBType("IFCIDENTIFIER"); }
        IfcIdentifier get_IfcIdentifier() { return getTextValue("IFCIDENTIFIER", sdaiSTRING); }
        bool is_IfcText() { return IsADBType("IFCTEXT"); }
        IfcText get_IfcText() { return getTextValue("IFCTEXT", sdaiSTRING); }
        bool is_IfcLabel() { return IsADBType("IFCLABEL"); }
        IfcLabel get_IfcLabel() { return getTextValue("IFCLABEL", sdaiSTRING); }
        bool is_IfcLogical() { return IsADBType("IFCLOGICAL"); }
        Nullable<IfcLogical> get_IfcLogical() { int v = getEnumerationValue("IFCLOGICAL", LOGICAL_VALUE_); if (v >= 0) return (IfcLogical) v; else return Nullable<IfcLogical>(); }

        Nullable<IntValue> as_int() { IntValue val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        Nullable<bool> as_bool() { bool val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class IfcSimpleValue_put : public Select
    {
    public:
        IfcSimpleValue_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSimpleValue_put(Select* outer) : Select(outer) {}
        void put_IfcInteger(IfcInteger value) { putSimpleValue("IFCINTEGER", sdaiINTEGER, value); }
        void put_IfcReal(IfcReal value) { putSimpleValue("IFCREAL", sdaiREAL, value); }
        void put_IfcBoolean(IfcBoolean value) { putSimpleValue("IFCBOOLEAN", sdaiBOOLEAN, value); }
        void put_IfcIdentifier(IfcIdentifier value) { putTextValue("IFCIDENTIFIER", sdaiSTRING, value); }
        void put_IfcText(IfcText value) { putTextValue("IFCTEXT", sdaiSTRING, value); }
        void put_IfcLabel(IfcLabel value) { putTextValue("IFCLABEL", sdaiSTRING, value); }
        void put_IfcLogical(IfcLogical value) { TextValue val = LOGICAL_VALUE_[(int) value]; putEnumerationValue("IFCLOGICAL", val); }
    };


    class IfcSizeSelect : public Select
    {
    public:
        IfcSizeSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSizeSelect(Select* outer) : Select(outer) {}

        bool is_IfcRatioMeasure() { return IsADBType("IFCRATIOMEASURE"); }
        Nullable<IfcRatioMeasure> get_IfcRatioMeasure() { return getSimpleValue<IfcRatioMeasure>("IFCRATIOMEASURE", sdaiREAL); }
        void put_IfcRatioMeasure(IfcRatioMeasure value) { putSimpleValue("IFCRATIOMEASURE", sdaiREAL, value); }

        bool is_IfcLengthMeasure() { return IsADBType("IFCLENGTHMEASURE"); }
        Nullable<IfcLengthMeasure> get_IfcLengthMeasure() { return getSimpleValue<IfcLengthMeasure>("IFCLENGTHMEASURE", sdaiREAL); }
        void put_IfcLengthMeasure(IfcLengthMeasure value) { putSimpleValue("IFCLENGTHMEASURE", sdaiREAL, value); }

        bool is_IfcDescriptiveMeasure() { return IsADBType("IFCDESCRIPTIVEMEASURE"); }
        IfcDescriptiveMeasure get_IfcDescriptiveMeasure() { return getTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING); }
        void put_IfcDescriptiveMeasure(IfcDescriptiveMeasure value) { putTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING, value); }

        bool is_IfcPositiveLengthMeasure() { return IsADBType("IFCPOSITIVELENGTHMEASURE"); }
        Nullable<IfcPositiveLengthMeasure> get_IfcPositiveLengthMeasure() { return getSimpleValue<IfcPositiveLengthMeasure>("IFCPOSITIVELENGTHMEASURE", sdaiREAL); }
        void put_IfcPositiveLengthMeasure(IfcPositiveLengthMeasure value) { putSimpleValue("IFCPOSITIVELENGTHMEASURE", sdaiREAL, value); }

        bool is_IfcNormalisedRatioMeasure() { return IsADBType("IFCNORMALISEDRATIOMEASURE"); }
        Nullable<IfcNormalisedRatioMeasure> get_IfcNormalisedRatioMeasure() { return getSimpleValue<IfcNormalisedRatioMeasure>("IFCNORMALISEDRATIOMEASURE", sdaiREAL); }
        void put_IfcNormalisedRatioMeasure(IfcNormalisedRatioMeasure value) { putSimpleValue("IFCNORMALISEDRATIOMEASURE", sdaiREAL, value); }

        bool is_IfcPositiveRatioMeasure() { return IsADBType("IFCPOSITIVERATIOMEASURE"); }
        Nullable<IfcPositiveRatioMeasure> get_IfcPositiveRatioMeasure() { return getSimpleValue<IfcPositiveRatioMeasure>("IFCPOSITIVERATIOMEASURE", sdaiREAL); }
        void put_IfcPositiveRatioMeasure(IfcPositiveRatioMeasure value) { putSimpleValue("IFCPOSITIVERATIOMEASURE", sdaiREAL, value); }
    };


    class IfcSizeSelect_get : public Select
    {
    public:
        IfcSizeSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSizeSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcRatioMeasure() { return IsADBType("IFCRATIOMEASURE"); }
        Nullable<IfcRatioMeasure> get_IfcRatioMeasure() { return getSimpleValue<IfcRatioMeasure>("IFCRATIOMEASURE", sdaiREAL); }
        bool is_IfcLengthMeasure() { return IsADBType("IFCLENGTHMEASURE"); }
        Nullable<IfcLengthMeasure> get_IfcLengthMeasure() { return getSimpleValue<IfcLengthMeasure>("IFCLENGTHMEASURE", sdaiREAL); }
        bool is_IfcDescriptiveMeasure() { return IsADBType("IFCDESCRIPTIVEMEASURE"); }
        IfcDescriptiveMeasure get_IfcDescriptiveMeasure() { return getTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING); }
        bool is_IfcPositiveLengthMeasure() { return IsADBType("IFCPOSITIVELENGTHMEASURE"); }
        Nullable<IfcPositiveLengthMeasure> get_IfcPositiveLengthMeasure() { return getSimpleValue<IfcPositiveLengthMeasure>("IFCPOSITIVELENGTHMEASURE", sdaiREAL); }
        bool is_IfcNormalisedRatioMeasure() { return IsADBType("IFCNORMALISEDRATIOMEASURE"); }
        Nullable<IfcNormalisedRatioMeasure> get_IfcNormalisedRatioMeasure() { return getSimpleValue<IfcNormalisedRatioMeasure>("IFCNORMALISEDRATIOMEASURE", sdaiREAL); }
        bool is_IfcPositiveRatioMeasure() { return IsADBType("IFCPOSITIVERATIOMEASURE"); }
        Nullable<IfcPositiveRatioMeasure> get_IfcPositiveRatioMeasure() { return getSimpleValue<IfcPositiveRatioMeasure>("IFCPOSITIVERATIOMEASURE", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
    };


    class IfcSizeSelect_put : public Select
    {
    public:
        IfcSizeSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSizeSelect_put(Select* outer) : Select(outer) {}
        void put_IfcRatioMeasure(IfcRatioMeasure value) { putSimpleValue("IFCRATIOMEASURE", sdaiREAL, value); }
        void put_IfcLengthMeasure(IfcLengthMeasure value) { putSimpleValue("IFCLENGTHMEASURE", sdaiREAL, value); }
        void put_IfcDescriptiveMeasure(IfcDescriptiveMeasure value) { putTextValue("IFCDESCRIPTIVEMEASURE", sdaiSTRING, value); }
        void put_IfcPositiveLengthMeasure(IfcPositiveLengthMeasure value) { putSimpleValue("IFCPOSITIVELENGTHMEASURE", sdaiREAL, value); }
        void put_IfcNormalisedRatioMeasure(IfcNormalisedRatioMeasure value) { putSimpleValue("IFCNORMALISEDRATIOMEASURE", sdaiREAL, value); }
        void put_IfcPositiveRatioMeasure(IfcPositiveRatioMeasure value) { putSimpleValue("IFCPOSITIVERATIOMEASURE", sdaiREAL, value); }
    };


    class IfcSpecularHighlightSelect : public Select
    {
    public:
        IfcSpecularHighlightSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSpecularHighlightSelect(Select* outer) : Select(outer) {}

        bool is_IfcSpecularExponent() { return IsADBType("IFCSPECULAREXPONENT"); }
        Nullable<IfcSpecularExponent> get_IfcSpecularExponent() { return getSimpleValue<IfcSpecularExponent>("IFCSPECULAREXPONENT", sdaiREAL); }
        void put_IfcSpecularExponent(IfcSpecularExponent value) { putSimpleValue("IFCSPECULAREXPONENT", sdaiREAL, value); }

        bool is_IfcSpecularRoughness() { return IsADBType("IFCSPECULARROUGHNESS"); }
        Nullable<IfcSpecularRoughness> get_IfcSpecularRoughness() { return getSimpleValue<IfcSpecularRoughness>("IFCSPECULARROUGHNESS", sdaiREAL); }
        void put_IfcSpecularRoughness(IfcSpecularRoughness value) { putSimpleValue("IFCSPECULARROUGHNESS", sdaiREAL, value); }
    };


    class IfcSpecularHighlightSelect_get : public Select
    {
    public:
        IfcSpecularHighlightSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSpecularHighlightSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcSpecularExponent() { return IsADBType("IFCSPECULAREXPONENT"); }
        Nullable<IfcSpecularExponent> get_IfcSpecularExponent() { return getSimpleValue<IfcSpecularExponent>("IFCSPECULAREXPONENT", sdaiREAL); }
        bool is_IfcSpecularRoughness() { return IsADBType("IFCSPECULARROUGHNESS"); }
        Nullable<IfcSpecularRoughness> get_IfcSpecularRoughness() { return getSimpleValue<IfcSpecularRoughness>("IFCSPECULARROUGHNESS", sdaiREAL); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class IfcSpecularHighlightSelect_put : public Select
    {
    public:
        IfcSpecularHighlightSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSpecularHighlightSelect_put(Select* outer) : Select(outer) {}
        void put_IfcSpecularExponent(IfcSpecularExponent value) { putSimpleValue("IFCSPECULAREXPONENT", sdaiREAL, value); }
        void put_IfcSpecularRoughness(IfcSpecularRoughness value) { putSimpleValue("IFCSPECULARROUGHNESS", sdaiREAL, value); }
    };


    class IfcStructuralActivityAssignmentSelect : public Select
    {
    public:
        IfcStructuralActivityAssignmentSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcStructuralActivityAssignmentSelect(Select* outer) : Select(outer) {}

        bool is_IfcStructuralItem() { return IsADBEntity("IfcStructuralItem"); }
        IfcStructuralItem get_IfcStructuralItem();
        void put_IfcStructuralItem(IfcStructuralItem inst);

        bool is_IfcElement() { return IsADBEntity("IfcElement"); }
        IfcElement get_IfcElement();
        void put_IfcElement(IfcElement inst);
    };


    class IfcStructuralActivityAssignmentSelect_get : public Select
    {
    public:
        IfcStructuralActivityAssignmentSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcStructuralActivityAssignmentSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcStructuralItem() { return IsADBEntity("IfcStructuralItem"); }
        IfcStructuralItem get_IfcStructuralItem();
        bool is_IfcElement() { return IsADBEntity("IfcElement"); }
        IfcElement get_IfcElement();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcStructuralActivityAssignmentSelect_put : public Select
    {
    public:
        IfcStructuralActivityAssignmentSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcStructuralActivityAssignmentSelect_put(Select* outer) : Select(outer) {}
        void put_IfcStructuralItem(IfcStructuralItem inst);
        void put_IfcElement(IfcElement inst);
    };


    class IfcSurfaceOrFaceSurface : public Select
    {
    public:
        IfcSurfaceOrFaceSurface(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSurfaceOrFaceSurface(Select* outer) : Select(outer) {}

        bool is_IfcSurface() { return IsADBEntity("IfcSurface"); }
        IfcSurface get_IfcSurface();
        void put_IfcSurface(IfcSurface inst);

        bool is_IfcFaceSurface() { return IsADBEntity("IfcFaceSurface"); }
        IfcFaceSurface get_IfcFaceSurface();
        void put_IfcFaceSurface(IfcFaceSurface inst);

        bool is_IfcFaceBasedSurfaceModel() { return IsADBEntity("IfcFaceBasedSurfaceModel"); }
        IfcFaceBasedSurfaceModel get_IfcFaceBasedSurfaceModel();
        void put_IfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel inst);
    };


    class IfcSurfaceOrFaceSurface_get : public Select
    {
    public:
        IfcSurfaceOrFaceSurface_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSurfaceOrFaceSurface_get(Select* outer) : Select(outer) {}
        bool is_IfcSurface() { return IsADBEntity("IfcSurface"); }
        IfcSurface get_IfcSurface();
        bool is_IfcFaceSurface() { return IsADBEntity("IfcFaceSurface"); }
        IfcFaceSurface get_IfcFaceSurface();
        bool is_IfcFaceBasedSurfaceModel() { return IsADBEntity("IfcFaceBasedSurfaceModel"); }
        IfcFaceBasedSurfaceModel get_IfcFaceBasedSurfaceModel();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcSurfaceOrFaceSurface_put : public Select
    {
    public:
        IfcSurfaceOrFaceSurface_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSurfaceOrFaceSurface_put(Select* outer) : Select(outer) {}
        void put_IfcSurface(IfcSurface inst);
        void put_IfcFaceSurface(IfcFaceSurface inst);
        void put_IfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel inst);
    };


    class IfcSurfaceStyleElementSelect : public Select
    {
    public:
        IfcSurfaceStyleElementSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSurfaceStyleElementSelect(Select* outer) : Select(outer) {}

        bool is_IfcSurfaceStyleShading() { return IsADBEntity("IfcSurfaceStyleShading"); }
        IfcSurfaceStyleShading get_IfcSurfaceStyleShading();
        void put_IfcSurfaceStyleShading(IfcSurfaceStyleShading inst);

        bool is_IfcSurfaceStyleLighting() { return IsADBEntity("IfcSurfaceStyleLighting"); }
        IfcSurfaceStyleLighting get_IfcSurfaceStyleLighting();
        void put_IfcSurfaceStyleLighting(IfcSurfaceStyleLighting inst);

        bool is_IfcSurfaceStyleWithTextures() { return IsADBEntity("IfcSurfaceStyleWithTextures"); }
        IfcSurfaceStyleWithTextures get_IfcSurfaceStyleWithTextures();
        void put_IfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures inst);

        bool is_IfcExternallyDefinedSurfaceStyle() { return IsADBEntity("IfcExternallyDefinedSurfaceStyle"); }
        IfcExternallyDefinedSurfaceStyle get_IfcExternallyDefinedSurfaceStyle();
        void put_IfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle inst);

        bool is_IfcSurfaceStyleRefraction() { return IsADBEntity("IfcSurfaceStyleRefraction"); }
        IfcSurfaceStyleRefraction get_IfcSurfaceStyleRefraction();
        void put_IfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction inst);
    };


    class IfcSurfaceStyleElementSelect_get : public Select
    {
    public:
        IfcSurfaceStyleElementSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSurfaceStyleElementSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcSurfaceStyleShading() { return IsADBEntity("IfcSurfaceStyleShading"); }
        IfcSurfaceStyleShading get_IfcSurfaceStyleShading();
        bool is_IfcSurfaceStyleLighting() { return IsADBEntity("IfcSurfaceStyleLighting"); }
        IfcSurfaceStyleLighting get_IfcSurfaceStyleLighting();
        bool is_IfcSurfaceStyleWithTextures() { return IsADBEntity("IfcSurfaceStyleWithTextures"); }
        IfcSurfaceStyleWithTextures get_IfcSurfaceStyleWithTextures();
        bool is_IfcExternallyDefinedSurfaceStyle() { return IsADBEntity("IfcExternallyDefinedSurfaceStyle"); }
        IfcExternallyDefinedSurfaceStyle get_IfcExternallyDefinedSurfaceStyle();
        bool is_IfcSurfaceStyleRefraction() { return IsADBEntity("IfcSurfaceStyleRefraction"); }
        IfcSurfaceStyleRefraction get_IfcSurfaceStyleRefraction();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcSurfaceStyleElementSelect_put : public Select
    {
    public:
        IfcSurfaceStyleElementSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSurfaceStyleElementSelect_put(Select* outer) : Select(outer) {}
        void put_IfcSurfaceStyleShading(IfcSurfaceStyleShading inst);
        void put_IfcSurfaceStyleLighting(IfcSurfaceStyleLighting inst);
        void put_IfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures inst);
        void put_IfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle inst);
        void put_IfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction inst);
    };


    class IfcSymbolStyleSelect : public Select
    {
    public:
        IfcSymbolStyleSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSymbolStyleSelect(Select* outer) : Select(outer) {}

        IfcColour _IfcColour() { return IfcColour(this); }
    };


    class IfcSymbolStyleSelect_get : public Select
    {
    public:
        IfcSymbolStyleSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSymbolStyleSelect_get(Select* outer) : Select(outer) {}
        IfcColour_get get_IfcColour() { return IfcColour_get(this); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcSymbolStyleSelect_put : public Select
    {
    public:
        IfcSymbolStyleSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcSymbolStyleSelect_put(Select* outer) : Select(outer) {}
        IfcColour_put put_IfcColour() { return IfcColour_put(this); }
    };


    class IfcTextFontSelect : public Select
    {
    public:
        IfcTextFontSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTextFontSelect(Select* outer) : Select(outer) {}

        bool is_IfcPreDefinedTextFont() { return IsADBEntity("IfcPreDefinedTextFont"); }
        IfcPreDefinedTextFont get_IfcPreDefinedTextFont();
        void put_IfcPreDefinedTextFont(IfcPreDefinedTextFont inst);

        bool is_IfcExternallyDefinedTextFont() { return IsADBEntity("IfcExternallyDefinedTextFont"); }
        IfcExternallyDefinedTextFont get_IfcExternallyDefinedTextFont();
        void put_IfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont inst);
    };


    class IfcTextFontSelect_get : public Select
    {
    public:
        IfcTextFontSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTextFontSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcPreDefinedTextFont() { return IsADBEntity("IfcPreDefinedTextFont"); }
        IfcPreDefinedTextFont get_IfcPreDefinedTextFont();
        bool is_IfcExternallyDefinedTextFont() { return IsADBEntity("IfcExternallyDefinedTextFont"); }
        IfcExternallyDefinedTextFont get_IfcExternallyDefinedTextFont();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcTextFontSelect_put : public Select
    {
    public:
        IfcTextFontSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTextFontSelect_put(Select* outer) : Select(outer) {}
        void put_IfcPreDefinedTextFont(IfcPreDefinedTextFont inst);
        void put_IfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont inst);
    };


    class IfcTextStyleSelect : public Select
    {
    public:
        IfcTextStyleSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTextStyleSelect(Select* outer) : Select(outer) {}

        bool is_IfcTextStyleWithBoxCharacteristics() { return IsADBEntity("IfcTextStyleWithBoxCharacteristics"); }
        IfcTextStyleWithBoxCharacteristics get_IfcTextStyleWithBoxCharacteristics();
        void put_IfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics inst);

        bool is_IfcTextStyleTextModel() { return IsADBEntity("IfcTextStyleTextModel"); }
        IfcTextStyleTextModel get_IfcTextStyleTextModel();
        void put_IfcTextStyleTextModel(IfcTextStyleTextModel inst);
    };


    class IfcTextStyleSelect_get : public Select
    {
    public:
        IfcTextStyleSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTextStyleSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcTextStyleWithBoxCharacteristics() { return IsADBEntity("IfcTextStyleWithBoxCharacteristics"); }
        IfcTextStyleWithBoxCharacteristics get_IfcTextStyleWithBoxCharacteristics();
        bool is_IfcTextStyleTextModel() { return IsADBEntity("IfcTextStyleTextModel"); }
        IfcTextStyleTextModel get_IfcTextStyleTextModel();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcTextStyleSelect_put : public Select
    {
    public:
        IfcTextStyleSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTextStyleSelect_put(Select* outer) : Select(outer) {}
        void put_IfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics inst);
        void put_IfcTextStyleTextModel(IfcTextStyleTextModel inst);
    };


    class IfcTrimmingSelect : public Select
    {
    public:
        IfcTrimmingSelect(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTrimmingSelect(Select* outer) : Select(outer) {}

        bool is_IfcCartesianPoint() { return IsADBEntity("IfcCartesianPoint"); }
        IfcCartesianPoint get_IfcCartesianPoint();
        void put_IfcCartesianPoint(IfcCartesianPoint inst);

        bool is_IfcParameterValue() { return IsADBType("IFCPARAMETERVALUE"); }
        Nullable<IfcParameterValue> get_IfcParameterValue() { return getSimpleValue<IfcParameterValue>("IFCPARAMETERVALUE", sdaiREAL); }
        void put_IfcParameterValue(IfcParameterValue value) { putSimpleValue("IFCPARAMETERVALUE", sdaiREAL, value); }
    };


    class IfcTrimmingSelect_get : public Select
    {
    public:
        IfcTrimmingSelect_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTrimmingSelect_get(Select* outer) : Select(outer) {}
        bool is_IfcCartesianPoint() { return IsADBEntity("IfcCartesianPoint"); }
        IfcCartesianPoint get_IfcCartesianPoint();
        bool is_IfcParameterValue() { return IsADBType("IFCPARAMETERVALUE"); }
        Nullable<IfcParameterValue> get_IfcParameterValue() { return getSimpleValue<IfcParameterValue>("IFCPARAMETERVALUE", sdaiREAL); }

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
    };


    class IfcTrimmingSelect_put : public Select
    {
    public:
        IfcTrimmingSelect_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcTrimmingSelect_put(Select* outer) : Select(outer) {}
        void put_IfcCartesianPoint(IfcCartesianPoint inst);
        void put_IfcParameterValue(IfcParameterValue value) { putSimpleValue("IFCPARAMETERVALUE", sdaiREAL, value); }
    };


    class IfcUnit : public Select
    {
    public:
        IfcUnit(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcUnit(Select* outer) : Select(outer) {}

        bool is_IfcDerivedUnit() { return IsADBEntity("IfcDerivedUnit"); }
        IfcDerivedUnit get_IfcDerivedUnit();
        void put_IfcDerivedUnit(IfcDerivedUnit inst);

        bool is_IfcNamedUnit() { return IsADBEntity("IfcNamedUnit"); }
        IfcNamedUnit get_IfcNamedUnit();
        void put_IfcNamedUnit(IfcNamedUnit inst);

        bool is_IfcMonetaryUnit() { return IsADBEntity("IfcMonetaryUnit"); }
        IfcMonetaryUnit get_IfcMonetaryUnit();
        void put_IfcMonetaryUnit(IfcMonetaryUnit inst);
    };


    class IfcUnit_get : public Select
    {
    public:
        IfcUnit_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcUnit_get(Select* outer) : Select(outer) {}
        bool is_IfcDerivedUnit() { return IsADBEntity("IfcDerivedUnit"); }
        IfcDerivedUnit get_IfcDerivedUnit();
        bool is_IfcNamedUnit() { return IsADBEntity("IfcNamedUnit"); }
        IfcNamedUnit get_IfcNamedUnit();
        bool is_IfcMonetaryUnit() { return IsADBEntity("IfcMonetaryUnit"); }
        IfcMonetaryUnit get_IfcMonetaryUnit();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcUnit_put : public Select
    {
    public:
        IfcUnit_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcUnit_put(Select* outer) : Select(outer) {}
        void put_IfcDerivedUnit(IfcDerivedUnit inst);
        void put_IfcNamedUnit(IfcNamedUnit inst);
        void put_IfcMonetaryUnit(IfcMonetaryUnit inst);
    };


    class IfcValue : public Select
    {
    public:
        IfcValue(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcValue(Select* outer) : Select(outer) {}

        IfcMeasureValue _IfcMeasureValue() { return IfcMeasureValue(this); }

        IfcSimpleValue _IfcSimpleValue() { return IfcSimpleValue(this); }

        IfcDerivedMeasureValue _IfcDerivedMeasureValue() { return IfcDerivedMeasureValue(this); }
    };


    class IfcValue_get : public Select
    {
    public:
        IfcValue_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcValue_get(Select* outer) : Select(outer) {}
        IfcMeasureValue_get get_IfcMeasureValue() { return IfcMeasureValue_get(this); }
        IfcSimpleValue_get get_IfcSimpleValue() { return IfcSimpleValue_get(this); }
        IfcDerivedMeasureValue_get get_IfcDerivedMeasureValue() { return IfcDerivedMeasureValue_get(this); }

        Nullable<double> as_double() { double val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiREAL, &val)) return val; else return Nullable<double>(); }
        TextValue as_text() { TextValue val = NULL; sdaiGetAttrBN(m_instance, m_attrName, sdaiSTRING, &val); return val; }
        Nullable<IntValue> as_int() { IntValue val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        Nullable<bool> as_bool() { bool val = 0; if (sdaiGetAttrBN(m_instance, m_attrName, sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
    };


    class IfcValue_put : public Select
    {
    public:
        IfcValue_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcValue_put(Select* outer) : Select(outer) {}
        IfcMeasureValue_put put_IfcMeasureValue() { return IfcMeasureValue_put(this); }
        IfcSimpleValue_put put_IfcSimpleValue() { return IfcSimpleValue_put(this); }
        IfcDerivedMeasureValue_put put_IfcDerivedMeasureValue() { return IfcDerivedMeasureValue_put(this); }
    };


    class IfcVectorOrDirection : public Select
    {
    public:
        IfcVectorOrDirection(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcVectorOrDirection(Select* outer) : Select(outer) {}

        bool is_IfcDirection() { return IsADBEntity("IfcDirection"); }
        IfcDirection get_IfcDirection();
        void put_IfcDirection(IfcDirection inst);

        bool is_IfcVector() { return IsADBEntity("IfcVector"); }
        IfcVector get_IfcVector();
        void put_IfcVector(IfcVector inst);
    };


    class IfcVectorOrDirection_get : public Select
    {
    public:
        IfcVectorOrDirection_get(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcVectorOrDirection_get(Select* outer) : Select(outer) {}
        bool is_IfcDirection() { return IsADBEntity("IfcDirection"); }
        IfcDirection get_IfcDirection();
        bool is_IfcVector() { return IsADBEntity("IfcVector"); }
        IfcVector get_IfcVector();

        SdaiInstance as_instance() { return getEntityInstance(NULL); }
    };


    class IfcVectorOrDirection_put : public Select
    {
    public:
        IfcVectorOrDirection_put(SdaiInstance instance, TextValue attrName = NULL, void* adb = NULL) : Select(instance, attrName, adb) {}
        IfcVectorOrDirection_put(Select* outer) : Select(outer) {}
        void put_IfcDirection(IfcDirection inst);
        void put_IfcVector(IfcVector inst);
    };


        //
        // Unnamed aggregations
        //
    typedef std::list<IfcPresentationLayerAssignment> SetOfIfcPresentationLayerAssignment;
    template <typename TList> class SetOfIfcPresentationLayerAssignmentSerializer : public AggrSerializerInstance<TList, IfcPresentationLayerAssignment> {};
    typedef std::list<IfcStyledItem> SetOfIfcStyledItem;
    template <typename TList> class SetOfIfcStyledItemSerializer : public AggrSerializerInstance<TList, IfcStyledItem> {};
    typedef std::list<IfcCompositeCurveSegment> ListOfIfcCompositeCurveSegment;
    template <typename TList> class ListOfIfcCompositeCurveSegmentSerializer : public AggrSerializerInstance<TList, IfcCompositeCurveSegment> {};
    typedef std::list<IfcRelAssigns> SetOfIfcRelAssigns;
    template <typename TList> class SetOfIfcRelAssignsSerializer : public AggrSerializerInstance<TList, IfcRelAssigns> {};
    typedef std::list<IfcRelDecomposes> SetOfIfcRelDecomposes;
    template <typename TList> class SetOfIfcRelDecomposesSerializer : public AggrSerializerInstance<TList, IfcRelDecomposes> {};
    typedef std::list<IfcRelAssociates> SetOfIfcRelAssociates;
    template <typename TList> class SetOfIfcRelAssociatesSerializer : public AggrSerializerInstance<TList, IfcRelAssociates> {};
    typedef std::list<IfcRelDefines> SetOfIfcRelDefines;
    template <typename TList> class SetOfIfcRelDefinesSerializer : public AggrSerializerInstance<TList, IfcRelDefines> {};
    typedef std::list<IfcRelAssignsToControl> SetOfIfcRelAssignsToControl;
    template <typename TList> class SetOfIfcRelAssignsToControlSerializer : public AggrSerializerInstance<TList, IfcRelAssignsToControl> {};
    typedef std::list<IfcRelAssignsToActor> SetOfIfcRelAssignsToActor;
    template <typename TList> class SetOfIfcRelAssignsToActorSerializer : public AggrSerializerInstance<TList, IfcRelAssignsToActor> {};
    typedef std::list<IfcPropertySetDefinition> SetOfIfcPropertySetDefinition;
    template <typename TList> class SetOfIfcPropertySetDefinitionSerializer : public AggrSerializerInstance<TList, IfcPropertySetDefinition> {};
    typedef std::list<IfcRelDefinesByType> SetOfIfcRelDefinesByType;
    template <typename TList> class SetOfIfcRelDefinesByTypeSerializer : public AggrSerializerInstance<TList, IfcRelDefinesByType> {};
    typedef std::list<IfcRepresentationMap> ListOfIfcRepresentationMap;
    template <typename TList> class ListOfIfcRepresentationMapSerializer : public AggrSerializerInstance<TList, IfcRepresentationMap> {};
    typedef std::list<IfcPerson> SetOfIfcPerson;
    template <typename TList> class SetOfIfcPersonSerializer : public AggrSerializerInstance<TList, IfcPerson> {};
    typedef std::list<IfcOrganization> SetOfIfcOrganization;
    template <typename TList> class SetOfIfcOrganizationSerializer : public AggrSerializerInstance<TList, IfcOrganization> {};
    typedef std::list<IfcDraughtingCalloutElement> SetOfIfcDraughtingCalloutElement;
    template <typename TList> class SetOfIfcDraughtingCalloutElementSerializer : public AggrSerializerSelect<TList, IfcDraughtingCalloutElement> {};
    typedef std::list<IfcDraughtingCalloutRelationship> SetOfIfcDraughtingCalloutRelationship;
    template <typename TList> class SetOfIfcDraughtingCalloutRelationshipSerializer : public AggrSerializerInstance<TList, IfcDraughtingCalloutRelationship> {};
    typedef std::list<IfcRelAssignsToProduct> SetOfIfcRelAssignsToProduct;
    template <typename TList> class SetOfIfcRelAssignsToProductSerializer : public AggrSerializerInstance<TList, IfcRelAssignsToProduct> {};
    typedef std::list<IfcRelContainedInSpatialStructure> SetOfIfcRelContainedInSpatialStructure;
    template <typename TList> class SetOfIfcRelContainedInSpatialStructureSerializer : public AggrSerializerInstance<TList, IfcRelContainedInSpatialStructure> {};
    typedef std::list<IfcPresentationStyleAssignment> SetOfIfcPresentationStyleAssignment;
    template <typename TList> class SetOfIfcPresentationStyleAssignmentSerializer : public AggrSerializerInstance<TList, IfcPresentationStyleAssignment> {};
    typedef std::list<IfcCurve> SetOfIfcCurve;
    template <typename TList> class SetOfIfcCurveSerializer : public AggrSerializerInstance<TList, IfcCurve> {};
    typedef std::list<IfcReferencesValueDocument> SetOfIfcReferencesValueDocument;
    template <typename TList> class SetOfIfcReferencesValueDocumentSerializer : public AggrSerializerInstance<TList, IfcReferencesValueDocument> {};
    typedef std::list<IfcAppliedValueRelationship> SetOfIfcAppliedValueRelationship;
    template <typename TList> class SetOfIfcAppliedValueRelationshipSerializer : public AggrSerializerInstance<TList, IfcAppliedValueRelationship> {};
    typedef std::list<IfcAppliedValue> SetOfIfcAppliedValue;
    template <typename TList> class SetOfIfcAppliedValueSerializer : public AggrSerializerInstance<TList, IfcAppliedValue> {};
    typedef std::list<IfcApprovalActorRelationship> SetOfIfcApprovalActorRelationship;
    template <typename TList> class SetOfIfcApprovalActorRelationshipSerializer : public AggrSerializerInstance<TList, IfcApprovalActorRelationship> {};
    typedef std::list<IfcApprovalRelationship> SetOfIfcApprovalRelationship;
    template <typename TList> class SetOfIfcApprovalRelationshipSerializer : public AggrSerializerInstance<TList, IfcApprovalRelationship> {};
    typedef std::list<IfcProperty> SetOfIfcProperty;
    template <typename TList> class SetOfIfcPropertySerializer : public AggrSerializerInstance<TList, IfcProperty> {};
    typedef std::list<IfcRelConnectsStructuralElement> SetOfIfcRelConnectsStructuralElement;
    template <typename TList> class SetOfIfcRelConnectsStructuralElementSerializer : public AggrSerializerInstance<TList, IfcRelConnectsStructuralElement> {};
    typedef std::list<IfcRelFillsElement> SetOfIfcRelFillsElement;
    template <typename TList> class SetOfIfcRelFillsElementSerializer : public AggrSerializerInstance<TList, IfcRelFillsElement> {};
    typedef std::list<IfcRelConnectsElements> SetOfIfcRelConnectsElements;
    template <typename TList> class SetOfIfcRelConnectsElementsSerializer : public AggrSerializerInstance<TList, IfcRelConnectsElements> {};
    typedef std::list<IfcRelCoversBldgElements> SetOfIfcRelCoversBldgElements;
    template <typename TList> class SetOfIfcRelCoversBldgElementsSerializer : public AggrSerializerInstance<TList, IfcRelCoversBldgElements> {};
    typedef std::list<IfcRelProjectsElement> SetOfIfcRelProjectsElement;
    template <typename TList> class SetOfIfcRelProjectsElementSerializer : public AggrSerializerInstance<TList, IfcRelProjectsElement> {};
    typedef std::list<IfcRelReferencedInSpatialStructure> SetOfIfcRelReferencedInSpatialStructure;
    template <typename TList> class SetOfIfcRelReferencedInSpatialStructureSerializer : public AggrSerializerInstance<TList, IfcRelReferencedInSpatialStructure> {};
    typedef std::list<IfcRelConnectsPortToElement> SetOfIfcRelConnectsPortToElement;
    template <typename TList> class SetOfIfcRelConnectsPortToElementSerializer : public AggrSerializerInstance<TList, IfcRelConnectsPortToElement> {};
    typedef std::list<IfcRelVoidsElement> SetOfIfcRelVoidsElement;
    template <typename TList> class SetOfIfcRelVoidsElementSerializer : public AggrSerializerInstance<TList, IfcRelVoidsElement> {};
    typedef std::list<IfcRelConnectsWithRealizingElements> SetOfIfcRelConnectsWithRealizingElements;
    template <typename TList> class SetOfIfcRelConnectsWithRealizingElementsSerializer : public AggrSerializerInstance<TList, IfcRelConnectsWithRealizingElements> {};
    typedef std::list<IfcRelSpaceBoundary> SetOfIfcRelSpaceBoundary;
    template <typename TList> class SetOfIfcRelSpaceBoundarySerializer : public AggrSerializerInstance<TList, IfcRelSpaceBoundary> {};
    typedef std::list<IfcCartesianPoint> ListOfIfcCartesianPoint;
    template <typename TList> class ListOfIfcCartesianPointSerializer : public AggrSerializerInstance<TList, IfcCartesianPoint> {};
    typedef std::list<IfcRelServicesBuildings> SetOfIfcRelServicesBuildings;
    template <typename TList> class SetOfIfcRelServicesBuildingsSerializer : public AggrSerializerInstance<TList, IfcRelServicesBuildings> {};
    typedef std::list<IfcLengthMeasure> ListOfIfcLengthMeasure;
    template <typename TList> class ListOfIfcLengthMeasureSerializer : public AggrSerializerSimple<TList, IfcLengthMeasure, sdaiREAL> {};
    typedef std::list<IfcClassificationItem> SetOfIfcClassificationItem;
    template <typename TList> class SetOfIfcClassificationItemSerializer : public AggrSerializerInstance<TList, IfcClassificationItem> {};
    typedef std::list<IfcClassificationItemRelationship> SetOfIfcClassificationItemRelationship;
    template <typename TList> class SetOfIfcClassificationItemRelationshipSerializer : public AggrSerializerInstance<TList, IfcClassificationItemRelationship> {};
    typedef std::list<IfcClassificationNotationFacet> SetOfIfcClassificationNotationFacet;
    template <typename TList> class SetOfIfcClassificationNotationFacetSerializer : public AggrSerializerInstance<TList, IfcClassificationNotationFacet> {};
    typedef std::list<IfcFace> SetOfIfcFace;
    template <typename TList> class SetOfIfcFaceSerializer : public AggrSerializerInstance<TList, IfcFace> {};
    typedef std::list<IfcPropertyDependencyRelationship> SetOfIfcPropertyDependencyRelationship;
    template <typename TList> class SetOfIfcPropertyDependencyRelationshipSerializer : public AggrSerializerInstance<TList, IfcPropertyDependencyRelationship> {};
    typedef std::list<IfcComplexProperty> SetOfIfcComplexProperty;
    template <typename TList> class SetOfIfcComplexPropertySerializer : public AggrSerializerInstance<TList, IfcComplexProperty> {};
    typedef std::list<IfcCompositeCurve> SetOfIfcCompositeCurve;
    template <typename TList> class SetOfIfcCompositeCurveSerializer : public AggrSerializerInstance<TList, IfcCompositeCurve> {};
    typedef std::list<IfcProfileDef> SetOfIfcProfileDef;
    template <typename TList> class SetOfIfcProfileDefSerializer : public AggrSerializerInstance<TList, IfcProfileDef> {};
    typedef std::list<IfcConstraintClassificationRelationship> SetOfIfcConstraintClassificationRelationship;
    template <typename TList> class SetOfIfcConstraintClassificationRelationshipSerializer : public AggrSerializerInstance<TList, IfcConstraintClassificationRelationship> {};
    typedef std::list<IfcConstraintRelationship> SetOfIfcConstraintRelationship;
    template <typename TList> class SetOfIfcConstraintRelationshipSerializer : public AggrSerializerInstance<TList, IfcConstraintRelationship> {};
    typedef std::list<IfcPropertyConstraintRelationship> SetOfIfcPropertyConstraintRelationship;
    template <typename TList> class SetOfIfcPropertyConstraintRelationshipSerializer : public AggrSerializerInstance<TList, IfcPropertyConstraintRelationship> {};
    typedef std::list<IfcConstraintAggregationRelationship> SetOfIfcConstraintAggregationRelationship;
    template <typename TList> class SetOfIfcConstraintAggregationRelationshipSerializer : public AggrSerializerInstance<TList, IfcConstraintAggregationRelationship> {};
    typedef std::list<IfcConstraint> ListOfIfcConstraint;
    template <typename TList> class ListOfIfcConstraintSerializer : public AggrSerializerInstance<TList, IfcConstraint> {};
    typedef std::list<IfcClassificationNotationSelect> SetOfIfcClassificationNotationSelect;
    template <typename TList> class SetOfIfcClassificationNotationSelectSerializer : public AggrSerializerSelect<TList, IfcClassificationNotationSelect> {};
    typedef std::list<IfcConstraint> SetOfIfcConstraint;
    template <typename TList> class SetOfIfcConstraintSerializer : public AggrSerializerInstance<TList, IfcConstraint> {};
    typedef std::list<IfcRelAssignsToResource> SetOfIfcRelAssignsToResource;
    template <typename TList> class SetOfIfcRelAssignsToResourceSerializer : public AggrSerializerInstance<TList, IfcRelAssignsToResource> {};
    typedef std::list<IfcActorSelect> SetOfIfcActorSelect;
    template <typename TList> class SetOfIfcActorSelectSerializer : public AggrSerializerSelect<TList, IfcActorSelect> {};
    typedef std::list<IfcRelCoversSpaces> SetOfIfcRelCoversSpaces;
    template <typename TList> class SetOfIfcRelCoversSpacesSerializer : public AggrSerializerInstance<TList, IfcRelCoversSpaces> {};
    typedef std::list<IfcCurveStyleFontPattern> ListOfIfcCurveStyleFontPattern;
    template <typename TList> class ListOfIfcCurveStyleFontPatternSerializer : public AggrSerializerInstance<TList, IfcCurveStyleFontPattern> {};
    typedef std::list<IfcDerivedUnitElement> SetOfIfcDerivedUnitElement;
    template <typename TList> class SetOfIfcDerivedUnitElementSerializer : public AggrSerializerInstance<TList, IfcDerivedUnitElement> {};
    typedef std::list<IfcTerminatorSymbol> SetOfIfcTerminatorSymbol;
    template <typename TList> class SetOfIfcTerminatorSymbolSerializer : public AggrSerializerInstance<TList, IfcTerminatorSymbol> {};
    typedef std::list<double> list_of_double;
    template <typename TList> class list_of_doubleSerializer : public AggrSerializerSimple<TList, double, sdaiREAL> {};
    typedef std::list<IfcRelFlowControlElements> SetOfIfcRelFlowControlElements;
    template <typename TList> class SetOfIfcRelFlowControlElementsSerializer : public AggrSerializerInstance<TList, IfcRelFlowControlElements> {};
    typedef std::list<IfcRelConnectsPorts> SetOfIfcRelConnectsPorts;
    template <typename TList> class SetOfIfcRelConnectsPortsSerializer : public AggrSerializerInstance<TList, IfcRelConnectsPorts> {};
    typedef std::list<IfcDocumentReference> SetOfIfcDocumentReference;
    template <typename TList> class SetOfIfcDocumentReferenceSerializer : public AggrSerializerInstance<TList, IfcDocumentReference> {};
    typedef std::list<IfcDocumentInformationRelationship> SetOfIfcDocumentInformationRelationship;
    template <typename TList> class SetOfIfcDocumentInformationRelationshipSerializer : public AggrSerializerInstance<TList, IfcDocumentInformationRelationship> {};
    typedef std::list<IfcDocumentInformation> SetOfIfcDocumentInformation;
    template <typename TList> class SetOfIfcDocumentInformationSerializer : public AggrSerializerInstance<TList, IfcDocumentInformation> {};
    typedef std::list<IfcRelDefinesByProperties> SetOfIfcRelDefinesByProperties;
    template <typename TList> class SetOfIfcRelDefinesByPropertiesSerializer : public AggrSerializerInstance<TList, IfcRelDefinesByProperties> {};
    typedef std::list<IfcTypeObject> SetOfIfcTypeObject;
    template <typename TList> class SetOfIfcTypeObjectSerializer : public AggrSerializerInstance<TList, IfcTypeObject> {};
    typedef std::list<IfcOrientedEdge> ListOfIfcOrientedEdge;
    template <typename TList> class ListOfIfcOrientedEdgeSerializer : public AggrSerializerInstance<TList, IfcOrientedEdge> {};
    typedef std::list<IfcPhysicalQuantity> SetOfIfcPhysicalQuantity;
    template <typename TList> class SetOfIfcPhysicalQuantitySerializer : public AggrSerializerInstance<TList, IfcPhysicalQuantity> {};
    typedef std::list<IfcFaceBound> SetOfIfcFaceBound;
    template <typename TList> class SetOfIfcFaceBoundSerializer : public AggrSerializerInstance<TList, IfcFaceBound> {};
    typedef std::list<IfcConnectedFaceSet> SetOfIfcConnectedFaceSet;
    template <typename TList> class SetOfIfcConnectedFaceSetSerializer : public AggrSerializerInstance<TList, IfcConnectedFaceSet> {};
    typedef std::list<IfcClosedShell> SetOfIfcClosedShell;
    template <typename TList> class SetOfIfcClosedShellSerializer : public AggrSerializerInstance<TList, IfcClosedShell> {};
    typedef std::list<IfcFillStyleSelect> SetOfIfcFillStyleSelect;
    template <typename TList> class SetOfIfcFillStyleSelectSerializer : public AggrSerializerSelect<TList, IfcFillStyleSelect> {};
    typedef std::list<IfcFillAreaStyleTileShapeSelect> SetOfIfcFillAreaStyleTileShapeSelect;
    template <typename TList> class SetOfIfcFillAreaStyleTileShapeSelectSerializer : public AggrSerializerSelect<TList, IfcFillAreaStyleTileShapeSelect> {};
    typedef std::list<IfcGeometricSetSelect> SetOfIfcGeometricSetSelect;
    template <typename TList> class SetOfIfcGeometricSetSelectSerializer : public AggrSerializerSelect<TList, IfcGeometricSetSelect> {};
    typedef std::list<IfcRepresentation> SetOfIfcRepresentation;
    template <typename TList> class SetOfIfcRepresentationSerializer : public AggrSerializerInstance<TList, IfcRepresentation> {};
    typedef std::list<IfcGeometricRepresentationSubContext> SetOfIfcGeometricRepresentationSubContext;
    template <typename TList> class SetOfIfcGeometricRepresentationSubContextSerializer : public AggrSerializerInstance<TList, IfcGeometricRepresentationSubContext> {};
    typedef std::list<IfcGridAxis> ListOfIfcGridAxis;
    template <typename TList> class ListOfIfcGridAxisSerializer : public AggrSerializerInstance<TList, IfcGridAxis> {};
    typedef std::list<IfcGrid> SetOfIfcGrid;
    template <typename TList> class SetOfIfcGridSerializer : public AggrSerializerInstance<TList, IfcGrid> {};
    typedef std::list<IfcVirtualGridIntersection> SetOfIfcVirtualGridIntersection;
    template <typename TList> class SetOfIfcVirtualGridIntersectionSerializer : public AggrSerializerInstance<TList, IfcVirtualGridIntersection> {};
    typedef std::list<IfcProduct> SetOfIfcProduct;
    template <typename TList> class SetOfIfcProductSerializer : public AggrSerializerInstance<TList, IfcProduct> {};
    typedef std::list<IfcLocalPlacement> SetOfIfcLocalPlacement;
    template <typename TList> class SetOfIfcLocalPlacementSerializer : public AggrSerializerInstance<TList, IfcLocalPlacement> {};
    typedef std::list<IfcTimeSeriesReferenceRelationship> SetOfIfcTimeSeriesReferenceRelationship;
    template <typename TList> class SetOfIfcTimeSeriesReferenceRelationshipSerializer : public AggrSerializerInstance<TList, IfcTimeSeriesReferenceRelationship> {};
    typedef std::list<IfcIrregularTimeSeriesValue> ListOfIfcIrregularTimeSeriesValue;
    template <typename TList> class ListOfIfcIrregularTimeSeriesValueSerializer : public AggrSerializerInstance<TList, IfcIrregularTimeSeriesValue> {};
    typedef std::list<IfcValue> ListOfIfcValue;
    template <typename TList> class ListOfIfcValueSerializer : public AggrSerializerSelect<TList, IfcValue> {};
    typedef std::list<IfcLibraryReference> SetOfIfcLibraryReference;
    template <typename TList> class SetOfIfcLibraryReferenceSerializer : public AggrSerializerInstance<TList, IfcLibraryReference> {};
    typedef std::list<IfcLibraryInformation> SetOfIfcLibraryInformation;
    template <typename TList> class SetOfIfcLibraryInformationSerializer : public AggrSerializerInstance<TList, IfcLibraryInformation> {};
    typedef std::list<IfcPlaneAngleMeasure> ListOfIfcPlaneAngleMeasure;
    template <typename TList> class ListOfIfcPlaneAngleMeasureSerializer : public AggrSerializerSimple<TList, IfcPlaneAngleMeasure, sdaiREAL> {};
    typedef std::list<IfcLuminousIntensityDistributionMeasure> ListOfIfcLuminousIntensityDistributionMeasure;
    template <typename TList> class ListOfIfcLuminousIntensityDistributionMeasureSerializer : public AggrSerializerSimple<TList, IfcLuminousIntensityDistributionMeasure, sdaiREAL> {};
    typedef std::list<IfcLightDistributionData> ListOfIfcLightDistributionData;
    template <typename TList> class ListOfIfcLightDistributionDataSerializer : public AggrSerializerInstance<TList, IfcLightDistributionData> {};
    typedef std::list<IfcMaterialDefinitionRepresentation> SetOfIfcMaterialDefinitionRepresentation;
    template <typename TList> class SetOfIfcMaterialDefinitionRepresentationSerializer : public AggrSerializerInstance<TList, IfcMaterialDefinitionRepresentation> {};
    typedef std::list<IfcMaterialClassificationRelationship> SetOfIfcMaterialClassificationRelationship;
    template <typename TList> class SetOfIfcMaterialClassificationRelationshipSerializer : public AggrSerializerInstance<TList, IfcMaterialClassificationRelationship> {};
    typedef std::list<IfcRepresentation> ListOfIfcRepresentation;
    template <typename TList> class ListOfIfcRepresentationSerializer : public AggrSerializerInstance<TList, IfcRepresentation> {};
    typedef std::list<IfcMaterialLayer> ListOfIfcMaterialLayer;
    template <typename TList> class ListOfIfcMaterialLayerSerializer : public AggrSerializerInstance<TList, IfcMaterialLayer> {};
    typedef std::list<IfcMaterial> ListOfIfcMaterial;
    template <typename TList> class ListOfIfcMaterialSerializer : public AggrSerializerInstance<TList, IfcMaterial> {};
    typedef std::list<IfcRelaxation> SetOfIfcRelaxation;
    template <typename TList> class SetOfIfcRelaxationSerializer : public AggrSerializerInstance<TList, IfcRelaxation> {};
    typedef std::list<IfcRelAssignsToProcess> SetOfIfcRelAssignsToProcess;
    template <typename TList> class SetOfIfcRelAssignsToProcessSerializer : public AggrSerializerInstance<TList, IfcRelAssignsToProcess> {};
    typedef std::list<IfcRelSequence> SetOfIfcRelSequence;
    template <typename TList> class SetOfIfcRelSequenceSerializer : public AggrSerializerInstance<TList, IfcRelSequence> {};
    typedef std::list<StringValue> ListOfIfcText;
    template <typename TList> class ListOfIfcTextSerializer : public AggrSerializerText<ListOfIfcText, IfcText, sdaiSTRING> {};
    typedef std::list<IfcActorRole> ListOfIfcActorRole;
    template <typename TList> class ListOfIfcActorRoleSerializer : public AggrSerializerInstance<TList, IfcActorRole> {};
    typedef std::list<IfcAddress> ListOfIfcAddress;
    template <typename TList> class ListOfIfcAddressSerializer : public AggrSerializerInstance<TList, IfcAddress> {};
    typedef std::list<IfcOrganizationRelationship> SetOfIfcOrganizationRelationship;
    template <typename TList> class SetOfIfcOrganizationRelationshipSerializer : public AggrSerializerInstance<TList, IfcOrganizationRelationship> {};
    typedef std::list<IfcPersonAndOrganization> SetOfIfcPersonAndOrganization;
    template <typename TList> class SetOfIfcPersonAndOrganizationSerializer : public AggrSerializerInstance<TList, IfcPersonAndOrganization> {};
    typedef std::list<StringValue> ListOfIfcLabel;
    template <typename TList> class ListOfIfcLabelSerializer : public AggrSerializerText<ListOfIfcLabel, IfcLabel, sdaiSTRING> {};
    typedef std::list<IfcPhysicalComplexQuantity> SetOfIfcPhysicalComplexQuantity;
    template <typename TList> class SetOfIfcPhysicalComplexQuantitySerializer : public AggrSerializerInstance<TList, IfcPhysicalComplexQuantity> {};
    typedef std::list<StringValue> ListOfTextValue;
    template <typename TList> class ListOfTextValueSerializer : public AggrSerializerText<ListOfTextValue, TextValue, sdaiBINARY> {};
    typedef std::list<IfcLayeredItem> SetOfIfcLayeredItem;
    template <typename TList> class SetOfIfcLayeredItemSerializer : public AggrSerializerSelect<TList, IfcLayeredItem> {};
    typedef std::list<IfcPresentationStyleSelect> SetOfIfcPresentationStyleSelect;
    template <typename TList> class SetOfIfcPresentationStyleSelectSerializer : public AggrSerializerSelect<TList, IfcPresentationStyleSelect> {};
    typedef std::list<IfcShapeAspect> SetOfIfcShapeAspect;
    template <typename TList> class SetOfIfcShapeAspectSerializer : public AggrSerializerInstance<TList, IfcShapeAspect> {};
    typedef std::list<IfcRepresentationContext> SetOfIfcRepresentationContext;
    template <typename TList> class SetOfIfcRepresentationContextSerializer : public AggrSerializerInstance<TList, IfcRepresentationContext> {};
    typedef std::list<IfcRelAssignsToProjectOrder> ListOfIfcRelAssignsToProjectOrder;
    template <typename TList> class ListOfIfcRelAssignsToProjectOrderSerializer : public AggrSerializerInstance<TList, IfcRelAssignsToProjectOrder> {};
    typedef std::list<IfcTimeSeriesValue> ListOfIfcTimeSeriesValue;
    template <typename TList> class ListOfIfcTimeSeriesValueSerializer : public AggrSerializerInstance<TList, IfcTimeSeriesValue> {};
    typedef std::list<IfcSectionReinforcementProperties> ListOfIfcSectionReinforcementProperties;
    template <typename TList> class ListOfIfcSectionReinforcementPropertiesSerializer : public AggrSerializerInstance<TList, IfcSectionReinforcementProperties> {};
    typedef std::list<IfcObjectDefinition> SetOfIfcObjectDefinition;
    template <typename TList> class SetOfIfcObjectDefinitionSerializer : public AggrSerializerInstance<TList, IfcObjectDefinition> {};
    typedef std::list<IfcRoot> SetOfIfcRoot;
    template <typename TList> class SetOfIfcRootSerializer : public AggrSerializerInstance<TList, IfcRoot> {};
    typedef std::list<IntValue> ListOfIntValue;
    template <typename TList> class ListOfIntValueSerializer : public AggrSerializerSimple<TList, IntValue, sdaiINTEGER> {};
    typedef std::list<IfcElement> SetOfIfcElement;
    template <typename TList> class SetOfIfcElementSerializer : public AggrSerializerInstance<TList, IfcElement> {};
    typedef std::list<IfcCovering> SetOfIfcCovering;
    template <typename TList> class SetOfIfcCoveringSerializer : public AggrSerializerInstance<TList, IfcCovering> {};
    typedef std::list<IfcObject> SetOfIfcObject;
    template <typename TList> class SetOfIfcObjectSerializer : public AggrSerializerInstance<TList, IfcObject> {};
    typedef std::list<IfcDistributionControlElement> SetOfIfcDistributionControlElement;
    template <typename TList> class SetOfIfcDistributionControlElementSerializer : public AggrSerializerInstance<TList, IfcDistributionControlElement> {};
    typedef std::list<IfcSpatialStructureElement> SetOfIfcSpatialStructureElement;
    template <typename TList> class SetOfIfcSpatialStructureElementSerializer : public AggrSerializerInstance<TList, IfcSpatialStructureElement> {};
    typedef std::list<IfcRepresentationItem> SetOfIfcRepresentationItem;
    template <typename TList> class SetOfIfcRepresentationItemSerializer : public AggrSerializerInstance<TList, IfcRepresentationItem> {};
    typedef std::list<IfcRepresentationMap> SetOfIfcRepresentationMap;
    template <typename TList> class SetOfIfcRepresentationMapSerializer : public AggrSerializerInstance<TList, IfcRepresentationMap> {};
    typedef std::list<IfcProductRepresentation> SetOfIfcProductRepresentation;
    template <typename TList> class SetOfIfcProductRepresentationSerializer : public AggrSerializerInstance<TList, IfcProductRepresentation> {};
    typedef std::list<IfcMappedItem> SetOfIfcMappedItem;
    template <typename TList> class SetOfIfcMappedItemSerializer : public AggrSerializerInstance<TList, IfcMappedItem> {};
    typedef std::list<IfcProfileDef> ListOfIfcProfileDef;
    template <typename TList> class ListOfIfcProfileDefSerializer : public AggrSerializerInstance<TList, IfcProfileDef> {};
    typedef std::list<IfcAxis2Placement3D> ListOfIfcAxis2Placement3D;
    template <typename TList> class ListOfIfcAxis2Placement3DSerializer : public AggrSerializerInstance<TList, IfcAxis2Placement3D> {};
    typedef std::list<IfcReinforcementBarProperties> SetOfIfcReinforcementBarProperties;
    template <typename TList> class SetOfIfcReinforcementBarPropertiesSerializer : public AggrSerializerInstance<TList, IfcReinforcementBarProperties> {};
    typedef std::list<IfcShapeModel> ListOfIfcShapeModel;
    template <typename TList> class ListOfIfcShapeModelSerializer : public AggrSerializerInstance<TList, IfcShapeModel> {};
    typedef std::list<IfcShell> SetOfIfcShell;
    template <typename TList> class SetOfIfcShellSerializer : public AggrSerializerSelect<TList, IfcShell> {};
    typedef std::list<IfcSoundValue> ListOfIfcSoundValue;
    template <typename TList> class ListOfIfcSoundValueSerializer : public AggrSerializerInstance<TList, IfcSoundValue> {};
    typedef std::list<IfcRelInteractionRequirements> SetOfIfcRelInteractionRequirements;
    template <typename TList> class SetOfIfcRelInteractionRequirementsSerializer : public AggrSerializerInstance<TList, IfcRelInteractionRequirements> {};
    typedef std::list<IfcStructuralLoadGroup> SetOfIfcStructuralLoadGroup;
    template <typename TList> class SetOfIfcStructuralLoadGroupSerializer : public AggrSerializerInstance<TList, IfcStructuralLoadGroup> {};
    typedef std::list<IfcStructuralResultGroup> SetOfIfcStructuralResultGroup;
    template <typename TList> class SetOfIfcStructuralResultGroupSerializer : public AggrSerializerInstance<TList, IfcStructuralResultGroup> {};
    typedef std::list<IfcRelConnectsStructuralActivity> SetOfIfcRelConnectsStructuralActivity;
    template <typename TList> class SetOfIfcRelConnectsStructuralActivitySerializer : public AggrSerializerInstance<TList, IfcRelConnectsStructuralActivity> {};
    typedef std::list<IfcRelConnectsStructuralMember> SetOfIfcRelConnectsStructuralMember;
    template <typename TList> class SetOfIfcRelConnectsStructuralMemberSerializer : public AggrSerializerInstance<TList, IfcRelConnectsStructuralMember> {};
    typedef std::list<IfcStructuralLoad> ListOfIfcStructuralLoad;
    template <typename TList> class ListOfIfcStructuralLoadSerializer : public AggrSerializerInstance<TList, IfcStructuralLoad> {};
    typedef std::list<IfcStructuralAnalysisModel> SetOfIfcStructuralAnalysisModel;
    template <typename TList> class SetOfIfcStructuralAnalysisModelSerializer : public AggrSerializerInstance<TList, IfcStructuralAnalysisModel> {};
    typedef std::list<IfcStructuralAction> SetOfIfcStructuralAction;
    template <typename TList> class SetOfIfcStructuralActionSerializer : public AggrSerializerInstance<TList, IfcStructuralAction> {};
    typedef std::list<IfcPositiveLengthMeasure> ListOfIfcPositiveLengthMeasure;
    template <typename TList> class ListOfIfcPositiveLengthMeasureSerializer : public AggrSerializerSimple<TList, IfcPositiveLengthMeasure, sdaiREAL> {};
    typedef std::list<IfcSurfaceStyleElementSelect> SetOfIfcSurfaceStyleElementSelect;
    template <typename TList> class SetOfIfcSurfaceStyleElementSelectSerializer : public AggrSerializerSelect<TList, IfcSurfaceStyleElementSelect> {};
    typedef std::list<IfcSurfaceTexture> ListOfIfcSurfaceTexture;
    template <typename TList> class ListOfIfcSurfaceTextureSerializer : public AggrSerializerInstance<TList, IfcSurfaceTexture> {};
    typedef std::list<IfcTableRow> ListOfIfcTableRow;
    template <typename TList> class ListOfIfcTableRowSerializer : public AggrSerializerInstance<TList, IfcTableRow> {};
    typedef std::list<StringValue> ListOfIfcTextFontName;
    template <typename TList> class ListOfIfcTextFontNameSerializer : public AggrSerializerText<ListOfIfcTextFontName, IfcTextFontName, sdaiSTRING> {};
    typedef std::list<IfcAnnotationSurface> SetOfIfcAnnotationSurface;
    template <typename TList> class SetOfIfcAnnotationSurfaceSerializer : public AggrSerializerInstance<TList, IfcAnnotationSurface> {};
    typedef std::list<IfcSimpleValue> ListOfIfcSimpleValue;
    template <typename TList> class ListOfIfcSimpleValueSerializer : public AggrSerializerSelect<TList, IfcSimpleValue> {};
    typedef std::list<IfcVertexBasedTextureMap> SetOfIfcVertexBasedTextureMap;
    template <typename TList> class SetOfIfcVertexBasedTextureMapSerializer : public AggrSerializerInstance<TList, IfcVertexBasedTextureMap> {};
    typedef std::list<IfcParameterValue> ListOfIfcParameterValue;
    template <typename TList> class ListOfIfcParameterValueSerializer : public AggrSerializerSimple<TList, IfcParameterValue, sdaiREAL> {};
    typedef std::list<IfcDocumentSelect> SetOfIfcDocumentSelect;
    template <typename TList> class SetOfIfcDocumentSelectSerializer : public AggrSerializerSelect<TList, IfcDocumentSelect> {};
    typedef std::list<IfcDateTimeSelect> ListOfIfcDateTimeSelect;
    template <typename TList> class ListOfIfcDateTimeSelectSerializer : public AggrSerializerSelect<TList, IfcDateTimeSelect> {};
    typedef std::list<IfcTrimmingSelect> SetOfIfcTrimmingSelect;
    template <typename TList> class SetOfIfcTrimmingSelectSerializer : public AggrSerializerSelect<TList, IfcTrimmingSelect> {};
    typedef std::list<IfcUnit> SetOfIfcUnit;
    template <typename TList> class SetOfIfcUnitSerializer : public AggrSerializerSelect<TList, IfcUnit> {};
    typedef std::list<IfcTextureVertex> ListOfIfcTextureVertex;
    template <typename TList> class ListOfIfcTextureVertexSerializer : public AggrSerializerInstance<TList, IfcTextureVertex> {};

        //
        // Entities
        // 


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRepresentationItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRepresentationItem : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRepresentationItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRepresentationItem")
        {}


        //TList may be SetOfIfcPresentationLayerAssignment or list of converible elements
        template <typename TList> void get_LayerAssignments(TList& lst) { SetOfIfcPresentationLayerAssignmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LayerAssignments"); }

        //TList may be SetOfIfcStyledItem or list of converible elements
        template <typename TList> void get_StyledByItem(TList& lst) { SetOfIfcStyledItemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "StyledByItem"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeometricRepresentationItem : public virtual IfcRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeometricRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeometricRepresentationItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeometricRepresentationItem")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurve : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurve")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundedCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundedCurve : public virtual IfcCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundedCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundedCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundedCurve")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCompositeCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCompositeCurve : public virtual IfcBoundedCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCompositeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCompositeCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCompositeCurve")
        {}

                /// <summary>
                /// Create new instace of IfcCompositeCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcCompositeCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCompositeCurve"); assert(inst); return inst; }

        //TList may be ListOfIfcCompositeCurveSegment or list of converible elements
        template <typename TList> void get_Segments(TList& lst) { ListOfIfcCompositeCurveSegmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Segments"); }

        //TList may be ListOfIfcCompositeCurveSegment or list of converible elements
        template <typename TList> void put_Segments(TList& lst) { ListOfIfcCompositeCurveSegmentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Segments"); }

        //TArrayElem[] may be IfcCompositeCurveSegment[] or array of convertible elements
        template <typename TArrayElem> void put_Segments(TArrayElem arr[], size_t n) { ListOfIfcCompositeCurveSegment lst; ArrayToList(arr, n, lst); put_Segments(lst); }

        Nullable<LOGICAL_VALUE> get_SelfIntersect() { int v = getENUM("SelfIntersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_SelfIntersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "SelfIntersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of Ifc2DCompositeCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class Ifc2DCompositeCurve : public virtual IfcCompositeCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of Ifc2DCompositeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        Ifc2DCompositeCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "Ifc2DCompositeCurve")
        {}

                /// <summary>
                /// Create new instace of Ifc2DCompositeCurve and returns object of this C++ class to interact with
                /// </summary>
        static Ifc2DCompositeCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "Ifc2DCompositeCurve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRoot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRoot : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRoot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRoot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRoot")
        {}


        IfcGloballyUniqueId get_GlobalId() { IfcGloballyUniqueId val = NULL; if (sdaiGetAttrBN(m_instance, "GlobalId", sdaiSTRING, &val)) return val; else return NULL; }
        void put_GlobalId(IfcGloballyUniqueId value) { sdaiPutAttrBN(m_instance, "GlobalId", sdaiSTRING, value); }

        IfcOwnerHistory get_OwnerHistory();
        void put_OwnerHistory(IfcOwnerHistory inst);

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcObjectDefinition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcObjectDefinition : public virtual IfcRoot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcObjectDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcObjectDefinition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcObjectDefinition")
        {}


        //TList may be SetOfIfcRelAssigns or list of converible elements
        template <typename TList> void get_HasAssignments(TList& lst) { SetOfIfcRelAssignsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasAssignments"); }

        //TList may be SetOfIfcRelDecomposes or list of converible elements
        template <typename TList> void get_IsDecomposedBy(TList& lst) { SetOfIfcRelDecomposesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsDecomposedBy"); }

        //TList may be SetOfIfcRelDecomposes or list of converible elements
        template <typename TList> void get_Decomposes(TList& lst) { SetOfIfcRelDecomposesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Decomposes"); }

        //TList may be SetOfIfcRelAssociates or list of converible elements
        template <typename TList> void get_HasAssociations(TList& lst) { SetOfIfcRelAssociatesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasAssociations"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcObject
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcObject : public virtual IfcObjectDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcObject(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcObject")
        {}


        IfcLabel get_ObjectType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ObjectType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ObjectType(IfcLabel value) { sdaiPutAttrBN(m_instance, "ObjectType", sdaiSTRING, value); }

        //TList may be SetOfIfcRelDefines or list of converible elements
        template <typename TList> void get_IsDefinedBy(TList& lst) { SetOfIfcRelDefinesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsDefinedBy"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcControl
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcControl : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcControl(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcControl")
        {}


        //TList may be SetOfIfcRelAssignsToControl or list of converible elements
        template <typename TList> void get_Controls(TList& lst) { SetOfIfcRelAssignsToControlSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Controls"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcActionRequest
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcActionRequest : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcActionRequest
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcActionRequest(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcActionRequest")
        {}

                /// <summary>
                /// Create new instace of IfcActionRequest and returns object of this C++ class to interact with
                /// </summary>
        static IfcActionRequest Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcActionRequest"); assert(inst); return inst; }

        IfcIdentifier get_RequestID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "RequestID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_RequestID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "RequestID", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcActor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcActor : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcActor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcActor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcActor")
        {}

                /// <summary>
                /// Create new instace of IfcActor and returns object of this C++ class to interact with
                /// </summary>
        static IfcActor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcActor"); assert(inst); return inst; }

        IfcActorSelect_get get_TheActor() { return IfcActorSelect_get(m_instance, "TheActor", NULL); }
        IfcActorSelect_put put_TheActor() { return IfcActorSelect_put(m_instance, "TheActor", NULL); }

        //TList may be SetOfIfcRelAssignsToActor or list of converible elements
        template <typename TList> void get_IsActingUpon(TList& lst) { SetOfIfcRelAssignsToActorSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsActingUpon"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcActorRole
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcActorRole : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcActorRole
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcActorRole(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcActorRole")
        {}

                /// <summary>
                /// Create new instace of IfcActorRole and returns object of this C++ class to interact with
                /// </summary>
        static IfcActorRole Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcActorRole"); assert(inst); return inst; }

        Nullable<IfcRoleEnum> get_Role() { int v = getENUM("Role", IfcRoleEnum_); if (v >= 0) return (IfcRoleEnum) v; else return Nullable<IfcRoleEnum>(); }
        void put_Role(IfcRoleEnum value) { TextValue val = IfcRoleEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Role", sdaiENUM, val); }

        IfcLabel get_UserDefinedRole() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedRole", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedRole(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedRole", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTypeObject
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTypeObject : public virtual IfcObjectDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTypeObject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTypeObject(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTypeObject")
        {}

                /// <summary>
                /// Create new instace of IfcTypeObject and returns object of this C++ class to interact with
                /// </summary>
        static IfcTypeObject Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTypeObject"); assert(inst); return inst; }

        IfcLabel get_ApplicableOccurrence() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ApplicableOccurrence", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ApplicableOccurrence(IfcLabel value) { sdaiPutAttrBN(m_instance, "ApplicableOccurrence", sdaiSTRING, value); }

        //TList may be SetOfIfcPropertySetDefinition or list of converible elements
        template <typename TList> void get_HasPropertySets(TList& lst) { SetOfIfcPropertySetDefinitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasPropertySets"); }

        //TList may be SetOfIfcPropertySetDefinition or list of converible elements
        template <typename TList> void put_HasPropertySets(TList& lst) { SetOfIfcPropertySetDefinitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "HasPropertySets"); }

        //TArrayElem[] may be IfcPropertySetDefinition[] or array of convertible elements
        template <typename TArrayElem> void put_HasPropertySets(TArrayElem arr[], size_t n) { SetOfIfcPropertySetDefinition lst; ArrayToList(arr, n, lst); put_HasPropertySets(lst); }

        //TList may be SetOfIfcRelDefinesByType or list of converible elements
        template <typename TList> void get_ObjectTypeOf(TList& lst) { SetOfIfcRelDefinesByTypeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ObjectTypeOf"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTypeProduct
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTypeProduct : public virtual IfcTypeObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTypeProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTypeProduct(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTypeProduct")
        {}

                /// <summary>
                /// Create new instace of IfcTypeProduct and returns object of this C++ class to interact with
                /// </summary>
        static IfcTypeProduct Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTypeProduct"); assert(inst); return inst; }

        //TList may be ListOfIfcRepresentationMap or list of converible elements
        template <typename TList> void get_RepresentationMaps(TList& lst) { ListOfIfcRepresentationMapSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RepresentationMaps"); }

        //TList may be ListOfIfcRepresentationMap or list of converible elements
        template <typename TList> void put_RepresentationMaps(TList& lst) { ListOfIfcRepresentationMapSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RepresentationMaps"); }

        //TArrayElem[] may be IfcRepresentationMap[] or array of convertible elements
        template <typename TArrayElem> void put_RepresentationMaps(TArrayElem arr[], size_t n) { ListOfIfcRepresentationMap lst; ArrayToList(arr, n, lst); put_RepresentationMaps(lst); }

        IfcLabel get_Tag() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Tag", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Tag(IfcLabel value) { sdaiPutAttrBN(m_instance, "Tag", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElementType : public virtual IfcTypeProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElementType")
        {}


        IfcLabel get_ElementType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ElementType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ElementType(IfcLabel value) { sdaiPutAttrBN(m_instance, "ElementType", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionElementType : public virtual IfcElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionElementType")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionElementType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionElementType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionElementType"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionControlElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionControlElementType : public virtual IfcDistributionElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionControlElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionControlElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionControlElementType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcActuatorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcActuatorType : public virtual IfcDistributionControlElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcActuatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcActuatorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcActuatorType")
        {}

                /// <summary>
                /// Create new instace of IfcActuatorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcActuatorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcActuatorType"); assert(inst); return inst; }

        Nullable<IfcActuatorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcActuatorTypeEnum_); if (v >= 0) return (IfcActuatorTypeEnum) v; else return Nullable<IfcActuatorTypeEnum>(); }
        void put_PredefinedType(IfcActuatorTypeEnum value) { TextValue val = IfcActuatorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAddress
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAddress : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAddress(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAddress")
        {}


        Nullable<IfcAddressTypeEnum> get_Purpose() { int v = getENUM("Purpose", IfcAddressTypeEnum_); if (v >= 0) return (IfcAddressTypeEnum) v; else return Nullable<IfcAddressTypeEnum>(); }
        void put_Purpose(IfcAddressTypeEnum value) { TextValue val = IfcAddressTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Purpose", sdaiENUM, val); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcLabel get_UserDefinedPurpose() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedPurpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedPurpose(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedPurpose", sdaiSTRING, value); }

        //TList may be SetOfIfcPerson or list of converible elements
        template <typename TList> void get_OfPerson(TList& lst) { SetOfIfcPersonSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OfPerson"); }

        //TList may be SetOfIfcOrganization or list of converible elements
        template <typename TList> void get_OfOrganization(TList& lst) { SetOfIfcOrganizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OfOrganization"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionFlowElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionFlowElementType : public virtual IfcDistributionElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionFlowElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionFlowElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionFlowElementType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowControllerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowControllerType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowControllerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowControllerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowControllerType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAirTerminalBoxType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAirTerminalBoxType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAirTerminalBoxType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAirTerminalBoxType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAirTerminalBoxType")
        {}

                /// <summary>
                /// Create new instace of IfcAirTerminalBoxType and returns object of this C++ class to interact with
                /// </summary>
        static IfcAirTerminalBoxType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAirTerminalBoxType"); assert(inst); return inst; }

        Nullable<IfcAirTerminalBoxTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcAirTerminalBoxTypeEnum_); if (v >= 0) return (IfcAirTerminalBoxTypeEnum) v; else return Nullable<IfcAirTerminalBoxTypeEnum>(); }
        void put_PredefinedType(IfcAirTerminalBoxTypeEnum value) { TextValue val = IfcAirTerminalBoxTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowTerminalType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowTerminalType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAirTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAirTerminalType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAirTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAirTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAirTerminalType")
        {}

                /// <summary>
                /// Create new instace of IfcAirTerminalType and returns object of this C++ class to interact with
                /// </summary>
        static IfcAirTerminalType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAirTerminalType"); assert(inst); return inst; }

        Nullable<IfcAirTerminalTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcAirTerminalTypeEnum_); if (v >= 0) return (IfcAirTerminalTypeEnum) v; else return Nullable<IfcAirTerminalTypeEnum>(); }
        void put_PredefinedType(IfcAirTerminalTypeEnum value) { TextValue val = IfcAirTerminalTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEnergyConversionDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEnergyConversionDeviceType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEnergyConversionDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEnergyConversionDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEnergyConversionDeviceType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAirToAirHeatRecoveryType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAirToAirHeatRecoveryType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAirToAirHeatRecoveryType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAirToAirHeatRecoveryType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAirToAirHeatRecoveryType")
        {}

                /// <summary>
                /// Create new instace of IfcAirToAirHeatRecoveryType and returns object of this C++ class to interact with
                /// </summary>
        static IfcAirToAirHeatRecoveryType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAirToAirHeatRecoveryType"); assert(inst); return inst; }

        Nullable<IfcAirToAirHeatRecoveryTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcAirToAirHeatRecoveryTypeEnum_); if (v >= 0) return (IfcAirToAirHeatRecoveryTypeEnum) v; else return Nullable<IfcAirToAirHeatRecoveryTypeEnum>(); }
        void put_PredefinedType(IfcAirToAirHeatRecoveryTypeEnum value) { TextValue val = IfcAirToAirHeatRecoveryTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAlarmType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAlarmType : public virtual IfcDistributionControlElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAlarmType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAlarmType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAlarmType")
        {}

                /// <summary>
                /// Create new instace of IfcAlarmType and returns object of this C++ class to interact with
                /// </summary>
        static IfcAlarmType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAlarmType"); assert(inst); return inst; }

        Nullable<IfcAlarmTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcAlarmTypeEnum_); if (v >= 0) return (IfcAlarmTypeEnum) v; else return Nullable<IfcAlarmTypeEnum>(); }
        void put_PredefinedType(IfcAlarmTypeEnum value) { TextValue val = IfcAlarmTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDraughtingCallout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDraughtingCallout : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDraughtingCallout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDraughtingCallout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDraughtingCallout")
        {}

                /// <summary>
                /// Create new instace of IfcDraughtingCallout and returns object of this C++ class to interact with
                /// </summary>
        static IfcDraughtingCallout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDraughtingCallout"); assert(inst); return inst; }

        //TList may be SetOfIfcDraughtingCalloutElement or list of converible elements
        template <typename TList> void get_Contents(TList& lst) { SetOfIfcDraughtingCalloutElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Contents"); }

        //TList may be SetOfIfcDraughtingCalloutElement or list of converible elements
        template <typename TList> void put_Contents(TList& lst) { SetOfIfcDraughtingCalloutElementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Contents"); }

        //TList may be SetOfIfcDraughtingCalloutRelationship or list of converible elements
        template <typename TList> void get_IsRelatedFromCallout(TList& lst) { SetOfIfcDraughtingCalloutRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsRelatedFromCallout"); }

        //TList may be SetOfIfcDraughtingCalloutRelationship or list of converible elements
        template <typename TList> void get_IsRelatedToCallout(TList& lst) { SetOfIfcDraughtingCalloutRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsRelatedToCallout"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDimensionCurveDirectedCallout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDimensionCurveDirectedCallout : public virtual IfcDraughtingCallout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDimensionCurveDirectedCallout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDimensionCurveDirectedCallout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDimensionCurveDirectedCallout")
        {}

                /// <summary>
                /// Create new instace of IfcDimensionCurveDirectedCallout and returns object of this C++ class to interact with
                /// </summary>
        static IfcDimensionCurveDirectedCallout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDimensionCurveDirectedCallout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAngularDimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAngularDimension : public virtual IfcDimensionCurveDirectedCallout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAngularDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAngularDimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAngularDimension")
        {}

                /// <summary>
                /// Create new instace of IfcAngularDimension and returns object of this C++ class to interact with
                /// </summary>
        static IfcAngularDimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAngularDimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProduct
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProduct : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProduct(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProduct")
        {}


        IfcObjectPlacement get_ObjectPlacement();
        void put_ObjectPlacement(IfcObjectPlacement inst);

        IfcProductRepresentation get_Representation();
        void put_Representation(IfcProductRepresentation inst);

        //TList may be SetOfIfcRelAssignsToProduct or list of converible elements
        template <typename TList> void get_ReferencedBy(TList& lst) { SetOfIfcRelAssignsToProductSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferencedBy"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotation : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotation")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotation and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotation"); assert(inst); return inst; }

        //TList may be SetOfIfcRelContainedInSpatialStructure or list of converible elements
        template <typename TList> void get_ContainedInStructure(TList& lst) { SetOfIfcRelContainedInSpatialStructureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ContainedInStructure"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStyledItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStyledItem : public virtual IfcRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStyledItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStyledItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStyledItem")
        {}

                /// <summary>
                /// Create new instace of IfcStyledItem and returns object of this C++ class to interact with
                /// </summary>
        static IfcStyledItem Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStyledItem"); assert(inst); return inst; }

        IfcRepresentationItem get_Item();
        void put_Item(IfcRepresentationItem inst);

        //TList may be SetOfIfcPresentationStyleAssignment or list of converible elements
        template <typename TList> void get_Styles(TList& lst) { SetOfIfcPresentationStyleAssignmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Styles"); }

        //TList may be SetOfIfcPresentationStyleAssignment or list of converible elements
        template <typename TList> void put_Styles(TList& lst) { SetOfIfcPresentationStyleAssignmentSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Styles"); }

        //TArrayElem[] may be IfcPresentationStyleAssignment[] or array of convertible elements
        template <typename TArrayElem> void put_Styles(TArrayElem arr[], size_t n) { SetOfIfcPresentationStyleAssignment lst; ArrayToList(arr, n, lst); put_Styles(lst); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationOccurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationOccurrence : public virtual IfcStyledItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationOccurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationOccurrence")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationCurveOccurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationCurveOccurrence : public virtual IfcAnnotationOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationCurveOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationCurveOccurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationCurveOccurrence")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationCurveOccurrence and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationCurveOccurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationCurveOccurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationFillArea
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationFillArea : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationFillArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationFillArea(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationFillArea")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationFillArea and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationFillArea Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationFillArea"); assert(inst); return inst; }

        IfcCurve get_OuterBoundary();
        void put_OuterBoundary(IfcCurve inst);

        //TList may be SetOfIfcCurve or list of converible elements
        template <typename TList> void get_InnerBoundaries(TList& lst) { SetOfIfcCurveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "InnerBoundaries"); }

        //TList may be SetOfIfcCurve or list of converible elements
        template <typename TList> void put_InnerBoundaries(TList& lst) { SetOfIfcCurveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }

        //TArrayElem[] may be IfcCurve[] or array of convertible elements
        template <typename TArrayElem> void put_InnerBoundaries(TArrayElem arr[], size_t n) { SetOfIfcCurve lst; ArrayToList(arr, n, lst); put_InnerBoundaries(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationFillAreaOccurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationFillAreaOccurrence : public virtual IfcAnnotationOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationFillAreaOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationFillAreaOccurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationFillAreaOccurrence")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationFillAreaOccurrence and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationFillAreaOccurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationFillAreaOccurrence"); assert(inst); return inst; }

        IfcPoint get_FillStyleTarget();
        void put_FillStyleTarget(IfcPoint inst);

        Nullable<IfcGlobalOrLocalEnum> get_GlobalOrLocal() { int v = getENUM("GlobalOrLocal", IfcGlobalOrLocalEnum_); if (v >= 0) return (IfcGlobalOrLocalEnum) v; else return Nullable<IfcGlobalOrLocalEnum>(); }
        void put_GlobalOrLocal(IfcGlobalOrLocalEnum value) { TextValue val = IfcGlobalOrLocalEnum_[(int) value]; sdaiPutAttrBN(m_instance, "GlobalOrLocal", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationSurface : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationSurface")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationSurface and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationSurface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationSurface"); assert(inst); return inst; }

        IfcGeometricRepresentationItem get_Item();
        void put_Item(IfcGeometricRepresentationItem inst);

        IfcTextureCoordinate get_TextureCoordinates();
        void put_TextureCoordinates(IfcTextureCoordinate inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationSurfaceOccurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationSurfaceOccurrence : public virtual IfcAnnotationOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationSurfaceOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationSurfaceOccurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationSurfaceOccurrence")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationSurfaceOccurrence and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationSurfaceOccurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationSurfaceOccurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationSymbolOccurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationSymbolOccurrence : public virtual IfcAnnotationOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationSymbolOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationSymbolOccurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationSymbolOccurrence")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationSymbolOccurrence and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationSymbolOccurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationSymbolOccurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAnnotationTextOccurrence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAnnotationTextOccurrence : public virtual IfcAnnotationOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAnnotationTextOccurrence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAnnotationTextOccurrence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAnnotationTextOccurrence")
        {}

                /// <summary>
                /// Create new instace of IfcAnnotationTextOccurrence and returns object of this C++ class to interact with
                /// </summary>
        static IfcAnnotationTextOccurrence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAnnotationTextOccurrence"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcApplication
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcApplication : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcApplication
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcApplication(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcApplication")
        {}

                /// <summary>
                /// Create new instace of IfcApplication and returns object of this C++ class to interact with
                /// </summary>
        static IfcApplication Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcApplication"); assert(inst); return inst; }

        IfcOrganization get_ApplicationDeveloper();
        void put_ApplicationDeveloper(IfcOrganization inst);

        IfcLabel get_Version() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Version", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Version(IfcLabel value) { sdaiPutAttrBN(m_instance, "Version", sdaiSTRING, value); }

        IfcLabel get_ApplicationFullName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ApplicationFullName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ApplicationFullName(IfcLabel value) { sdaiPutAttrBN(m_instance, "ApplicationFullName", sdaiSTRING, value); }

        IfcIdentifier get_ApplicationIdentifier() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ApplicationIdentifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ApplicationIdentifier(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ApplicationIdentifier", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAppliedValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAppliedValue : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAppliedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAppliedValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAppliedValue")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcAppliedValueSelect_get get_AppliedValue() { return IfcAppliedValueSelect_get(m_instance, "AppliedValue", NULL); }
        IfcAppliedValueSelect_put put_AppliedValue() { return IfcAppliedValueSelect_put(m_instance, "AppliedValue", NULL); }

        IfcMeasureWithUnit get_UnitBasis();
        void put_UnitBasis(IfcMeasureWithUnit inst);

        IfcDateTimeSelect_get get_ApplicableDate() { return IfcDateTimeSelect_get(m_instance, "ApplicableDate", NULL); }
        IfcDateTimeSelect_put put_ApplicableDate() { return IfcDateTimeSelect_put(m_instance, "ApplicableDate", NULL); }

        IfcDateTimeSelect_get get_FixedUntilDate() { return IfcDateTimeSelect_get(m_instance, "FixedUntilDate", NULL); }
        IfcDateTimeSelect_put put_FixedUntilDate() { return IfcDateTimeSelect_put(m_instance, "FixedUntilDate", NULL); }

        //TList may be SetOfIfcReferencesValueDocument or list of converible elements
        template <typename TList> void get_ValuesReferenced(TList& lst) { SetOfIfcReferencesValueDocumentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ValuesReferenced"); }

        //TList may be SetOfIfcAppliedValueRelationship or list of converible elements
        template <typename TList> void get_ValueOfComponents(TList& lst) { SetOfIfcAppliedValueRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ValueOfComponents"); }

        //TList may be SetOfIfcAppliedValueRelationship or list of converible elements
        template <typename TList> void get_IsComponentIn(TList& lst) { SetOfIfcAppliedValueRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsComponentIn"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAppliedValueRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAppliedValueRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAppliedValueRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAppliedValueRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAppliedValueRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcAppliedValueRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcAppliedValueRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAppliedValueRelationship"); assert(inst); return inst; }

        IfcAppliedValue get_ComponentOfTotal();
        void put_ComponentOfTotal(IfcAppliedValue inst);

        //TList may be SetOfIfcAppliedValue or list of converible elements
        template <typename TList> void get_Components(TList& lst) { SetOfIfcAppliedValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Components"); }

        //TList may be SetOfIfcAppliedValue or list of converible elements
        template <typename TList> void put_Components(TList& lst) { SetOfIfcAppliedValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Components"); }

        //TArrayElem[] may be IfcAppliedValue[] or array of convertible elements
        template <typename TArrayElem> void put_Components(TArrayElem arr[], size_t n) { SetOfIfcAppliedValue lst; ArrayToList(arr, n, lst); put_Components(lst); }

        Nullable<IfcArithmeticOperatorEnum> get_ArithmeticOperator() { int v = getENUM("ArithmeticOperator", IfcArithmeticOperatorEnum_); if (v >= 0) return (IfcArithmeticOperatorEnum) v; else return Nullable<IfcArithmeticOperatorEnum>(); }
        void put_ArithmeticOperator(IfcArithmeticOperatorEnum value) { TextValue val = IfcArithmeticOperatorEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ArithmeticOperator", sdaiENUM, val); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcApproval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcApproval : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcApproval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcApproval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcApproval")
        {}

                /// <summary>
                /// Create new instace of IfcApproval and returns object of this C++ class to interact with
                /// </summary>
        static IfcApproval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcApproval"); assert(inst); return inst; }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcDateTimeSelect_get get_ApprovalDateTime() { return IfcDateTimeSelect_get(m_instance, "ApprovalDateTime", NULL); }
        IfcDateTimeSelect_put put_ApprovalDateTime() { return IfcDateTimeSelect_put(m_instance, "ApprovalDateTime", NULL); }

        IfcLabel get_ApprovalStatus() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ApprovalStatus", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ApprovalStatus(IfcLabel value) { sdaiPutAttrBN(m_instance, "ApprovalStatus", sdaiSTRING, value); }

        IfcLabel get_ApprovalLevel() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ApprovalLevel", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ApprovalLevel(IfcLabel value) { sdaiPutAttrBN(m_instance, "ApprovalLevel", sdaiSTRING, value); }

        IfcText get_ApprovalQualifier() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "ApprovalQualifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ApprovalQualifier(IfcText value) { sdaiPutAttrBN(m_instance, "ApprovalQualifier", sdaiSTRING, value); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcIdentifier get_Identifier() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Identifier(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Identifier", sdaiSTRING, value); }

        //TList may be SetOfIfcApprovalActorRelationship or list of converible elements
        template <typename TList> void get_Actors(TList& lst) { SetOfIfcApprovalActorRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Actors"); }

        //TList may be SetOfIfcApprovalRelationship or list of converible elements
        template <typename TList> void get_IsRelatedWith(TList& lst) { SetOfIfcApprovalRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsRelatedWith"); }

        //TList may be SetOfIfcApprovalRelationship or list of converible elements
        template <typename TList> void get_Relates(TList& lst) { SetOfIfcApprovalRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Relates"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcApprovalActorRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcApprovalActorRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcApprovalActorRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcApprovalActorRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcApprovalActorRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcApprovalActorRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcApprovalActorRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcApprovalActorRelationship"); assert(inst); return inst; }

        IfcActorSelect_get get_Actor() { return IfcActorSelect_get(m_instance, "Actor", NULL); }
        IfcActorSelect_put put_Actor() { return IfcActorSelect_put(m_instance, "Actor", NULL); }

        IfcApproval get_Approval();
        void put_Approval(IfcApproval inst);

        IfcActorRole get_Role();
        void put_Role(IfcActorRole inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcApprovalPropertyRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcApprovalPropertyRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcApprovalPropertyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcApprovalPropertyRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcApprovalPropertyRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcApprovalPropertyRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcApprovalPropertyRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcApprovalPropertyRelationship"); assert(inst); return inst; }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void get_ApprovedProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "ApprovedProperties"); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void put_ApprovedProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ApprovedProperties"); }

        //TArrayElem[] may be IfcProperty[] or array of convertible elements
        template <typename TArrayElem> void put_ApprovedProperties(TArrayElem arr[], size_t n) { SetOfIfcProperty lst; ArrayToList(arr, n, lst); put_ApprovedProperties(lst); }

        IfcApproval get_Approval();
        void put_Approval(IfcApproval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcApprovalRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcApprovalRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcApprovalRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcApprovalRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcApprovalRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcApprovalRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcApprovalRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcApprovalRelationship"); assert(inst); return inst; }

        IfcApproval get_RelatedApproval();
        void put_RelatedApproval(IfcApproval inst);

        IfcApproval get_RelatingApproval();
        void put_RelatingApproval(IfcApproval inst);

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProfileDef : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProfileDef")
        {}


        Nullable<IfcProfileTypeEnum> get_ProfileType() { int v = getENUM("ProfileType", IfcProfileTypeEnum_); if (v >= 0) return (IfcProfileTypeEnum) v; else return Nullable<IfcProfileTypeEnum>(); }
        void put_ProfileType(IfcProfileTypeEnum value) { TextValue val = IfcProfileTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ProfileType", sdaiENUM, val); }

        IfcLabel get_ProfileName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ProfileName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ProfileName(IfcLabel value) { sdaiPutAttrBN(m_instance, "ProfileName", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcArbitraryClosedProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcArbitraryClosedProfileDef : public virtual IfcProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcArbitraryClosedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcArbitraryClosedProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcArbitraryClosedProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcArbitraryClosedProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcArbitraryClosedProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcArbitraryClosedProfileDef"); assert(inst); return inst; }

        IfcCurve get_OuterCurve();
        void put_OuterCurve(IfcCurve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcArbitraryOpenProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcArbitraryOpenProfileDef : public virtual IfcProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcArbitraryOpenProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcArbitraryOpenProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcArbitraryOpenProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcArbitraryOpenProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcArbitraryOpenProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcArbitraryOpenProfileDef"); assert(inst); return inst; }

        IfcBoundedCurve get_Curve();
        void put_Curve(IfcBoundedCurve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcArbitraryProfileDefWithVoids
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcArbitraryProfileDefWithVoids : public virtual IfcArbitraryClosedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcArbitraryProfileDefWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcArbitraryProfileDefWithVoids(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcArbitraryProfileDefWithVoids")
        {}

                /// <summary>
                /// Create new instace of IfcArbitraryProfileDefWithVoids and returns object of this C++ class to interact with
                /// </summary>
        static IfcArbitraryProfileDefWithVoids Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcArbitraryProfileDefWithVoids"); assert(inst); return inst; }

        //TList may be SetOfIfcCurve or list of converible elements
        template <typename TList> void get_InnerCurves(TList& lst) { SetOfIfcCurveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "InnerCurves"); }

        //TList may be SetOfIfcCurve or list of converible elements
        template <typename TList> void put_InnerCurves(TList& lst) { SetOfIfcCurveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "InnerCurves"); }

        //TArrayElem[] may be IfcCurve[] or array of convertible elements
        template <typename TArrayElem> void put_InnerCurves(TArrayElem arr[], size_t n) { SetOfIfcCurve lst; ArrayToList(arr, n, lst); put_InnerCurves(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGroup
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGroup : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGroup(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGroup")
        {}

                /// <summary>
                /// Create new instace of IfcGroup and returns object of this C++ class to interact with
                /// </summary>
        static IfcGroup Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGroup"); assert(inst); return inst; }

        IfcRelAssignsToGroup get_IsGroupedBy();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAsset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAsset : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAsset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAsset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAsset")
        {}

                /// <summary>
                /// Create new instace of IfcAsset and returns object of this C++ class to interact with
                /// </summary>
        static IfcAsset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAsset"); assert(inst); return inst; }

        IfcIdentifier get_AssetID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "AssetID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_AssetID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "AssetID", sdaiSTRING, value); }

        IfcCostValue get_OriginalValue();
        void put_OriginalValue(IfcCostValue inst);

        IfcCostValue get_CurrentValue();
        void put_CurrentValue(IfcCostValue inst);

        IfcCostValue get_TotalReplacementCost();
        void put_TotalReplacementCost(IfcCostValue inst);

        IfcActorSelect_get get_Owner() { return IfcActorSelect_get(m_instance, "Owner", NULL); }
        IfcActorSelect_put put_Owner() { return IfcActorSelect_put(m_instance, "Owner", NULL); }

        IfcActorSelect_get get_User() { return IfcActorSelect_get(m_instance, "User", NULL); }
        IfcActorSelect_put put_User() { return IfcActorSelect_put(m_instance, "User", NULL); }

        IfcPerson get_ResponsiblePerson();
        void put_ResponsiblePerson(IfcPerson inst);

        IfcCalendarDate get_IncorporationDate();
        void put_IncorporationDate(IfcCalendarDate inst);

        IfcCostValue get_DepreciatedValue();
        void put_DepreciatedValue(IfcCostValue inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcParameterizedProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcParameterizedProfileDef : public virtual IfcProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcParameterizedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcParameterizedProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcParameterizedProfileDef")
        {}


        IfcAxis2Placement2D get_Position();
        void put_Position(IfcAxis2Placement2D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcIShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcIShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcIShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcIShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcIShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcIShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcIShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcIShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_OverallWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_OverallDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FilletRadius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAsymmetricIShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAsymmetricIShapeProfileDef : public virtual IfcIShapeProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAsymmetricIShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAsymmetricIShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAsymmetricIShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcAsymmetricIShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcAsymmetricIShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAsymmetricIShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_TopFlangeWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TopFlangeWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TopFlangeWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TopFlangeWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TopFlangeThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TopFlangeThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TopFlangeThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TopFlangeThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TopFlangeFilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TopFlangeFilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TopFlangeFilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TopFlangeFilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInY() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInY(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPlacement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPlacement : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPlacement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPlacement")
        {}


        IfcCartesianPoint get_Location();
        void put_Location(IfcCartesianPoint inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAxis1Placement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAxis1Placement : public virtual IfcPlacement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAxis1Placement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAxis1Placement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAxis1Placement")
        {}

                /// <summary>
                /// Create new instace of IfcAxis1Placement and returns object of this C++ class to interact with
                /// </summary>
        static IfcAxis1Placement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAxis1Placement"); assert(inst); return inst; }

        IfcDirection get_Axis();
        void put_Axis(IfcDirection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAxis2Placement2D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAxis2Placement2D : public virtual IfcPlacement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAxis2Placement2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAxis2Placement2D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAxis2Placement2D")
        {}

                /// <summary>
                /// Create new instace of IfcAxis2Placement2D and returns object of this C++ class to interact with
                /// </summary>
        static IfcAxis2Placement2D Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAxis2Placement2D"); assert(inst); return inst; }

        IfcDirection get_RefDirection();
        void put_RefDirection(IfcDirection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcAxis2Placement3D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcAxis2Placement3D : public virtual IfcPlacement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcAxis2Placement3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcAxis2Placement3D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcAxis2Placement3D")
        {}

                /// <summary>
                /// Create new instace of IfcAxis2Placement3D and returns object of this C++ class to interact with
                /// </summary>
        static IfcAxis2Placement3D Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcAxis2Placement3D"); assert(inst); return inst; }

        IfcDirection get_Axis();
        void put_Axis(IfcDirection inst);

        IfcDirection get_RefDirection();
        void put_RefDirection(IfcDirection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElement : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElement")
        {}


        IfcIdentifier get_Tag() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Tag", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Tag(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Tag", sdaiSTRING, value); }

        //TList may be SetOfIfcRelConnectsStructuralElement or list of converible elements
        template <typename TList> void get_HasStructuralMember(TList& lst) { SetOfIfcRelConnectsStructuralElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasStructuralMember"); }

        //TList may be SetOfIfcRelFillsElement or list of converible elements
        template <typename TList> void get_FillsVoids(TList& lst) { SetOfIfcRelFillsElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "FillsVoids"); }

        //TList may be SetOfIfcRelConnectsElements or list of converible elements
        template <typename TList> void get_ConnectedTo(TList& lst) { SetOfIfcRelConnectsElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ConnectedTo"); }

        //TList may be SetOfIfcRelCoversBldgElements or list of converible elements
        template <typename TList> void get_HasCoverings(TList& lst) { SetOfIfcRelCoversBldgElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasCoverings"); }

        //TList may be SetOfIfcRelProjectsElement or list of converible elements
        template <typename TList> void get_HasProjections(TList& lst) { SetOfIfcRelProjectsElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasProjections"); }

        //TList may be SetOfIfcRelReferencedInSpatialStructure or list of converible elements
        template <typename TList> void get_ReferencedInStructures(TList& lst) { SetOfIfcRelReferencedInSpatialStructureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferencedInStructures"); }

        //TList may be SetOfIfcRelConnectsPortToElement or list of converible elements
        template <typename TList> void get_HasPorts(TList& lst) { SetOfIfcRelConnectsPortToElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasPorts"); }

        //TList may be SetOfIfcRelVoidsElement or list of converible elements
        template <typename TList> void get_HasOpenings(TList& lst) { SetOfIfcRelVoidsElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasOpenings"); }

        //TList may be SetOfIfcRelConnectsWithRealizingElements or list of converible elements
        template <typename TList> void get_IsConnectionRealization(TList& lst) { SetOfIfcRelConnectsWithRealizingElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsConnectionRealization"); }

        //TList may be SetOfIfcRelSpaceBoundary or list of converible elements
        template <typename TList> void get_ProvidesBoundaries(TList& lst) { SetOfIfcRelSpaceBoundarySerializer<TList> sr; sr.FromAttr(lst, m_instance, "ProvidesBoundaries"); }

        //TList may be SetOfIfcRelConnectsElements or list of converible elements
        template <typename TList> void get_ConnectedFrom(TList& lst) { SetOfIfcRelConnectsElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ConnectedFrom"); }

        //TList may be SetOfIfcRelContainedInSpatialStructure or list of converible elements
        template <typename TList> void get_ContainedInStructure(TList& lst) { SetOfIfcRelContainedInSpatialStructureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ContainedInStructure"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingElement")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBeam
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBeam : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBeam
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBeam(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBeam")
        {}

                /// <summary>
                /// Create new instace of IfcBeam and returns object of this C++ class to interact with
                /// </summary>
        static IfcBeam Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBeam"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingElementType : public virtual IfcElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingElementType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBeamType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBeamType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBeamType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBeamType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBeamType")
        {}

                /// <summary>
                /// Create new instace of IfcBeamType and returns object of this C++ class to interact with
                /// </summary>
        static IfcBeamType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBeamType"); assert(inst); return inst; }

        Nullable<IfcBeamTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcBeamTypeEnum_); if (v >= 0) return (IfcBeamTypeEnum) v; else return Nullable<IfcBeamTypeEnum>(); }
        void put_PredefinedType(IfcBeamTypeEnum value) { TextValue val = IfcBeamTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBSplineCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBSplineCurve : public virtual IfcBoundedCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBSplineCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBSplineCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBSplineCurve")
        {}


        Nullable<IntValue> get_Degree() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "Degree", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_Degree(IntValue value) { sdaiPutAttrBN(m_instance, "Degree", sdaiINTEGER, &value); }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void get_ControlPointsList(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ControlPointsList"); }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void put_ControlPointsList(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ControlPointsList"); }

        //TArrayElem[] may be IfcCartesianPoint[] or array of convertible elements
        template <typename TArrayElem> void put_ControlPointsList(TArrayElem arr[], size_t n) { ListOfIfcCartesianPoint lst; ArrayToList(arr, n, lst); put_ControlPointsList(lst); }

        Nullable<IfcBSplineCurveForm> get_CurveForm() { int v = getENUM("CurveForm", IfcBSplineCurveForm_); if (v >= 0) return (IfcBSplineCurveForm) v; else return Nullable<IfcBSplineCurveForm>(); }
        void put_CurveForm(IfcBSplineCurveForm value) { TextValue val = IfcBSplineCurveForm_[(int) value]; sdaiPutAttrBN(m_instance, "CurveForm", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_ClosedCurve() { int v = getENUM("ClosedCurve", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_ClosedCurve(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "ClosedCurve", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_SelfIntersect() { int v = getENUM("SelfIntersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_SelfIntersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "SelfIntersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBezierCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBezierCurve : public virtual IfcBSplineCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBezierCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBezierCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBezierCurve")
        {}

                /// <summary>
                /// Create new instace of IfcBezierCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcBezierCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBezierCurve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceTexture
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceTexture : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceTexture(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceTexture")
        {}


        Nullable<bool> get_RepeatS() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "RepeatS", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_RepeatS(bool value) { sdaiPutAttrBN(m_instance, "RepeatS", sdaiBOOLEAN, &value); }

        Nullable<bool> get_RepeatT() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "RepeatT", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_RepeatT(bool value) { sdaiPutAttrBN(m_instance, "RepeatT", sdaiBOOLEAN, &value); }

        Nullable<IfcSurfaceTextureEnum> get_TextureType() { int v = getENUM("TextureType", IfcSurfaceTextureEnum_); if (v >= 0) return (IfcSurfaceTextureEnum) v; else return Nullable<IfcSurfaceTextureEnum>(); }
        void put_TextureType(IfcSurfaceTextureEnum value) { TextValue val = IfcSurfaceTextureEnum_[(int) value]; sdaiPutAttrBN(m_instance, "TextureType", sdaiENUM, val); }

        IfcCartesianTransformationOperator2D get_TextureTransform();
        void put_TextureTransform(IfcCartesianTransformationOperator2D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBlobTexture
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBlobTexture : public virtual IfcSurfaceTexture
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBlobTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBlobTexture(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBlobTexture")
        {}

                /// <summary>
                /// Create new instace of IfcBlobTexture and returns object of this C++ class to interact with
                /// </summary>
        static IfcBlobTexture Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBlobTexture"); assert(inst); return inst; }

        IfcIdentifier get_RasterFormat() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "RasterFormat", sdaiSTRING, &val)) return val; else return NULL; }
        void put_RasterFormat(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "RasterFormat", sdaiSTRING, value); }

        Nullable<bool> get_RasterCode() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "RasterCode", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_RasterCode(bool value) { sdaiPutAttrBN(m_instance, "RasterCode", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCsgPrimitive3D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCsgPrimitive3D : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCsgPrimitive3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCsgPrimitive3D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCsgPrimitive3D")
        {}


        IfcAxis2Placement3D get_Position();
        void put_Position(IfcAxis2Placement3D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBlock
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBlock : public virtual IfcCsgPrimitive3D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBlock
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBlock(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBlock")
        {}

                /// <summary>
                /// Create new instace of IfcBlock and returns object of this C++ class to interact with
                /// </summary>
        static IfcBlock Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBlock"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_XLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "XLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_XLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "XLength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_YLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "YLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_YLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "YLength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_ZLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ZLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_ZLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "ZLength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoilerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoilerType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoilerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoilerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoilerType")
        {}

                /// <summary>
                /// Create new instace of IfcBoilerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoilerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoilerType"); assert(inst); return inst; }

        Nullable<IfcBoilerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcBoilerTypeEnum_); if (v >= 0) return (IfcBoilerTypeEnum) v; else return Nullable<IfcBoilerTypeEnum>(); }
        void put_PredefinedType(IfcBoilerTypeEnum value) { TextValue val = IfcBoilerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBooleanResult
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBooleanResult : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBooleanResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBooleanResult(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBooleanResult")
        {}

                /// <summary>
                /// Create new instace of IfcBooleanResult and returns object of this C++ class to interact with
                /// </summary>
        static IfcBooleanResult Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBooleanResult"); assert(inst); return inst; }

        Nullable<IfcBooleanOperator> get_Operator() { int v = getENUM("Operator", IfcBooleanOperator_); if (v >= 0) return (IfcBooleanOperator) v; else return Nullable<IfcBooleanOperator>(); }
        void put_Operator(IfcBooleanOperator value) { TextValue val = IfcBooleanOperator_[(int) value]; sdaiPutAttrBN(m_instance, "Operator", sdaiENUM, val); }

        IfcBooleanOperand_get get_FirstOperand() { return IfcBooleanOperand_get(m_instance, "FirstOperand", NULL); }
        IfcBooleanOperand_put put_FirstOperand() { return IfcBooleanOperand_put(m_instance, "FirstOperand", NULL); }

        IfcBooleanOperand_get get_SecondOperand() { return IfcBooleanOperand_get(m_instance, "SecondOperand", NULL); }
        IfcBooleanOperand_put put_SecondOperand() { return IfcBooleanOperand_put(m_instance, "SecondOperand", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBooleanClippingResult
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBooleanClippingResult : public virtual IfcBooleanResult
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBooleanClippingResult
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBooleanClippingResult(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBooleanClippingResult")
        {}

                /// <summary>
                /// Create new instace of IfcBooleanClippingResult and returns object of this C++ class to interact with
                /// </summary>
        static IfcBooleanClippingResult Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBooleanClippingResult"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundaryCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundaryCondition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundaryCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundaryCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundaryCondition")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundaryEdgeCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundaryEdgeCondition : public virtual IfcBoundaryCondition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundaryEdgeCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundaryEdgeCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundaryEdgeCondition")
        {}

                /// <summary>
                /// Create new instace of IfcBoundaryEdgeCondition and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoundaryEdgeCondition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoundaryEdgeCondition"); assert(inst); return inst; }

        Nullable<IfcModulusOfLinearSubgradeReactionMeasure> get_LinearStiffnessByLengthX() { IfcModulusOfLinearSubgradeReactionMeasure val = (IfcModulusOfLinearSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessByLengthX", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfLinearSubgradeReactionMeasure>(); }
        void put_LinearStiffnessByLengthX(IfcModulusOfLinearSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessByLengthX", sdaiREAL, &value); }

        Nullable<IfcModulusOfLinearSubgradeReactionMeasure> get_LinearStiffnessByLengthY() { IfcModulusOfLinearSubgradeReactionMeasure val = (IfcModulusOfLinearSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessByLengthY", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfLinearSubgradeReactionMeasure>(); }
        void put_LinearStiffnessByLengthY(IfcModulusOfLinearSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessByLengthY", sdaiREAL, &value); }

        Nullable<IfcModulusOfLinearSubgradeReactionMeasure> get_LinearStiffnessByLengthZ() { IfcModulusOfLinearSubgradeReactionMeasure val = (IfcModulusOfLinearSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessByLengthZ", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfLinearSubgradeReactionMeasure>(); }
        void put_LinearStiffnessByLengthZ(IfcModulusOfLinearSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessByLengthZ", sdaiREAL, &value); }

        Nullable<IfcModulusOfRotationalSubgradeReactionMeasure> get_RotationalStiffnessByLengthX() { IfcModulusOfRotationalSubgradeReactionMeasure val = (IfcModulusOfRotationalSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalStiffnessByLengthX", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfRotationalSubgradeReactionMeasure>(); }
        void put_RotationalStiffnessByLengthX(IfcModulusOfRotationalSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "RotationalStiffnessByLengthX", sdaiREAL, &value); }

        Nullable<IfcModulusOfRotationalSubgradeReactionMeasure> get_RotationalStiffnessByLengthY() { IfcModulusOfRotationalSubgradeReactionMeasure val = (IfcModulusOfRotationalSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalStiffnessByLengthY", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfRotationalSubgradeReactionMeasure>(); }
        void put_RotationalStiffnessByLengthY(IfcModulusOfRotationalSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "RotationalStiffnessByLengthY", sdaiREAL, &value); }

        Nullable<IfcModulusOfRotationalSubgradeReactionMeasure> get_RotationalStiffnessByLengthZ() { IfcModulusOfRotationalSubgradeReactionMeasure val = (IfcModulusOfRotationalSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalStiffnessByLengthZ", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfRotationalSubgradeReactionMeasure>(); }
        void put_RotationalStiffnessByLengthZ(IfcModulusOfRotationalSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "RotationalStiffnessByLengthZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundaryFaceCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundaryFaceCondition : public virtual IfcBoundaryCondition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundaryFaceCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundaryFaceCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundaryFaceCondition")
        {}

                /// <summary>
                /// Create new instace of IfcBoundaryFaceCondition and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoundaryFaceCondition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoundaryFaceCondition"); assert(inst); return inst; }

        Nullable<IfcModulusOfSubgradeReactionMeasure> get_LinearStiffnessByAreaX() { IfcModulusOfSubgradeReactionMeasure val = (IfcModulusOfSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessByAreaX", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfSubgradeReactionMeasure>(); }
        void put_LinearStiffnessByAreaX(IfcModulusOfSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessByAreaX", sdaiREAL, &value); }

        Nullable<IfcModulusOfSubgradeReactionMeasure> get_LinearStiffnessByAreaY() { IfcModulusOfSubgradeReactionMeasure val = (IfcModulusOfSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessByAreaY", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfSubgradeReactionMeasure>(); }
        void put_LinearStiffnessByAreaY(IfcModulusOfSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessByAreaY", sdaiREAL, &value); }

        Nullable<IfcModulusOfSubgradeReactionMeasure> get_LinearStiffnessByAreaZ() { IfcModulusOfSubgradeReactionMeasure val = (IfcModulusOfSubgradeReactionMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessByAreaZ", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfSubgradeReactionMeasure>(); }
        void put_LinearStiffnessByAreaZ(IfcModulusOfSubgradeReactionMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessByAreaZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundaryNodeCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundaryNodeCondition : public virtual IfcBoundaryCondition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundaryNodeCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundaryNodeCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundaryNodeCondition")
        {}

                /// <summary>
                /// Create new instace of IfcBoundaryNodeCondition and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoundaryNodeCondition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoundaryNodeCondition"); assert(inst); return inst; }

        Nullable<IfcLinearStiffnessMeasure> get_LinearStiffnessX() { IfcLinearStiffnessMeasure val = (IfcLinearStiffnessMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessX", sdaiREAL, &val)) return val; else return Nullable<IfcLinearStiffnessMeasure>(); }
        void put_LinearStiffnessX(IfcLinearStiffnessMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessX", sdaiREAL, &value); }

        Nullable<IfcLinearStiffnessMeasure> get_LinearStiffnessY() { IfcLinearStiffnessMeasure val = (IfcLinearStiffnessMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessY", sdaiREAL, &val)) return val; else return Nullable<IfcLinearStiffnessMeasure>(); }
        void put_LinearStiffnessY(IfcLinearStiffnessMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessY", sdaiREAL, &value); }

        Nullable<IfcLinearStiffnessMeasure> get_LinearStiffnessZ() { IfcLinearStiffnessMeasure val = (IfcLinearStiffnessMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearStiffnessZ", sdaiREAL, &val)) return val; else return Nullable<IfcLinearStiffnessMeasure>(); }
        void put_LinearStiffnessZ(IfcLinearStiffnessMeasure value) { sdaiPutAttrBN(m_instance, "LinearStiffnessZ", sdaiREAL, &value); }

        Nullable<IfcRotationalStiffnessMeasure> get_RotationalStiffnessX() { IfcRotationalStiffnessMeasure val = (IfcRotationalStiffnessMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalStiffnessX", sdaiREAL, &val)) return val; else return Nullable<IfcRotationalStiffnessMeasure>(); }
        void put_RotationalStiffnessX(IfcRotationalStiffnessMeasure value) { sdaiPutAttrBN(m_instance, "RotationalStiffnessX", sdaiREAL, &value); }

        Nullable<IfcRotationalStiffnessMeasure> get_RotationalStiffnessY() { IfcRotationalStiffnessMeasure val = (IfcRotationalStiffnessMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalStiffnessY", sdaiREAL, &val)) return val; else return Nullable<IfcRotationalStiffnessMeasure>(); }
        void put_RotationalStiffnessY(IfcRotationalStiffnessMeasure value) { sdaiPutAttrBN(m_instance, "RotationalStiffnessY", sdaiREAL, &value); }

        Nullable<IfcRotationalStiffnessMeasure> get_RotationalStiffnessZ() { IfcRotationalStiffnessMeasure val = (IfcRotationalStiffnessMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalStiffnessZ", sdaiREAL, &val)) return val; else return Nullable<IfcRotationalStiffnessMeasure>(); }
        void put_RotationalStiffnessZ(IfcRotationalStiffnessMeasure value) { sdaiPutAttrBN(m_instance, "RotationalStiffnessZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundaryNodeConditionWarping
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundaryNodeConditionWarping : public virtual IfcBoundaryNodeCondition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundaryNodeConditionWarping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundaryNodeConditionWarping(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundaryNodeConditionWarping")
        {}

                /// <summary>
                /// Create new instace of IfcBoundaryNodeConditionWarping and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoundaryNodeConditionWarping Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoundaryNodeConditionWarping"); assert(inst); return inst; }

        Nullable<IfcWarpingMomentMeasure> get_WarpingStiffness() { IfcWarpingMomentMeasure val = (IfcWarpingMomentMeasure) 0; if (sdaiGetAttrBN(m_instance, "WarpingStiffness", sdaiREAL, &val)) return val; else return Nullable<IfcWarpingMomentMeasure>(); }
        void put_WarpingStiffness(IfcWarpingMomentMeasure value) { sdaiPutAttrBN(m_instance, "WarpingStiffness", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurface : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurface")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundedSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundedSurface : public virtual IfcSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundedSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundedSurface")
        {}

                /// <summary>
                /// Create new instace of IfcBoundedSurface and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoundedSurface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoundedSurface"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoundingBox
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoundingBox : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoundingBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoundingBox(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoundingBox")
        {}

                /// <summary>
                /// Create new instace of IfcBoundingBox and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoundingBox Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoundingBox"); assert(inst); return inst; }

        IfcCartesianPoint get_Corner();
        void put_Corner(IfcCartesianPoint inst);

        Nullable<IfcPositiveLengthMeasure> get_XDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "XDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_XDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "XDim", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_YDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "YDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_YDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "YDim", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_ZDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ZDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_ZDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "ZDim", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcHalfSpaceSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcHalfSpaceSolid : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcHalfSpaceSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcHalfSpaceSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcHalfSpaceSolid")
        {}

                /// <summary>
                /// Create new instace of IfcHalfSpaceSolid and returns object of this C++ class to interact with
                /// </summary>
        static IfcHalfSpaceSolid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcHalfSpaceSolid"); assert(inst); return inst; }

        IfcSurface get_BaseSurface();
        void put_BaseSurface(IfcSurface inst);

        Nullable<bool> get_AgreementFlag() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "AgreementFlag", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_AgreementFlag(bool value) { sdaiPutAttrBN(m_instance, "AgreementFlag", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBoxedHalfSpace
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBoxedHalfSpace : public virtual IfcHalfSpaceSolid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBoxedHalfSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBoxedHalfSpace(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBoxedHalfSpace")
        {}

                /// <summary>
                /// Create new instace of IfcBoxedHalfSpace and returns object of this C++ class to interact with
                /// </summary>
        static IfcBoxedHalfSpace Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBoxedHalfSpace"); assert(inst); return inst; }

        IfcBoundingBox get_Enclosure();
        void put_Enclosure(IfcBoundingBox inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpatialStructureElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpatialStructureElement : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpatialStructureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpatialStructureElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpatialStructureElement")
        {}


        IfcLabel get_LongName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "LongName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_LongName(IfcLabel value) { sdaiPutAttrBN(m_instance, "LongName", sdaiSTRING, value); }

        Nullable<IfcElementCompositionEnum> get_CompositionType() { int v = getENUM("CompositionType", IfcElementCompositionEnum_); if (v >= 0) return (IfcElementCompositionEnum) v; else return Nullable<IfcElementCompositionEnum>(); }
        void put_CompositionType(IfcElementCompositionEnum value) { TextValue val = IfcElementCompositionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "CompositionType", sdaiENUM, val); }

        //TList may be SetOfIfcRelReferencedInSpatialStructure or list of converible elements
        template <typename TList> void get_ReferencesElements(TList& lst) { SetOfIfcRelReferencedInSpatialStructureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferencesElements"); }

        //TList may be SetOfIfcRelServicesBuildings or list of converible elements
        template <typename TList> void get_ServicedBySystems(TList& lst) { SetOfIfcRelServicesBuildingsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ServicedBySystems"); }

        //TList may be SetOfIfcRelContainedInSpatialStructure or list of converible elements
        template <typename TList> void get_ContainsElements(TList& lst) { SetOfIfcRelContainedInSpatialStructureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ContainsElements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuilding
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuilding : public virtual IfcSpatialStructureElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuilding
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuilding(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuilding")
        {}

                /// <summary>
                /// Create new instace of IfcBuilding and returns object of this C++ class to interact with
                /// </summary>
        static IfcBuilding Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBuilding"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_ElevationOfRefHeight() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ElevationOfRefHeight", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_ElevationOfRefHeight(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "ElevationOfRefHeight", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_ElevationOfTerrain() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ElevationOfTerrain", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_ElevationOfTerrain(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "ElevationOfTerrain", sdaiREAL, &value); }

        IfcPostalAddress get_BuildingAddress();
        void put_BuildingAddress(IfcPostalAddress inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingElementComponent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingElementComponent : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingElementComponent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingElementComponent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingElementComponent")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingElementPart
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingElementPart : public virtual IfcBuildingElementComponent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingElementPart
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingElementPart(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingElementPart")
        {}

                /// <summary>
                /// Create new instace of IfcBuildingElementPart and returns object of this C++ class to interact with
                /// </summary>
        static IfcBuildingElementPart Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBuildingElementPart"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingElementProxy
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingElementProxy : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingElementProxy
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingElementProxy(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingElementProxy")
        {}

                /// <summary>
                /// Create new instace of IfcBuildingElementProxy and returns object of this C++ class to interact with
                /// </summary>
        static IfcBuildingElementProxy Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBuildingElementProxy"); assert(inst); return inst; }

        Nullable<IfcElementCompositionEnum> get_CompositionType() { int v = getENUM("CompositionType", IfcElementCompositionEnum_); if (v >= 0) return (IfcElementCompositionEnum) v; else return Nullable<IfcElementCompositionEnum>(); }
        void put_CompositionType(IfcElementCompositionEnum value) { TextValue val = IfcElementCompositionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "CompositionType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingElementProxyType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingElementProxyType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingElementProxyType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingElementProxyType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingElementProxyType")
        {}

                /// <summary>
                /// Create new instace of IfcBuildingElementProxyType and returns object of this C++ class to interact with
                /// </summary>
        static IfcBuildingElementProxyType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBuildingElementProxyType"); assert(inst); return inst; }

        Nullable<IfcBuildingElementProxyTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcBuildingElementProxyTypeEnum_); if (v >= 0) return (IfcBuildingElementProxyTypeEnum) v; else return Nullable<IfcBuildingElementProxyTypeEnum>(); }
        void put_PredefinedType(IfcBuildingElementProxyTypeEnum value) { TextValue val = IfcBuildingElementProxyTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcBuildingStorey
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcBuildingStorey : public virtual IfcSpatialStructureElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcBuildingStorey
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcBuildingStorey(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcBuildingStorey")
        {}

                /// <summary>
                /// Create new instace of IfcBuildingStorey and returns object of this C++ class to interact with
                /// </summary>
        static IfcBuildingStorey Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcBuildingStorey"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_Elevation() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Elevation", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_Elevation(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "Elevation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowFittingType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowFittingType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowFittingType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowFittingType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCableCarrierFittingType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCableCarrierFittingType : public virtual IfcFlowFittingType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCableCarrierFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCableCarrierFittingType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCableCarrierFittingType")
        {}

                /// <summary>
                /// Create new instace of IfcCableCarrierFittingType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCableCarrierFittingType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCableCarrierFittingType"); assert(inst); return inst; }

        Nullable<IfcCableCarrierFittingTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCableCarrierFittingTypeEnum_); if (v >= 0) return (IfcCableCarrierFittingTypeEnum) v; else return Nullable<IfcCableCarrierFittingTypeEnum>(); }
        void put_PredefinedType(IfcCableCarrierFittingTypeEnum value) { TextValue val = IfcCableCarrierFittingTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowSegmentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowSegmentType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowSegmentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowSegmentType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCableCarrierSegmentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCableCarrierSegmentType : public virtual IfcFlowSegmentType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCableCarrierSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCableCarrierSegmentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCableCarrierSegmentType")
        {}

                /// <summary>
                /// Create new instace of IfcCableCarrierSegmentType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCableCarrierSegmentType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCableCarrierSegmentType"); assert(inst); return inst; }

        Nullable<IfcCableCarrierSegmentTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCableCarrierSegmentTypeEnum_); if (v >= 0) return (IfcCableCarrierSegmentTypeEnum) v; else return Nullable<IfcCableCarrierSegmentTypeEnum>(); }
        void put_PredefinedType(IfcCableCarrierSegmentTypeEnum value) { TextValue val = IfcCableCarrierSegmentTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCableSegmentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCableSegmentType : public virtual IfcFlowSegmentType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCableSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCableSegmentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCableSegmentType")
        {}

                /// <summary>
                /// Create new instace of IfcCableSegmentType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCableSegmentType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCableSegmentType"); assert(inst); return inst; }

        Nullable<IfcCableSegmentTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCableSegmentTypeEnum_); if (v >= 0) return (IfcCableSegmentTypeEnum) v; else return Nullable<IfcCableSegmentTypeEnum>(); }
        void put_PredefinedType(IfcCableSegmentTypeEnum value) { TextValue val = IfcCableSegmentTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCalendarDate
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCalendarDate : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCalendarDate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCalendarDate(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCalendarDate")
        {}

                /// <summary>
                /// Create new instace of IfcCalendarDate and returns object of this C++ class to interact with
                /// </summary>
        static IfcCalendarDate Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCalendarDate"); assert(inst); return inst; }

        Nullable<IfcDayInMonthNumber> get_DayComponent() { IfcDayInMonthNumber val = (IfcDayInMonthNumber) 0; if (sdaiGetAttrBN(m_instance, "DayComponent", sdaiINTEGER, &val)) return val; else return Nullable<IfcDayInMonthNumber>(); }
        void put_DayComponent(IfcDayInMonthNumber value) { sdaiPutAttrBN(m_instance, "DayComponent", sdaiINTEGER, &value); }

        Nullable<IfcMonthInYearNumber> get_MonthComponent() { IfcMonthInYearNumber val = (IfcMonthInYearNumber) 0; if (sdaiGetAttrBN(m_instance, "MonthComponent", sdaiINTEGER, &val)) return val; else return Nullable<IfcMonthInYearNumber>(); }
        void put_MonthComponent(IfcMonthInYearNumber value) { sdaiPutAttrBN(m_instance, "MonthComponent", sdaiINTEGER, &value); }

        Nullable<IfcYearNumber> get_YearComponent() { IfcYearNumber val = (IfcYearNumber) 0; if (sdaiGetAttrBN(m_instance, "YearComponent", sdaiINTEGER, &val)) return val; else return Nullable<IfcYearNumber>(); }
        void put_YearComponent(IfcYearNumber value) { sdaiPutAttrBN(m_instance, "YearComponent", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPoint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPoint : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPoint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPoint")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCartesianPoint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCartesianPoint : public virtual IfcPoint
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCartesianPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCartesianPoint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCartesianPoint")
        {}

                /// <summary>
                /// Create new instace of IfcCartesianPoint and returns object of this C++ class to interact with
                /// </summary>
        static IfcCartesianPoint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCartesianPoint"); assert(inst); return inst; }

        //TList may be ListOfIfcLengthMeasure or list of converible elements
        template <typename TList> void get_Coordinates(TList& lst) { ListOfIfcLengthMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Coordinates"); }

        //TList may be ListOfIfcLengthMeasure or list of converible elements
        template <typename TList> void put_Coordinates(TList& lst) { ListOfIfcLengthMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Coordinates"); }

        //TArrayElem[] may be IfcLengthMeasure[] or array of convertible elements
        template <typename TArrayElem> void put_Coordinates(TArrayElem arr[], size_t n) { ListOfIfcLengthMeasure lst; ArrayToList(arr, n, lst); put_Coordinates(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCartesianTransformationOperator : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCartesianTransformationOperator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCartesianTransformationOperator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCartesianTransformationOperator")
        {}


        IfcDirection get_Axis1();
        void put_Axis1(IfcDirection inst);

        IfcDirection get_Axis2();
        void put_Axis2(IfcDirection inst);

        IfcCartesianPoint get_LocalOrigin();
        void put_LocalOrigin(IfcCartesianPoint inst);

        Nullable<double> get_Scale() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "Scale", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_Scale(double value) { sdaiPutAttrBN(m_instance, "Scale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator2D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCartesianTransformationOperator2D : public virtual IfcCartesianTransformationOperator
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCartesianTransformationOperator2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCartesianTransformationOperator2D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCartesianTransformationOperator2D")
        {}

                /// <summary>
                /// Create new instace of IfcCartesianTransformationOperator2D and returns object of this C++ class to interact with
                /// </summary>
        static IfcCartesianTransformationOperator2D Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator2D"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator2DnonUniform
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCartesianTransformationOperator2DnonUniform : public virtual IfcCartesianTransformationOperator2D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCartesianTransformationOperator2DnonUniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCartesianTransformationOperator2DnonUniform(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCartesianTransformationOperator2DnonUniform")
        {}

                /// <summary>
                /// Create new instace of IfcCartesianTransformationOperator2DnonUniform and returns object of this C++ class to interact with
                /// </summary>
        static IfcCartesianTransformationOperator2DnonUniform Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator2DnonUniform"); assert(inst); return inst; }

        Nullable<double> get_Scale2() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "Scale2", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_Scale2(double value) { sdaiPutAttrBN(m_instance, "Scale2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator3D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCartesianTransformationOperator3D : public virtual IfcCartesianTransformationOperator
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCartesianTransformationOperator3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCartesianTransformationOperator3D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCartesianTransformationOperator3D")
        {}

                /// <summary>
                /// Create new instace of IfcCartesianTransformationOperator3D and returns object of this C++ class to interact with
                /// </summary>
        static IfcCartesianTransformationOperator3D Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator3D"); assert(inst); return inst; }

        IfcDirection get_Axis3();
        void put_Axis3(IfcDirection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCartesianTransformationOperator3DnonUniform
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCartesianTransformationOperator3DnonUniform : public virtual IfcCartesianTransformationOperator3D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCartesianTransformationOperator3DnonUniform
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCartesianTransformationOperator3DnonUniform(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCartesianTransformationOperator3DnonUniform")
        {}

                /// <summary>
                /// Create new instace of IfcCartesianTransformationOperator3DnonUniform and returns object of this C++ class to interact with
                /// </summary>
        static IfcCartesianTransformationOperator3DnonUniform Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCartesianTransformationOperator3DnonUniform"); assert(inst); return inst; }

        Nullable<double> get_Scale2() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "Scale2", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_Scale2(double value) { sdaiPutAttrBN(m_instance, "Scale2", sdaiREAL, &value); }

        Nullable<double> get_Scale3() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "Scale3", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_Scale3(double value) { sdaiPutAttrBN(m_instance, "Scale3", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCenterLineProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCenterLineProfileDef : public virtual IfcArbitraryOpenProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCenterLineProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCenterLineProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCenterLineProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCenterLineProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCenterLineProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCenterLineProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Thickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Thickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Thickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Thickness", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFeatureElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFeatureElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFeatureElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFeatureElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFeatureElement")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFeatureElementSubtraction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFeatureElementSubtraction : public virtual IfcFeatureElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFeatureElementSubtraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFeatureElementSubtraction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFeatureElementSubtraction")
        {}


        IfcRelVoidsElement get_VoidsElements();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEdgeFeature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEdgeFeature : public virtual IfcFeatureElementSubtraction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEdgeFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEdgeFeature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEdgeFeature")
        {}


        Nullable<IfcPositiveLengthMeasure> get_FeatureLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FeatureLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FeatureLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FeatureLength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcChamferEdgeFeature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcChamferEdgeFeature : public virtual IfcEdgeFeature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcChamferEdgeFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcChamferEdgeFeature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcChamferEdgeFeature")
        {}

                /// <summary>
                /// Create new instace of IfcChamferEdgeFeature and returns object of this C++ class to interact with
                /// </summary>
        static IfcChamferEdgeFeature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcChamferEdgeFeature"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Width() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Width", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Width(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Width", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Height() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Height", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Height(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Height", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcChillerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcChillerType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcChillerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcChillerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcChillerType")
        {}

                /// <summary>
                /// Create new instace of IfcChillerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcChillerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcChillerType"); assert(inst); return inst; }

        Nullable<IfcChillerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcChillerTypeEnum_); if (v >= 0) return (IfcChillerTypeEnum) v; else return Nullable<IfcChillerTypeEnum>(); }
        void put_PredefinedType(IfcChillerTypeEnum value) { TextValue val = IfcChillerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConic
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConic : public virtual IfcCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConic(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConic")
        {}


        IfcAxis2Placement_get get_Position() { return IfcAxis2Placement_get(m_instance, "Position", NULL); }
        IfcAxis2Placement_put put_Position() { return IfcAxis2Placement_put(m_instance, "Position", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCircle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCircle : public virtual IfcConic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCircle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCircle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCircle")
        {}

                /// <summary>
                /// Create new instace of IfcCircle and returns object of this C++ class to interact with
                /// </summary>
        static IfcCircle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCircle"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCircleProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCircleProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCircleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCircleProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCircleProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCircleProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCircleProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCircleProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCircleHollowProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCircleHollowProfileDef : public virtual IfcCircleProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCircleHollowProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCircleHollowProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCircleHollowProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCircleHollowProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCircleHollowProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCircleHollowProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_WallThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WallThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WallThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WallThickness", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClassification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClassification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClassification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClassification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClassification")
        {}

                /// <summary>
                /// Create new instace of IfcClassification and returns object of this C++ class to interact with
                /// </summary>
        static IfcClassification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClassification"); assert(inst); return inst; }

        IfcLabel get_Source() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Source", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Source(IfcLabel value) { sdaiPutAttrBN(m_instance, "Source", sdaiSTRING, value); }

        IfcLabel get_Edition() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Edition", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Edition(IfcLabel value) { sdaiPutAttrBN(m_instance, "Edition", sdaiSTRING, value); }

        IfcCalendarDate get_EditionDate();
        void put_EditionDate(IfcCalendarDate inst);

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        //TList may be SetOfIfcClassificationItem or list of converible elements
        template <typename TList> void get_Contains(TList& lst) { SetOfIfcClassificationItemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Contains"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClassificationItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClassificationItem : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClassificationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClassificationItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClassificationItem")
        {}

                /// <summary>
                /// Create new instace of IfcClassificationItem and returns object of this C++ class to interact with
                /// </summary>
        static IfcClassificationItem Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClassificationItem"); assert(inst); return inst; }

        IfcClassificationNotationFacet get_Notation();
        void put_Notation(IfcClassificationNotationFacet inst);

        IfcClassification get_ItemOf();
        void put_ItemOf(IfcClassification inst);

        IfcLabel get_Title() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Title", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Title(IfcLabel value) { sdaiPutAttrBN(m_instance, "Title", sdaiSTRING, value); }

        //TList may be SetOfIfcClassificationItemRelationship or list of converible elements
        template <typename TList> void get_IsClassifiedItemIn(TList& lst) { SetOfIfcClassificationItemRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsClassifiedItemIn"); }

        //TList may be SetOfIfcClassificationItemRelationship or list of converible elements
        template <typename TList> void get_IsClassifyingItemIn(TList& lst) { SetOfIfcClassificationItemRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsClassifyingItemIn"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClassificationItemRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClassificationItemRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClassificationItemRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClassificationItemRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClassificationItemRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcClassificationItemRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcClassificationItemRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClassificationItemRelationship"); assert(inst); return inst; }

        IfcClassificationItem get_RelatingItem();
        void put_RelatingItem(IfcClassificationItem inst);

        //TList may be SetOfIfcClassificationItem or list of converible elements
        template <typename TList> void get_RelatedItems(TList& lst) { SetOfIfcClassificationItemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedItems"); }

        //TList may be SetOfIfcClassificationItem or list of converible elements
        template <typename TList> void put_RelatedItems(TList& lst) { SetOfIfcClassificationItemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedItems"); }

        //TArrayElem[] may be IfcClassificationItem[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedItems(TArrayElem arr[], size_t n) { SetOfIfcClassificationItem lst; ArrayToList(arr, n, lst); put_RelatedItems(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClassificationNotation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClassificationNotation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClassificationNotation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClassificationNotation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClassificationNotation")
        {}

                /// <summary>
                /// Create new instace of IfcClassificationNotation and returns object of this C++ class to interact with
                /// </summary>
        static IfcClassificationNotation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClassificationNotation"); assert(inst); return inst; }

        //TList may be SetOfIfcClassificationNotationFacet or list of converible elements
        template <typename TList> void get_NotationFacets(TList& lst) { SetOfIfcClassificationNotationFacetSerializer<TList> sr; sr.FromAttr(lst, m_instance, "NotationFacets"); }

        //TList may be SetOfIfcClassificationNotationFacet or list of converible elements
        template <typename TList> void put_NotationFacets(TList& lst) { SetOfIfcClassificationNotationFacetSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "NotationFacets"); }

        //TArrayElem[] may be IfcClassificationNotationFacet[] or array of convertible elements
        template <typename TArrayElem> void put_NotationFacets(TArrayElem arr[], size_t n) { SetOfIfcClassificationNotationFacet lst; ArrayToList(arr, n, lst); put_NotationFacets(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClassificationNotationFacet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClassificationNotationFacet : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClassificationNotationFacet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClassificationNotationFacet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClassificationNotationFacet")
        {}

                /// <summary>
                /// Create new instace of IfcClassificationNotationFacet and returns object of this C++ class to interact with
                /// </summary>
        static IfcClassificationNotationFacet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClassificationNotationFacet"); assert(inst); return inst; }

        IfcLabel get_NotationValue() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "NotationValue", sdaiSTRING, &val)) return val; else return NULL; }
        void put_NotationValue(IfcLabel value) { sdaiPutAttrBN(m_instance, "NotationValue", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExternalReference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExternalReference : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExternalReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExternalReference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExternalReference")
        {}


        IfcLabel get_Location() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Location", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Location(IfcLabel value) { sdaiPutAttrBN(m_instance, "Location", sdaiSTRING, value); }

        IfcIdentifier get_ItemReference() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ItemReference", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ItemReference(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ItemReference", sdaiSTRING, value); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClassificationReference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClassificationReference : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClassificationReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClassificationReference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClassificationReference")
        {}

                /// <summary>
                /// Create new instace of IfcClassificationReference and returns object of this C++ class to interact with
                /// </summary>
        static IfcClassificationReference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClassificationReference"); assert(inst); return inst; }

        IfcClassification get_ReferencedSource();
        void put_ReferencedSource(IfcClassification inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTopologicalRepresentationItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTopologicalRepresentationItem : public virtual IfcRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTopologicalRepresentationItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTopologicalRepresentationItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTopologicalRepresentationItem")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectedFaceSet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectedFaceSet : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectedFaceSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectedFaceSet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectedFaceSet")
        {}

                /// <summary>
                /// Create new instace of IfcConnectedFaceSet and returns object of this C++ class to interact with
                /// </summary>
        static IfcConnectedFaceSet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConnectedFaceSet"); assert(inst); return inst; }

        //TList may be SetOfIfcFace or list of converible elements
        template <typename TList> void get_CfsFaces(TList& lst) { SetOfIfcFaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "CfsFaces"); }

        //TList may be SetOfIfcFace or list of converible elements
        template <typename TList> void put_CfsFaces(TList& lst) { SetOfIfcFaceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "CfsFaces"); }

        //TArrayElem[] may be IfcFace[] or array of convertible elements
        template <typename TArrayElem> void put_CfsFaces(TArrayElem arr[], size_t n) { SetOfIfcFace lst; ArrayToList(arr, n, lst); put_CfsFaces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcClosedShell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcClosedShell : public virtual IfcConnectedFaceSet
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcClosedShell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcClosedShell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcClosedShell")
        {}

                /// <summary>
                /// Create new instace of IfcClosedShell and returns object of this C++ class to interact with
                /// </summary>
        static IfcClosedShell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcClosedShell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCoilType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCoilType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCoilType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCoilType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCoilType")
        {}

                /// <summary>
                /// Create new instace of IfcCoilType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCoilType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCoilType"); assert(inst); return inst; }

        Nullable<IfcCoilTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCoilTypeEnum_); if (v >= 0) return (IfcCoilTypeEnum) v; else return Nullable<IfcCoilTypeEnum>(); }
        void put_PredefinedType(IfcCoilTypeEnum value) { TextValue val = IfcCoilTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcColourSpecification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcColourSpecification : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcColourSpecification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcColourSpecification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcColourSpecification")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcColourRgb
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcColourRgb : public virtual IfcColourSpecification
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcColourRgb
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcColourRgb(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcColourRgb")
        {}

                /// <summary>
                /// Create new instace of IfcColourRgb and returns object of this C++ class to interact with
                /// </summary>
        static IfcColourRgb Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcColourRgb"); assert(inst); return inst; }

        Nullable<IfcNormalisedRatioMeasure> get_Red() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Red", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_Red(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "Red", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_Green() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Green", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_Green(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "Green", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_Blue() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Blue", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_Blue(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "Blue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcColumn
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcColumn : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcColumn
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcColumn(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcColumn")
        {}

                /// <summary>
                /// Create new instace of IfcColumn and returns object of this C++ class to interact with
                /// </summary>
        static IfcColumn Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcColumn"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcColumnType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcColumnType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcColumnType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcColumnType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcColumnType")
        {}

                /// <summary>
                /// Create new instace of IfcColumnType and returns object of this C++ class to interact with
                /// </summary>
        static IfcColumnType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcColumnType"); assert(inst); return inst; }

        Nullable<IfcColumnTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcColumnTypeEnum_); if (v >= 0) return (IfcColumnTypeEnum) v; else return Nullable<IfcColumnTypeEnum>(); }
        void put_PredefinedType(IfcColumnTypeEnum value) { TextValue val = IfcColumnTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProperty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProperty : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProperty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProperty")
        {}


        IfcIdentifier get_Name() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        //TList may be SetOfIfcPropertyDependencyRelationship or list of converible elements
        template <typename TList> void get_PropertyForDependance(TList& lst) { SetOfIfcPropertyDependencyRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PropertyForDependance"); }

        //TList may be SetOfIfcPropertyDependencyRelationship or list of converible elements
        template <typename TList> void get_PropertyDependsOn(TList& lst) { SetOfIfcPropertyDependencyRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PropertyDependsOn"); }

        //TList may be SetOfIfcComplexProperty or list of converible elements
        template <typename TList> void get_PartOfComplex(TList& lst) { SetOfIfcComplexPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "PartOfComplex"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcComplexProperty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcComplexProperty : public virtual IfcProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcComplexProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcComplexProperty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcComplexProperty")
        {}

                /// <summary>
                /// Create new instace of IfcComplexProperty and returns object of this C++ class to interact with
                /// </summary>
        static IfcComplexProperty Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcComplexProperty"); assert(inst); return inst; }

        IfcIdentifier get_UsageName() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "UsageName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UsageName(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "UsageName", sdaiSTRING, value); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void get_HasProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasProperties"); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void put_HasProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "HasProperties"); }

        //TArrayElem[] may be IfcProperty[] or array of convertible elements
        template <typename TArrayElem> void put_HasProperties(TArrayElem arr[], size_t n) { SetOfIfcProperty lst; ArrayToList(arr, n, lst); put_HasProperties(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCompositeCurveSegment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCompositeCurveSegment : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCompositeCurveSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCompositeCurveSegment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCompositeCurveSegment")
        {}

                /// <summary>
                /// Create new instace of IfcCompositeCurveSegment and returns object of this C++ class to interact with
                /// </summary>
        static IfcCompositeCurveSegment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCompositeCurveSegment"); assert(inst); return inst; }

        Nullable<IfcTransitionCode> get_Transition() { int v = getENUM("Transition", IfcTransitionCode_); if (v >= 0) return (IfcTransitionCode) v; else return Nullable<IfcTransitionCode>(); }
        void put_Transition(IfcTransitionCode value) { TextValue val = IfcTransitionCode_[(int) value]; sdaiPutAttrBN(m_instance, "Transition", sdaiENUM, val); }

        Nullable<bool> get_SameSense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_SameSense(bool value) { sdaiPutAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &value); }

        IfcCurve get_ParentCurve();
        void put_ParentCurve(IfcCurve inst);

        //TList may be SetOfIfcCompositeCurve or list of converible elements
        template <typename TList> void get_UsingCurves(TList& lst) { SetOfIfcCompositeCurveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "UsingCurves"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCompositeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCompositeProfileDef : public virtual IfcProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCompositeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCompositeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCompositeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCompositeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCompositeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCompositeProfileDef"); assert(inst); return inst; }

        //TList may be SetOfIfcProfileDef or list of converible elements
        template <typename TList> void get_Profiles(TList& lst) { SetOfIfcProfileDefSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Profiles"); }

        //TList may be SetOfIfcProfileDef or list of converible elements
        template <typename TList> void put_Profiles(TList& lst) { SetOfIfcProfileDefSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Profiles"); }

        //TArrayElem[] may be IfcProfileDef[] or array of convertible elements
        template <typename TArrayElem> void put_Profiles(TArrayElem arr[], size_t n) { SetOfIfcProfileDef lst; ArrayToList(arr, n, lst); put_Profiles(lst); }

        IfcLabel get_Label() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Label", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Label(IfcLabel value) { sdaiPutAttrBN(m_instance, "Label", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowMovingDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowMovingDeviceType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowMovingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowMovingDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowMovingDeviceType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCompressorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCompressorType : public virtual IfcFlowMovingDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCompressorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCompressorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCompressorType")
        {}

                /// <summary>
                /// Create new instace of IfcCompressorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCompressorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCompressorType"); assert(inst); return inst; }

        Nullable<IfcCompressorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCompressorTypeEnum_); if (v >= 0) return (IfcCompressorTypeEnum) v; else return Nullable<IfcCompressorTypeEnum>(); }
        void put_PredefinedType(IfcCompressorTypeEnum value) { TextValue val = IfcCompressorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCondenserType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCondenserType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCondenserType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCondenserType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCondenserType")
        {}

                /// <summary>
                /// Create new instace of IfcCondenserType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCondenserType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCondenserType"); assert(inst); return inst; }

        Nullable<IfcCondenserTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCondenserTypeEnum_); if (v >= 0) return (IfcCondenserTypeEnum) v; else return Nullable<IfcCondenserTypeEnum>(); }
        void put_PredefinedType(IfcCondenserTypeEnum value) { TextValue val = IfcCondenserTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCondition : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCondition")
        {}

                /// <summary>
                /// Create new instace of IfcCondition and returns object of this C++ class to interact with
                /// </summary>
        static IfcCondition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCondition"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConditionCriterion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConditionCriterion : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConditionCriterion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConditionCriterion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConditionCriterion")
        {}

                /// <summary>
                /// Create new instace of IfcConditionCriterion and returns object of this C++ class to interact with
                /// </summary>
        static IfcConditionCriterion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConditionCriterion"); assert(inst); return inst; }

        IfcConditionCriterionSelect_get get_Criterion() { return IfcConditionCriterionSelect_get(m_instance, "Criterion", NULL); }
        IfcConditionCriterionSelect_put put_Criterion() { return IfcConditionCriterionSelect_put(m_instance, "Criterion", NULL); }

        IfcDateTimeSelect_get get_CriterionDateTime() { return IfcDateTimeSelect_get(m_instance, "CriterionDateTime", NULL); }
        IfcDateTimeSelect_put put_CriterionDateTime() { return IfcDateTimeSelect_put(m_instance, "CriterionDateTime", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectionGeometry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectionGeometry : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectionGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectionGeometry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectionGeometry")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectionCurveGeometry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectionCurveGeometry : public virtual IfcConnectionGeometry
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectionCurveGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectionCurveGeometry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectionCurveGeometry")
        {}

                /// <summary>
                /// Create new instace of IfcConnectionCurveGeometry and returns object of this C++ class to interact with
                /// </summary>
        static IfcConnectionCurveGeometry Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConnectionCurveGeometry"); assert(inst); return inst; }

        IfcCurveOrEdgeCurve_get get_CurveOnRelatingElement() { return IfcCurveOrEdgeCurve_get(m_instance, "CurveOnRelatingElement", NULL); }
        IfcCurveOrEdgeCurve_put put_CurveOnRelatingElement() { return IfcCurveOrEdgeCurve_put(m_instance, "CurveOnRelatingElement", NULL); }

        IfcCurveOrEdgeCurve_get get_CurveOnRelatedElement() { return IfcCurveOrEdgeCurve_get(m_instance, "CurveOnRelatedElement", NULL); }
        IfcCurveOrEdgeCurve_put put_CurveOnRelatedElement() { return IfcCurveOrEdgeCurve_put(m_instance, "CurveOnRelatedElement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectionPointGeometry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectionPointGeometry : public virtual IfcConnectionGeometry
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectionPointGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectionPointGeometry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectionPointGeometry")
        {}

                /// <summary>
                /// Create new instace of IfcConnectionPointGeometry and returns object of this C++ class to interact with
                /// </summary>
        static IfcConnectionPointGeometry Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConnectionPointGeometry"); assert(inst); return inst; }

        IfcPointOrVertexPoint_get get_PointOnRelatingElement() { return IfcPointOrVertexPoint_get(m_instance, "PointOnRelatingElement", NULL); }
        IfcPointOrVertexPoint_put put_PointOnRelatingElement() { return IfcPointOrVertexPoint_put(m_instance, "PointOnRelatingElement", NULL); }

        IfcPointOrVertexPoint_get get_PointOnRelatedElement() { return IfcPointOrVertexPoint_get(m_instance, "PointOnRelatedElement", NULL); }
        IfcPointOrVertexPoint_put put_PointOnRelatedElement() { return IfcPointOrVertexPoint_put(m_instance, "PointOnRelatedElement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectionPointEccentricity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectionPointEccentricity : public virtual IfcConnectionPointGeometry
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectionPointEccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectionPointEccentricity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectionPointEccentricity")
        {}

                /// <summary>
                /// Create new instace of IfcConnectionPointEccentricity and returns object of this C++ class to interact with
                /// </summary>
        static IfcConnectionPointEccentricity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConnectionPointEccentricity"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_EccentricityInX() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EccentricityInX", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_EccentricityInX(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "EccentricityInX", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_EccentricityInY() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EccentricityInY", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_EccentricityInY(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "EccentricityInY", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_EccentricityInZ() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EccentricityInZ", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_EccentricityInZ(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "EccentricityInZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectionPortGeometry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectionPortGeometry : public virtual IfcConnectionGeometry
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectionPortGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectionPortGeometry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectionPortGeometry")
        {}

                /// <summary>
                /// Create new instace of IfcConnectionPortGeometry and returns object of this C++ class to interact with
                /// </summary>
        static IfcConnectionPortGeometry Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConnectionPortGeometry"); assert(inst); return inst; }

        IfcAxis2Placement_get get_LocationAtRelatingElement() { return IfcAxis2Placement_get(m_instance, "LocationAtRelatingElement", NULL); }
        IfcAxis2Placement_put put_LocationAtRelatingElement() { return IfcAxis2Placement_put(m_instance, "LocationAtRelatingElement", NULL); }

        IfcAxis2Placement_get get_LocationAtRelatedElement() { return IfcAxis2Placement_get(m_instance, "LocationAtRelatedElement", NULL); }
        IfcAxis2Placement_put put_LocationAtRelatedElement() { return IfcAxis2Placement_put(m_instance, "LocationAtRelatedElement", NULL); }

        IfcProfileDef get_ProfileOfPort();
        void put_ProfileOfPort(IfcProfileDef inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConnectionSurfaceGeometry
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConnectionSurfaceGeometry : public virtual IfcConnectionGeometry
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConnectionSurfaceGeometry
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConnectionSurfaceGeometry(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConnectionSurfaceGeometry")
        {}

                /// <summary>
                /// Create new instace of IfcConnectionSurfaceGeometry and returns object of this C++ class to interact with
                /// </summary>
        static IfcConnectionSurfaceGeometry Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConnectionSurfaceGeometry"); assert(inst); return inst; }

        IfcSurfaceOrFaceSurface_get get_SurfaceOnRelatingElement() { return IfcSurfaceOrFaceSurface_get(m_instance, "SurfaceOnRelatingElement", NULL); }
        IfcSurfaceOrFaceSurface_put put_SurfaceOnRelatingElement() { return IfcSurfaceOrFaceSurface_put(m_instance, "SurfaceOnRelatingElement", NULL); }

        IfcSurfaceOrFaceSurface_get get_SurfaceOnRelatedElement() { return IfcSurfaceOrFaceSurface_get(m_instance, "SurfaceOnRelatedElement", NULL); }
        IfcSurfaceOrFaceSurface_put put_SurfaceOnRelatedElement() { return IfcSurfaceOrFaceSurface_put(m_instance, "SurfaceOnRelatedElement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstraint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstraint : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstraint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstraint")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        Nullable<IfcConstraintEnum> get_ConstraintGrade() { int v = getENUM("ConstraintGrade", IfcConstraintEnum_); if (v >= 0) return (IfcConstraintEnum) v; else return Nullable<IfcConstraintEnum>(); }
        void put_ConstraintGrade(IfcConstraintEnum value) { TextValue val = IfcConstraintEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ConstraintGrade", sdaiENUM, val); }

        IfcLabel get_ConstraintSource() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ConstraintSource", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ConstraintSource(IfcLabel value) { sdaiPutAttrBN(m_instance, "ConstraintSource", sdaiSTRING, value); }

        IfcActorSelect_get get_CreatingActor() { return IfcActorSelect_get(m_instance, "CreatingActor", NULL); }
        IfcActorSelect_put put_CreatingActor() { return IfcActorSelect_put(m_instance, "CreatingActor", NULL); }

        IfcDateTimeSelect_get get_CreationTime() { return IfcDateTimeSelect_get(m_instance, "CreationTime", NULL); }
        IfcDateTimeSelect_put put_CreationTime() { return IfcDateTimeSelect_put(m_instance, "CreationTime", NULL); }

        IfcLabel get_UserDefinedGrade() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedGrade", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedGrade(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedGrade", sdaiSTRING, value); }

        //TList may be SetOfIfcConstraintClassificationRelationship or list of converible elements
        template <typename TList> void get_ClassifiedAs(TList& lst) { SetOfIfcConstraintClassificationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ClassifiedAs"); }

        //TList may be SetOfIfcConstraintRelationship or list of converible elements
        template <typename TList> void get_RelatesConstraints(TList& lst) { SetOfIfcConstraintRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatesConstraints"); }

        //TList may be SetOfIfcConstraintRelationship or list of converible elements
        template <typename TList> void get_IsRelatedWith(TList& lst) { SetOfIfcConstraintRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsRelatedWith"); }

        //TList may be SetOfIfcPropertyConstraintRelationship or list of converible elements
        template <typename TList> void get_PropertiesForConstraint(TList& lst) { SetOfIfcPropertyConstraintRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PropertiesForConstraint"); }

        //TList may be SetOfIfcConstraintAggregationRelationship or list of converible elements
        template <typename TList> void get_Aggregates(TList& lst) { SetOfIfcConstraintAggregationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Aggregates"); }

        //TList may be SetOfIfcConstraintAggregationRelationship or list of converible elements
        template <typename TList> void get_IsAggregatedIn(TList& lst) { SetOfIfcConstraintAggregationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsAggregatedIn"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstraintAggregationRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstraintAggregationRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstraintAggregationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstraintAggregationRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstraintAggregationRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcConstraintAggregationRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcConstraintAggregationRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConstraintAggregationRelationship"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcConstraint get_RelatingConstraint();
        void put_RelatingConstraint(IfcConstraint inst);

        //TList may be ListOfIfcConstraint or list of converible elements
        template <typename TList> void get_RelatedConstraints(TList& lst) { ListOfIfcConstraintSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedConstraints"); }

        //TList may be ListOfIfcConstraint or list of converible elements
        template <typename TList> void put_RelatedConstraints(TList& lst) { ListOfIfcConstraintSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedConstraints"); }

        //TArrayElem[] may be IfcConstraint[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedConstraints(TArrayElem arr[], size_t n) { ListOfIfcConstraint lst; ArrayToList(arr, n, lst); put_RelatedConstraints(lst); }

        Nullable<IfcLogicalOperatorEnum> get_LogicalAggregator() { int v = getENUM("LogicalAggregator", IfcLogicalOperatorEnum_); if (v >= 0) return (IfcLogicalOperatorEnum) v; else return Nullable<IfcLogicalOperatorEnum>(); }
        void put_LogicalAggregator(IfcLogicalOperatorEnum value) { TextValue val = IfcLogicalOperatorEnum_[(int) value]; sdaiPutAttrBN(m_instance, "LogicalAggregator", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstraintClassificationRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstraintClassificationRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstraintClassificationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstraintClassificationRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstraintClassificationRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcConstraintClassificationRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcConstraintClassificationRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConstraintClassificationRelationship"); assert(inst); return inst; }

        IfcConstraint get_ClassifiedConstraint();
        void put_ClassifiedConstraint(IfcConstraint inst);

        //TList may be SetOfIfcClassificationNotationSelect or list of converible elements
        template <typename TList> void get_RelatedClassifications(TList& lst) { SetOfIfcClassificationNotationSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedClassifications"); }

        //TList may be SetOfIfcClassificationNotationSelect or list of converible elements
        template <typename TList> void put_RelatedClassifications(TList& lst) { SetOfIfcClassificationNotationSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedClassifications"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstraintRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstraintRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstraintRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstraintRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstraintRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcConstraintRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcConstraintRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConstraintRelationship"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcConstraint get_RelatingConstraint();
        void put_RelatingConstraint(IfcConstraint inst);

        //TList may be SetOfIfcConstraint or list of converible elements
        template <typename TList> void get_RelatedConstraints(TList& lst) { SetOfIfcConstraintSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedConstraints"); }

        //TList may be SetOfIfcConstraint or list of converible elements
        template <typename TList> void put_RelatedConstraints(TList& lst) { SetOfIfcConstraintSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedConstraints"); }

        //TArrayElem[] may be IfcConstraint[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedConstraints(TArrayElem arr[], size_t n) { SetOfIfcConstraint lst; ArrayToList(arr, n, lst); put_RelatedConstraints(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcResource : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcResource")
        {}


        //TList may be SetOfIfcRelAssignsToResource or list of converible elements
        template <typename TList> void get_ResourceOf(TList& lst) { SetOfIfcRelAssignsToResourceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ResourceOf"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstructionResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstructionResource : public virtual IfcResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstructionResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstructionResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstructionResource")
        {}


        IfcIdentifier get_ResourceIdentifier() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ResourceIdentifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ResourceIdentifier(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ResourceIdentifier", sdaiSTRING, value); }

        IfcLabel get_ResourceGroup() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ResourceGroup", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ResourceGroup(IfcLabel value) { sdaiPutAttrBN(m_instance, "ResourceGroup", sdaiSTRING, value); }

        Nullable<IfcResourceConsumptionEnum> get_ResourceConsumption() { int v = getENUM("ResourceConsumption", IfcResourceConsumptionEnum_); if (v >= 0) return (IfcResourceConsumptionEnum) v; else return Nullable<IfcResourceConsumptionEnum>(); }
        void put_ResourceConsumption(IfcResourceConsumptionEnum value) { TextValue val = IfcResourceConsumptionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ResourceConsumption", sdaiENUM, val); }

        IfcMeasureWithUnit get_BaseQuantity();
        void put_BaseQuantity(IfcMeasureWithUnit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstructionEquipmentResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstructionEquipmentResource : public virtual IfcConstructionResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstructionEquipmentResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstructionEquipmentResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstructionEquipmentResource")
        {}

                /// <summary>
                /// Create new instace of IfcConstructionEquipmentResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcConstructionEquipmentResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConstructionEquipmentResource"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstructionMaterialResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstructionMaterialResource : public virtual IfcConstructionResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstructionMaterialResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstructionMaterialResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstructionMaterialResource")
        {}

                /// <summary>
                /// Create new instace of IfcConstructionMaterialResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcConstructionMaterialResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConstructionMaterialResource"); assert(inst); return inst; }

        //TList may be SetOfIfcActorSelect or list of converible elements
        template <typename TList> void get_Suppliers(TList& lst) { SetOfIfcActorSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Suppliers"); }

        //TList may be SetOfIfcActorSelect or list of converible elements
        template <typename TList> void put_Suppliers(TList& lst) { SetOfIfcActorSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Suppliers"); }

        Nullable<IfcRatioMeasure> get_UsageRatio() { IfcRatioMeasure val = (IfcRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "UsageRatio", sdaiREAL, &val)) return val; else return Nullable<IfcRatioMeasure>(); }
        void put_UsageRatio(IfcRatioMeasure value) { sdaiPutAttrBN(m_instance, "UsageRatio", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConstructionProductResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConstructionProductResource : public virtual IfcConstructionResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConstructionProductResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConstructionProductResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConstructionProductResource")
        {}

                /// <summary>
                /// Create new instace of IfcConstructionProductResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcConstructionProductResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConstructionProductResource"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcNamedUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcNamedUnit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcNamedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcNamedUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcNamedUnit")
        {}


        IfcDimensionalExponents get_Dimensions();
        void put_Dimensions(IfcDimensionalExponents inst);

        Nullable<IfcUnitEnum> get_UnitType() { int v = getENUM("UnitType", IfcUnitEnum_); if (v >= 0) return (IfcUnitEnum) v; else return Nullable<IfcUnitEnum>(); }
        void put_UnitType(IfcUnitEnum value) { TextValue val = IfcUnitEnum_[(int) value]; sdaiPutAttrBN(m_instance, "UnitType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcContextDependentUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcContextDependentUnit : public virtual IfcNamedUnit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcContextDependentUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcContextDependentUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcContextDependentUnit")
        {}

                /// <summary>
                /// Create new instace of IfcContextDependentUnit and returns object of this C++ class to interact with
                /// </summary>
        static IfcContextDependentUnit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcContextDependentUnit"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcControllerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcControllerType : public virtual IfcDistributionControlElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcControllerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcControllerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcControllerType")
        {}

                /// <summary>
                /// Create new instace of IfcControllerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcControllerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcControllerType"); assert(inst); return inst; }

        Nullable<IfcControllerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcControllerTypeEnum_); if (v >= 0) return (IfcControllerTypeEnum) v; else return Nullable<IfcControllerTypeEnum>(); }
        void put_PredefinedType(IfcControllerTypeEnum value) { TextValue val = IfcControllerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcConversionBasedUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcConversionBasedUnit : public virtual IfcNamedUnit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcConversionBasedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcConversionBasedUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcConversionBasedUnit")
        {}

                /// <summary>
                /// Create new instace of IfcConversionBasedUnit and returns object of this C++ class to interact with
                /// </summary>
        static IfcConversionBasedUnit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcConversionBasedUnit"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcMeasureWithUnit get_ConversionFactor();
        void put_ConversionFactor(IfcMeasureWithUnit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCooledBeamType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCooledBeamType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCooledBeamType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCooledBeamType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCooledBeamType")
        {}

                /// <summary>
                /// Create new instace of IfcCooledBeamType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCooledBeamType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCooledBeamType"); assert(inst); return inst; }

        Nullable<IfcCooledBeamTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCooledBeamTypeEnum_); if (v >= 0) return (IfcCooledBeamTypeEnum) v; else return Nullable<IfcCooledBeamTypeEnum>(); }
        void put_PredefinedType(IfcCooledBeamTypeEnum value) { TextValue val = IfcCooledBeamTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCoolingTowerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCoolingTowerType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCoolingTowerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCoolingTowerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCoolingTowerType")
        {}

                /// <summary>
                /// Create new instace of IfcCoolingTowerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCoolingTowerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCoolingTowerType"); assert(inst); return inst; }

        Nullable<IfcCoolingTowerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCoolingTowerTypeEnum_); if (v >= 0) return (IfcCoolingTowerTypeEnum) v; else return Nullable<IfcCoolingTowerTypeEnum>(); }
        void put_PredefinedType(IfcCoolingTowerTypeEnum value) { TextValue val = IfcCoolingTowerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCoordinatedUniversalTimeOffset
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCoordinatedUniversalTimeOffset : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCoordinatedUniversalTimeOffset
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCoordinatedUniversalTimeOffset(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCoordinatedUniversalTimeOffset")
        {}

                /// <summary>
                /// Create new instace of IfcCoordinatedUniversalTimeOffset and returns object of this C++ class to interact with
                /// </summary>
        static IfcCoordinatedUniversalTimeOffset Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCoordinatedUniversalTimeOffset"); assert(inst); return inst; }

        Nullable<IfcHourInDay> get_HourOffset() { IfcHourInDay val = (IfcHourInDay) 0; if (sdaiGetAttrBN(m_instance, "HourOffset", sdaiINTEGER, &val)) return val; else return Nullable<IfcHourInDay>(); }
        void put_HourOffset(IfcHourInDay value) { sdaiPutAttrBN(m_instance, "HourOffset", sdaiINTEGER, &value); }

        Nullable<IfcMinuteInHour> get_MinuteOffset() { IfcMinuteInHour val = (IfcMinuteInHour) 0; if (sdaiGetAttrBN(m_instance, "MinuteOffset", sdaiINTEGER, &val)) return val; else return Nullable<IfcMinuteInHour>(); }
        void put_MinuteOffset(IfcMinuteInHour value) { sdaiPutAttrBN(m_instance, "MinuteOffset", sdaiINTEGER, &value); }

        Nullable<IfcAheadOrBehind> get_Sense() { int v = getENUM("Sense", IfcAheadOrBehind_); if (v >= 0) return (IfcAheadOrBehind) v; else return Nullable<IfcAheadOrBehind>(); }
        void put_Sense(IfcAheadOrBehind value) { TextValue val = IfcAheadOrBehind_[(int) value]; sdaiPutAttrBN(m_instance, "Sense", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCostItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCostItem : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCostItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCostItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCostItem")
        {}

                /// <summary>
                /// Create new instace of IfcCostItem and returns object of this C++ class to interact with
                /// </summary>
        static IfcCostItem Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCostItem"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCostSchedule
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCostSchedule : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCostSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCostSchedule(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCostSchedule")
        {}

                /// <summary>
                /// Create new instace of IfcCostSchedule and returns object of this C++ class to interact with
                /// </summary>
        static IfcCostSchedule Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCostSchedule"); assert(inst); return inst; }

        IfcActorSelect_get get_SubmittedBy() { return IfcActorSelect_get(m_instance, "SubmittedBy", NULL); }
        IfcActorSelect_put put_SubmittedBy() { return IfcActorSelect_put(m_instance, "SubmittedBy", NULL); }

        IfcActorSelect_get get_PreparedBy() { return IfcActorSelect_get(m_instance, "PreparedBy", NULL); }
        IfcActorSelect_put put_PreparedBy() { return IfcActorSelect_put(m_instance, "PreparedBy", NULL); }

        IfcDateTimeSelect_get get_SubmittedOn() { return IfcDateTimeSelect_get(m_instance, "SubmittedOn", NULL); }
        IfcDateTimeSelect_put put_SubmittedOn() { return IfcDateTimeSelect_put(m_instance, "SubmittedOn", NULL); }

        IfcLabel get_Status() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Status(IfcLabel value) { sdaiPutAttrBN(m_instance, "Status", sdaiSTRING, value); }

        //TList may be SetOfIfcActorSelect or list of converible elements
        template <typename TList> void get_TargetUsers(TList& lst) { SetOfIfcActorSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "TargetUsers"); }

        //TList may be SetOfIfcActorSelect or list of converible elements
        template <typename TList> void put_TargetUsers(TList& lst) { SetOfIfcActorSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "TargetUsers"); }

        IfcDateTimeSelect_get get_UpdateDate() { return IfcDateTimeSelect_get(m_instance, "UpdateDate", NULL); }
        IfcDateTimeSelect_put put_UpdateDate() { return IfcDateTimeSelect_put(m_instance, "UpdateDate", NULL); }

        IfcIdentifier get_ID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ID", sdaiSTRING, value); }

        Nullable<IfcCostScheduleTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCostScheduleTypeEnum_); if (v >= 0) return (IfcCostScheduleTypeEnum) v; else return Nullable<IfcCostScheduleTypeEnum>(); }
        void put_PredefinedType(IfcCostScheduleTypeEnum value) { TextValue val = IfcCostScheduleTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCostValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCostValue : public virtual IfcAppliedValue
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCostValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCostValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCostValue")
        {}

                /// <summary>
                /// Create new instace of IfcCostValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcCostValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCostValue"); assert(inst); return inst; }

        IfcLabel get_CostType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "CostType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_CostType(IfcLabel value) { sdaiPutAttrBN(m_instance, "CostType", sdaiSTRING, value); }

        IfcText get_Condition() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Condition", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Condition(IfcText value) { sdaiPutAttrBN(m_instance, "Condition", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCovering
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCovering : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCovering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCovering(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCovering")
        {}

                /// <summary>
                /// Create new instace of IfcCovering and returns object of this C++ class to interact with
                /// </summary>
        static IfcCovering Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCovering"); assert(inst); return inst; }

        Nullable<IfcCoveringTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCoveringTypeEnum_); if (v >= 0) return (IfcCoveringTypeEnum) v; else return Nullable<IfcCoveringTypeEnum>(); }
        void put_PredefinedType(IfcCoveringTypeEnum value) { TextValue val = IfcCoveringTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        //TList may be SetOfIfcRelCoversSpaces or list of converible elements
        template <typename TList> void get_CoversSpaces(TList& lst) { SetOfIfcRelCoversSpacesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "CoversSpaces"); }

        //TList may be SetOfIfcRelCoversBldgElements or list of converible elements
        template <typename TList> void get_Covers(TList& lst) { SetOfIfcRelCoversBldgElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Covers"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCoveringType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCoveringType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCoveringType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCoveringType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCoveringType")
        {}

                /// <summary>
                /// Create new instace of IfcCoveringType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCoveringType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCoveringType"); assert(inst); return inst; }

        Nullable<IfcCoveringTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCoveringTypeEnum_); if (v >= 0) return (IfcCoveringTypeEnum) v; else return Nullable<IfcCoveringTypeEnum>(); }
        void put_PredefinedType(IfcCoveringTypeEnum value) { TextValue val = IfcCoveringTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCraneRailAShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCraneRailAShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCraneRailAShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCraneRailAShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCraneRailAShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCraneRailAShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCraneRailAShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCraneRailAShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_OverallHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseWidth2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseWidth2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseWidth2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseWidth2", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_HeadWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "HeadWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_HeadWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "HeadWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_HeadDepth2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "HeadDepth2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_HeadDepth2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "HeadDepth2", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_HeadDepth3() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "HeadDepth3", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_HeadDepth3(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "HeadDepth3", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseWidth4() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseWidth4", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseWidth4(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseWidth4", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseDepth1() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseDepth1", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseDepth1(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseDepth1", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseDepth2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseDepth2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseDepth2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseDepth2", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseDepth3() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseDepth3", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseDepth3(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseDepth3", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInY() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInY(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCraneRailFShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCraneRailFShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCraneRailFShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCraneRailFShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCraneRailFShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCraneRailFShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCraneRailFShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCraneRailFShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_OverallHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_HeadWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "HeadWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_HeadWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "HeadWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_HeadDepth2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "HeadDepth2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_HeadDepth2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "HeadDepth2", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_HeadDepth3() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "HeadDepth3", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_HeadDepth3(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "HeadDepth3", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseDepth1() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseDepth1", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseDepth1(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseDepth1", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BaseDepth2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BaseDepth2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BaseDepth2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BaseDepth2", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInY() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInY(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCrewResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCrewResource : public virtual IfcConstructionResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCrewResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCrewResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCrewResource")
        {}

                /// <summary>
                /// Create new instace of IfcCrewResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcCrewResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCrewResource"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSolidModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSolidModel : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSolidModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSolidModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSolidModel")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCsgSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCsgSolid : public virtual IfcSolidModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCsgSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCsgSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCsgSolid")
        {}

                /// <summary>
                /// Create new instace of IfcCsgSolid and returns object of this C++ class to interact with
                /// </summary>
        static IfcCsgSolid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCsgSolid"); assert(inst); return inst; }

        IfcCsgSelect_get get_TreeRootExpression() { return IfcCsgSelect_get(m_instance, "TreeRootExpression", NULL); }
        IfcCsgSelect_put put_TreeRootExpression() { return IfcCsgSelect_put(m_instance, "TreeRootExpression", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcCShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcCShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Depth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Depth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Width() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Width", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Width(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Width", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WallThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WallThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WallThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WallThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Girth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Girth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Girth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Girth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_InternalFilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "InternalFilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_InternalFilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "InternalFilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInX() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInX(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurrencyRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurrencyRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurrencyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurrencyRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurrencyRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcCurrencyRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurrencyRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurrencyRelationship"); assert(inst); return inst; }

        IfcMonetaryUnit get_RelatingMonetaryUnit();
        void put_RelatingMonetaryUnit(IfcMonetaryUnit inst);

        IfcMonetaryUnit get_RelatedMonetaryUnit();
        void put_RelatedMonetaryUnit(IfcMonetaryUnit inst);

        Nullable<IfcPositiveRatioMeasure> get_ExchangeRate() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ExchangeRate", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_ExchangeRate(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "ExchangeRate", sdaiREAL, &value); }

        IfcDateAndTime get_RateDateTime();
        void put_RateDateTime(IfcDateAndTime inst);

        IfcLibraryInformation get_RateSource();
        void put_RateSource(IfcLibraryInformation inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurtainWall
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurtainWall : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurtainWall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurtainWall(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurtainWall")
        {}

                /// <summary>
                /// Create new instace of IfcCurtainWall and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurtainWall Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurtainWall"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurtainWallType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurtainWallType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurtainWallType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurtainWallType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurtainWallType")
        {}

                /// <summary>
                /// Create new instace of IfcCurtainWallType and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurtainWallType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurtainWallType"); assert(inst); return inst; }

        Nullable<IfcCurtainWallTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcCurtainWallTypeEnum_); if (v >= 0) return (IfcCurtainWallTypeEnum) v; else return Nullable<IfcCurtainWallTypeEnum>(); }
        void put_PredefinedType(IfcCurtainWallTypeEnum value) { TextValue val = IfcCurtainWallTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurveBoundedPlane
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurveBoundedPlane : public virtual IfcBoundedSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurveBoundedPlane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurveBoundedPlane(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurveBoundedPlane")
        {}

                /// <summary>
                /// Create new instace of IfcCurveBoundedPlane and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurveBoundedPlane Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurveBoundedPlane"); assert(inst); return inst; }

        IfcPlane get_BasisSurface();
        void put_BasisSurface(IfcPlane inst);

        IfcCurve get_OuterBoundary();
        void put_OuterBoundary(IfcCurve inst);

        //TList may be SetOfIfcCurve or list of converible elements
        template <typename TList> void get_InnerBoundaries(TList& lst) { SetOfIfcCurveSerializer<TList> sr; sr.FromAttr(lst, m_instance, "InnerBoundaries"); }

        //TList may be SetOfIfcCurve or list of converible elements
        template <typename TList> void put_InnerBoundaries(TList& lst) { SetOfIfcCurveSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "InnerBoundaries"); }

        //TArrayElem[] may be IfcCurve[] or array of convertible elements
        template <typename TArrayElem> void put_InnerBoundaries(TArrayElem arr[], size_t n) { SetOfIfcCurve lst; ArrayToList(arr, n, lst); put_InnerBoundaries(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPresentationStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPresentationStyle : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPresentationStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPresentationStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPresentationStyle")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurveStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurveStyle : public virtual IfcPresentationStyle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurveStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurveStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurveStyle")
        {}

                /// <summary>
                /// Create new instace of IfcCurveStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurveStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurveStyle"); assert(inst); return inst; }

        IfcCurveFontOrScaledCurveFontSelect_get get_CurveFont() { return IfcCurveFontOrScaledCurveFontSelect_get(m_instance, "CurveFont", NULL); }
        IfcCurveFontOrScaledCurveFontSelect_put put_CurveFont() { return IfcCurveFontOrScaledCurveFontSelect_put(m_instance, "CurveFont", NULL); }

        IfcSizeSelect_get get_CurveWidth() { return IfcSizeSelect_get(m_instance, "CurveWidth", NULL); }
        IfcSizeSelect_put put_CurveWidth() { return IfcSizeSelect_put(m_instance, "CurveWidth", NULL); }

        IfcColour_get get_CurveColour() { return IfcColour_get(m_instance, "CurveColour", NULL); }
        IfcColour_put put_CurveColour() { return IfcColour_put(m_instance, "CurveColour", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurveStyleFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurveStyleFont : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurveStyleFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurveStyleFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurveStyleFont")
        {}

                /// <summary>
                /// Create new instace of IfcCurveStyleFont and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurveStyleFont Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurveStyleFont"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        //TList may be ListOfIfcCurveStyleFontPattern or list of converible elements
        template <typename TList> void get_PatternList(TList& lst) { ListOfIfcCurveStyleFontPatternSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PatternList"); }

        //TList may be ListOfIfcCurveStyleFontPattern or list of converible elements
        template <typename TList> void put_PatternList(TList& lst) { ListOfIfcCurveStyleFontPatternSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "PatternList"); }

        //TArrayElem[] may be IfcCurveStyleFontPattern[] or array of convertible elements
        template <typename TArrayElem> void put_PatternList(TArrayElem arr[], size_t n) { ListOfIfcCurveStyleFontPattern lst; ArrayToList(arr, n, lst); put_PatternList(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurveStyleFontAndScaling
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurveStyleFontAndScaling : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurveStyleFontAndScaling
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurveStyleFontAndScaling(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurveStyleFontAndScaling")
        {}

                /// <summary>
                /// Create new instace of IfcCurveStyleFontAndScaling and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurveStyleFontAndScaling Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurveStyleFontAndScaling"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcCurveStyleFontSelect_get get_CurveFont() { return IfcCurveStyleFontSelect_get(m_instance, "CurveFont", NULL); }
        IfcCurveStyleFontSelect_put put_CurveFont() { return IfcCurveStyleFontSelect_put(m_instance, "CurveFont", NULL); }

        Nullable<IfcPositiveRatioMeasure> get_CurveFontScaling() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "CurveFontScaling", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_CurveFontScaling(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "CurveFontScaling", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcCurveStyleFontPattern
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcCurveStyleFontPattern : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcCurveStyleFontPattern
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcCurveStyleFontPattern(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcCurveStyleFontPattern")
        {}

                /// <summary>
                /// Create new instace of IfcCurveStyleFontPattern and returns object of this C++ class to interact with
                /// </summary>
        static IfcCurveStyleFontPattern Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcCurveStyleFontPattern"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_VisibleSegmentLength() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "VisibleSegmentLength", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_VisibleSegmentLength(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "VisibleSegmentLength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_InvisibleSegmentLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "InvisibleSegmentLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_InvisibleSegmentLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "InvisibleSegmentLength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDamperType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDamperType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDamperType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDamperType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDamperType")
        {}

                /// <summary>
                /// Create new instace of IfcDamperType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDamperType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDamperType"); assert(inst); return inst; }

        Nullable<IfcDamperTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcDamperTypeEnum_); if (v >= 0) return (IfcDamperTypeEnum) v; else return Nullable<IfcDamperTypeEnum>(); }
        void put_PredefinedType(IfcDamperTypeEnum value) { TextValue val = IfcDamperTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDateAndTime
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDateAndTime : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDateAndTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDateAndTime(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDateAndTime")
        {}

                /// <summary>
                /// Create new instace of IfcDateAndTime and returns object of this C++ class to interact with
                /// </summary>
        static IfcDateAndTime Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDateAndTime"); assert(inst); return inst; }

        IfcCalendarDate get_DateComponent();
        void put_DateComponent(IfcCalendarDate inst);

        IfcLocalTime get_TimeComponent();
        void put_TimeComponent(IfcLocalTime inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDefinedSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDefinedSymbol : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDefinedSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDefinedSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDefinedSymbol")
        {}

                /// <summary>
                /// Create new instace of IfcDefinedSymbol and returns object of this C++ class to interact with
                /// </summary>
        static IfcDefinedSymbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDefinedSymbol"); assert(inst); return inst; }

        IfcDefinedSymbolSelect_get get_Definition() { return IfcDefinedSymbolSelect_get(m_instance, "Definition", NULL); }
        IfcDefinedSymbolSelect_put put_Definition() { return IfcDefinedSymbolSelect_put(m_instance, "Definition", NULL); }

        IfcCartesianTransformationOperator2D get_Target();
        void put_Target(IfcCartesianTransformationOperator2D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDerivedProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDerivedProfileDef : public virtual IfcProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDerivedProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDerivedProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDerivedProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcDerivedProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcDerivedProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDerivedProfileDef"); assert(inst); return inst; }

        IfcProfileDef get_ParentProfile();
        void put_ParentProfile(IfcProfileDef inst);

        IfcCartesianTransformationOperator2D get_Operator();
        void put_Operator(IfcCartesianTransformationOperator2D inst);

        IfcLabel get_Label() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Label", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Label(IfcLabel value) { sdaiPutAttrBN(m_instance, "Label", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDerivedUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDerivedUnit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDerivedUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDerivedUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDerivedUnit")
        {}

                /// <summary>
                /// Create new instace of IfcDerivedUnit and returns object of this C++ class to interact with
                /// </summary>
        static IfcDerivedUnit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDerivedUnit"); assert(inst); return inst; }

        //TList may be SetOfIfcDerivedUnitElement or list of converible elements
        template <typename TList> void get_Elements(TList& lst) { SetOfIfcDerivedUnitElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Elements"); }

        //TList may be SetOfIfcDerivedUnitElement or list of converible elements
        template <typename TList> void put_Elements(TList& lst) { SetOfIfcDerivedUnitElementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Elements"); }

        //TArrayElem[] may be IfcDerivedUnitElement[] or array of convertible elements
        template <typename TArrayElem> void put_Elements(TArrayElem arr[], size_t n) { SetOfIfcDerivedUnitElement lst; ArrayToList(arr, n, lst); put_Elements(lst); }

        Nullable<IfcDerivedUnitEnum> get_UnitType() { int v = getENUM("UnitType", IfcDerivedUnitEnum_); if (v >= 0) return (IfcDerivedUnitEnum) v; else return Nullable<IfcDerivedUnitEnum>(); }
        void put_UnitType(IfcDerivedUnitEnum value) { TextValue val = IfcDerivedUnitEnum_[(int) value]; sdaiPutAttrBN(m_instance, "UnitType", sdaiENUM, val); }

        IfcLabel get_UserDefinedType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedType(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedType", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDerivedUnitElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDerivedUnitElement : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDerivedUnitElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDerivedUnitElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDerivedUnitElement")
        {}

                /// <summary>
                /// Create new instace of IfcDerivedUnitElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcDerivedUnitElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDerivedUnitElement"); assert(inst); return inst; }

        IfcNamedUnit get_Unit();
        void put_Unit(IfcNamedUnit inst);

        Nullable<IntValue> get_Exponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "Exponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_Exponent(IntValue value) { sdaiPutAttrBN(m_instance, "Exponent", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDiameterDimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDiameterDimension : public virtual IfcDimensionCurveDirectedCallout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDiameterDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDiameterDimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDiameterDimension")
        {}

                /// <summary>
                /// Create new instace of IfcDiameterDimension and returns object of this C++ class to interact with
                /// </summary>
        static IfcDiameterDimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDiameterDimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDimensionalExponents
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDimensionalExponents : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDimensionalExponents
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDimensionalExponents(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDimensionalExponents")
        {}

                /// <summary>
                /// Create new instace of IfcDimensionalExponents and returns object of this C++ class to interact with
                /// </summary>
        static IfcDimensionalExponents Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDimensionalExponents"); assert(inst); return inst; }

        Nullable<IntValue> get_LengthExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "LengthExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_LengthExponent(IntValue value) { sdaiPutAttrBN(m_instance, "LengthExponent", sdaiINTEGER, &value); }

        Nullable<IntValue> get_MassExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "MassExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_MassExponent(IntValue value) { sdaiPutAttrBN(m_instance, "MassExponent", sdaiINTEGER, &value); }

        Nullable<IntValue> get_TimeExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "TimeExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_TimeExponent(IntValue value) { sdaiPutAttrBN(m_instance, "TimeExponent", sdaiINTEGER, &value); }

        Nullable<IntValue> get_ElectricCurrentExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "ElectricCurrentExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_ElectricCurrentExponent(IntValue value) { sdaiPutAttrBN(m_instance, "ElectricCurrentExponent", sdaiINTEGER, &value); }

        Nullable<IntValue> get_ThermodynamicTemperatureExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "ThermodynamicTemperatureExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_ThermodynamicTemperatureExponent(IntValue value) { sdaiPutAttrBN(m_instance, "ThermodynamicTemperatureExponent", sdaiINTEGER, &value); }

        Nullable<IntValue> get_AmountOfSubstanceExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "AmountOfSubstanceExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_AmountOfSubstanceExponent(IntValue value) { sdaiPutAttrBN(m_instance, "AmountOfSubstanceExponent", sdaiINTEGER, &value); }

        Nullable<IntValue> get_LuminousIntensityExponent() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "LuminousIntensityExponent", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_LuminousIntensityExponent(IntValue value) { sdaiPutAttrBN(m_instance, "LuminousIntensityExponent", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDraughtingCalloutRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDraughtingCalloutRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDraughtingCalloutRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDraughtingCalloutRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDraughtingCalloutRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcDraughtingCalloutRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcDraughtingCalloutRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDraughtingCalloutRelationship"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcDraughtingCallout get_RelatingDraughtingCallout();
        void put_RelatingDraughtingCallout(IfcDraughtingCallout inst);

        IfcDraughtingCallout get_RelatedDraughtingCallout();
        void put_RelatedDraughtingCallout(IfcDraughtingCallout inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDimensionCalloutRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDimensionCalloutRelationship : public virtual IfcDraughtingCalloutRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDimensionCalloutRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDimensionCalloutRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDimensionCalloutRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcDimensionCalloutRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcDimensionCalloutRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDimensionCalloutRelationship"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDimensionCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDimensionCurve : public virtual IfcAnnotationCurveOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDimensionCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDimensionCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDimensionCurve")
        {}

                /// <summary>
                /// Create new instace of IfcDimensionCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcDimensionCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDimensionCurve"); assert(inst); return inst; }

        //TList may be SetOfIfcTerminatorSymbol or list of converible elements
        template <typename TList> void get_AnnotatedBySymbols(TList& lst) { SetOfIfcTerminatorSymbolSerializer<TList> sr; sr.FromAttr(lst, m_instance, "AnnotatedBySymbols"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTerminatorSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTerminatorSymbol : public virtual IfcAnnotationSymbolOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTerminatorSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTerminatorSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTerminatorSymbol")
        {}

                /// <summary>
                /// Create new instace of IfcTerminatorSymbol and returns object of this C++ class to interact with
                /// </summary>
        static IfcTerminatorSymbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTerminatorSymbol"); assert(inst); return inst; }

        IfcAnnotationCurveOccurrence get_AnnotatedCurve();
        void put_AnnotatedCurve(IfcAnnotationCurveOccurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDimensionCurveTerminator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDimensionCurveTerminator : public virtual IfcTerminatorSymbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDimensionCurveTerminator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDimensionCurveTerminator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDimensionCurveTerminator")
        {}

                /// <summary>
                /// Create new instace of IfcDimensionCurveTerminator and returns object of this C++ class to interact with
                /// </summary>
        static IfcDimensionCurveTerminator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDimensionCurveTerminator"); assert(inst); return inst; }

        Nullable<IfcDimensionExtentUsage> get_Role() { int v = getENUM("Role", IfcDimensionExtentUsage_); if (v >= 0) return (IfcDimensionExtentUsage) v; else return Nullable<IfcDimensionExtentUsage>(); }
        void put_Role(IfcDimensionExtentUsage value) { TextValue val = IfcDimensionExtentUsage_[(int) value]; sdaiPutAttrBN(m_instance, "Role", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDimensionPair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDimensionPair : public virtual IfcDraughtingCalloutRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDimensionPair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDimensionPair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDimensionPair")
        {}

                /// <summary>
                /// Create new instace of IfcDimensionPair and returns object of this C++ class to interact with
                /// </summary>
        static IfcDimensionPair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDimensionPair"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDirection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDirection : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDirection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDirection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDirection")
        {}

                /// <summary>
                /// Create new instace of IfcDirection and returns object of this C++ class to interact with
                /// </summary>
        static IfcDirection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDirection"); assert(inst); return inst; }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void get_DirectionRatios(TList& lst) { list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DirectionRatios"); }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void put_DirectionRatios(TList& lst) { list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "DirectionRatios"); }

        //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_DirectionRatios(TArrayElem arr[], size_t n) { list_of_double lst; ArrayToList(arr, n, lst); put_DirectionRatios(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElementComponent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElementComponent : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElementComponent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElementComponent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElementComponent")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDiscreteAccessory
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDiscreteAccessory : public virtual IfcElementComponent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDiscreteAccessory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDiscreteAccessory(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDiscreteAccessory")
        {}

                /// <summary>
                /// Create new instace of IfcDiscreteAccessory and returns object of this C++ class to interact with
                /// </summary>
        static IfcDiscreteAccessory Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDiscreteAccessory"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElementComponentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElementComponentType : public virtual IfcElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElementComponentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElementComponentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElementComponentType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDiscreteAccessoryType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDiscreteAccessoryType : public virtual IfcElementComponentType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDiscreteAccessoryType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDiscreteAccessoryType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDiscreteAccessoryType")
        {}

                /// <summary>
                /// Create new instace of IfcDiscreteAccessoryType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDiscreteAccessoryType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDiscreteAccessoryType"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionElement")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionFlowElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionFlowElement : public virtual IfcDistributionElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionFlowElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionFlowElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionFlowElement")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionFlowElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionFlowElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionFlowElement"); assert(inst); return inst; }

        //TList may be SetOfIfcRelFlowControlElements or list of converible elements
        template <typename TList> void get_HasControlElements(TList& lst) { SetOfIfcRelFlowControlElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasControlElements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionChamberElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionChamberElement : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionChamberElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionChamberElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionChamberElement")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionChamberElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionChamberElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionChamberElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionChamberElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionChamberElementType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionChamberElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionChamberElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionChamberElementType")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionChamberElementType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionChamberElementType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionChamberElementType"); assert(inst); return inst; }

        Nullable<IfcDistributionChamberElementTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcDistributionChamberElementTypeEnum_); if (v >= 0) return (IfcDistributionChamberElementTypeEnum) v; else return Nullable<IfcDistributionChamberElementTypeEnum>(); }
        void put_PredefinedType(IfcDistributionChamberElementTypeEnum value) { TextValue val = IfcDistributionChamberElementTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionControlElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionControlElement : public virtual IfcDistributionElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionControlElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionControlElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionControlElement")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionControlElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionControlElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionControlElement"); assert(inst); return inst; }

        IfcIdentifier get_ControlElementId() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ControlElementId", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ControlElementId(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ControlElementId", sdaiSTRING, value); }

        //TList may be SetOfIfcRelFlowControlElements or list of converible elements
        template <typename TList> void get_AssignedToFlowElement(TList& lst) { SetOfIfcRelFlowControlElementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "AssignedToFlowElement"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPort
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPort : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPort
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPort(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPort")
        {}


        IfcRelConnectsPortToElement get_ContainedIn();

        //TList may be SetOfIfcRelConnectsPorts or list of converible elements
        template <typename TList> void get_ConnectedFrom(TList& lst) { SetOfIfcRelConnectsPortsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ConnectedFrom"); }

        //TList may be SetOfIfcRelConnectsPorts or list of converible elements
        template <typename TList> void get_ConnectedTo(TList& lst) { SetOfIfcRelConnectsPortsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ConnectedTo"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDistributionPort
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDistributionPort : public virtual IfcPort
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDistributionPort
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDistributionPort(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDistributionPort")
        {}

                /// <summary>
                /// Create new instace of IfcDistributionPort and returns object of this C++ class to interact with
                /// </summary>
        static IfcDistributionPort Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDistributionPort"); assert(inst); return inst; }

        Nullable<IfcFlowDirectionEnum> get_FlowDirection() { int v = getENUM("FlowDirection", IfcFlowDirectionEnum_); if (v >= 0) return (IfcFlowDirectionEnum) v; else return Nullable<IfcFlowDirectionEnum>(); }
        void put_FlowDirection(IfcFlowDirectionEnum value) { TextValue val = IfcFlowDirectionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "FlowDirection", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDocumentElectronicFormat
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDocumentElectronicFormat : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDocumentElectronicFormat
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDocumentElectronicFormat(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDocumentElectronicFormat")
        {}

                /// <summary>
                /// Create new instace of IfcDocumentElectronicFormat and returns object of this C++ class to interact with
                /// </summary>
        static IfcDocumentElectronicFormat Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDocumentElectronicFormat"); assert(inst); return inst; }

        IfcLabel get_FileExtension() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "FileExtension", sdaiSTRING, &val)) return val; else return NULL; }
        void put_FileExtension(IfcLabel value) { sdaiPutAttrBN(m_instance, "FileExtension", sdaiSTRING, value); }

        IfcLabel get_MimeContentType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "MimeContentType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_MimeContentType(IfcLabel value) { sdaiPutAttrBN(m_instance, "MimeContentType", sdaiSTRING, value); }

        IfcLabel get_MimeSubtype() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "MimeSubtype", sdaiSTRING, &val)) return val; else return NULL; }
        void put_MimeSubtype(IfcLabel value) { sdaiPutAttrBN(m_instance, "MimeSubtype", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDocumentInformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDocumentInformation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDocumentInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDocumentInformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDocumentInformation")
        {}

                /// <summary>
                /// Create new instace of IfcDocumentInformation and returns object of this C++ class to interact with
                /// </summary>
        static IfcDocumentInformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDocumentInformation"); assert(inst); return inst; }

        IfcIdentifier get_DocumentId() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "DocumentId", sdaiSTRING, &val)) return val; else return NULL; }
        void put_DocumentId(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "DocumentId", sdaiSTRING, value); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        //TList may be SetOfIfcDocumentReference or list of converible elements
        template <typename TList> void get_DocumentReferences(TList& lst) { SetOfIfcDocumentReferenceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DocumentReferences"); }

        //TList may be SetOfIfcDocumentReference or list of converible elements
        template <typename TList> void put_DocumentReferences(TList& lst) { SetOfIfcDocumentReferenceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "DocumentReferences"); }

        //TArrayElem[] may be IfcDocumentReference[] or array of convertible elements
        template <typename TArrayElem> void put_DocumentReferences(TArrayElem arr[], size_t n) { SetOfIfcDocumentReference lst; ArrayToList(arr, n, lst); put_DocumentReferences(lst); }

        IfcText get_Purpose() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Purpose(IfcText value) { sdaiPutAttrBN(m_instance, "Purpose", sdaiSTRING, value); }

        IfcText get_IntendedUse() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "IntendedUse", sdaiSTRING, &val)) return val; else return NULL; }
        void put_IntendedUse(IfcText value) { sdaiPutAttrBN(m_instance, "IntendedUse", sdaiSTRING, value); }

        IfcText get_Scope() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Scope", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Scope(IfcText value) { sdaiPutAttrBN(m_instance, "Scope", sdaiSTRING, value); }

        IfcLabel get_Revision() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Revision", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Revision(IfcLabel value) { sdaiPutAttrBN(m_instance, "Revision", sdaiSTRING, value); }

        IfcActorSelect_get get_DocumentOwner() { return IfcActorSelect_get(m_instance, "DocumentOwner", NULL); }
        IfcActorSelect_put put_DocumentOwner() { return IfcActorSelect_put(m_instance, "DocumentOwner", NULL); }

        //TList may be SetOfIfcActorSelect or list of converible elements
        template <typename TList> void get_Editors(TList& lst) { SetOfIfcActorSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Editors"); }

        //TList may be SetOfIfcActorSelect or list of converible elements
        template <typename TList> void put_Editors(TList& lst) { SetOfIfcActorSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Editors"); }

        IfcDateAndTime get_CreationTime();
        void put_CreationTime(IfcDateAndTime inst);

        IfcDateAndTime get_LastRevisionTime();
        void put_LastRevisionTime(IfcDateAndTime inst);

        IfcDocumentElectronicFormat get_ElectronicFormat();
        void put_ElectronicFormat(IfcDocumentElectronicFormat inst);

        IfcCalendarDate get_ValidFrom();
        void put_ValidFrom(IfcCalendarDate inst);

        IfcCalendarDate get_ValidUntil();
        void put_ValidUntil(IfcCalendarDate inst);

        Nullable<IfcDocumentConfidentialityEnum> get_Confidentiality() { int v = getENUM("Confidentiality", IfcDocumentConfidentialityEnum_); if (v >= 0) return (IfcDocumentConfidentialityEnum) v; else return Nullable<IfcDocumentConfidentialityEnum>(); }
        void put_Confidentiality(IfcDocumentConfidentialityEnum value) { TextValue val = IfcDocumentConfidentialityEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Confidentiality", sdaiENUM, val); }

        Nullable<IfcDocumentStatusEnum> get_Status() { int v = getENUM("Status", IfcDocumentStatusEnum_); if (v >= 0) return (IfcDocumentStatusEnum) v; else return Nullable<IfcDocumentStatusEnum>(); }
        void put_Status(IfcDocumentStatusEnum value) { TextValue val = IfcDocumentStatusEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Status", sdaiENUM, val); }

        //TList may be SetOfIfcDocumentInformationRelationship or list of converible elements
        template <typename TList> void get_IsPointedTo(TList& lst) { SetOfIfcDocumentInformationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsPointedTo"); }

        //TList may be SetOfIfcDocumentInformationRelationship or list of converible elements
        template <typename TList> void get_IsPointer(TList& lst) { SetOfIfcDocumentInformationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsPointer"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDocumentInformationRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDocumentInformationRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDocumentInformationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDocumentInformationRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDocumentInformationRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcDocumentInformationRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcDocumentInformationRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDocumentInformationRelationship"); assert(inst); return inst; }

        IfcDocumentInformation get_RelatingDocument();
        void put_RelatingDocument(IfcDocumentInformation inst);

        //TList may be SetOfIfcDocumentInformation or list of converible elements
        template <typename TList> void get_RelatedDocuments(TList& lst) { SetOfIfcDocumentInformationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedDocuments"); }

        //TList may be SetOfIfcDocumentInformation or list of converible elements
        template <typename TList> void put_RelatedDocuments(TList& lst) { SetOfIfcDocumentInformationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedDocuments"); }

        //TArrayElem[] may be IfcDocumentInformation[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedDocuments(TArrayElem arr[], size_t n) { SetOfIfcDocumentInformation lst; ArrayToList(arr, n, lst); put_RelatedDocuments(lst); }

        IfcLabel get_RelationshipType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "RelationshipType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_RelationshipType(IfcLabel value) { sdaiPutAttrBN(m_instance, "RelationshipType", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDocumentReference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDocumentReference : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDocumentReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDocumentReference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDocumentReference")
        {}

                /// <summary>
                /// Create new instace of IfcDocumentReference and returns object of this C++ class to interact with
                /// </summary>
        static IfcDocumentReference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDocumentReference"); assert(inst); return inst; }

        //TList may be SetOfIfcDocumentInformation or list of converible elements
        template <typename TList> void get_ReferenceToDocument(TList& lst) { SetOfIfcDocumentInformationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferenceToDocument"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDoor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDoor : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDoor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDoor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDoor")
        {}

                /// <summary>
                /// Create new instace of IfcDoor and returns object of this C++ class to interact with
                /// </summary>
        static IfcDoor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDoor"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_OverallHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_OverallWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallWidth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyDefinition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyDefinition : public virtual IfcRoot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyDefinition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyDefinition")
        {}


        //TList may be SetOfIfcRelAssociates or list of converible elements
        template <typename TList> void get_HasAssociations(TList& lst) { SetOfIfcRelAssociatesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasAssociations"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertySetDefinition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertySetDefinition : public virtual IfcPropertyDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertySetDefinition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertySetDefinition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertySetDefinition")
        {}


        //TList may be SetOfIfcRelDefinesByProperties or list of converible elements
        template <typename TList> void get_PropertyDefinitionOf(TList& lst) { SetOfIfcRelDefinesByPropertiesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PropertyDefinitionOf"); }

        //TList may be SetOfIfcTypeObject or list of converible elements
        template <typename TList> void get_DefinesType(TList& lst) { SetOfIfcTypeObjectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DefinesType"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDoorLiningProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDoorLiningProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDoorLiningProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDoorLiningProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDoorLiningProperties")
        {}

                /// <summary>
                /// Create new instace of IfcDoorLiningProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcDoorLiningProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDoorLiningProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_LiningDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LiningDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LiningDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LiningDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_LiningThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LiningThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LiningThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LiningThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_ThresholdDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThresholdDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_ThresholdDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "ThresholdDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_ThresholdThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThresholdThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_ThresholdThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "ThresholdThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TransomThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransomThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TransomThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TransomThickness", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_TransomOffset() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransomOffset", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_TransomOffset(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "TransomOffset", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_LiningOffset() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LiningOffset", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_LiningOffset(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "LiningOffset", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_ThresholdOffset() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThresholdOffset", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_ThresholdOffset(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "ThresholdOffset", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CasingThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CasingThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CasingThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CasingThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CasingDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CasingDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CasingDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CasingDepth", sdaiREAL, &value); }

        IfcShapeAspect get_ShapeAspectStyle();
        void put_ShapeAspectStyle(IfcShapeAspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDoorPanelProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDoorPanelProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDoorPanelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDoorPanelProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDoorPanelProperties")
        {}

                /// <summary>
                /// Create new instace of IfcDoorPanelProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcDoorPanelProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDoorPanelProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_PanelDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "PanelDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_PanelDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "PanelDepth", sdaiREAL, &value); }

        Nullable<IfcDoorPanelOperationEnum> get_PanelOperation() { int v = getENUM("PanelOperation", IfcDoorPanelOperationEnum_); if (v >= 0) return (IfcDoorPanelOperationEnum) v; else return Nullable<IfcDoorPanelOperationEnum>(); }
        void put_PanelOperation(IfcDoorPanelOperationEnum value) { TextValue val = IfcDoorPanelOperationEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PanelOperation", sdaiENUM, val); }

        Nullable<IfcNormalisedRatioMeasure> get_PanelWidth() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "PanelWidth", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_PanelWidth(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "PanelWidth", sdaiREAL, &value); }

        Nullable<IfcDoorPanelPositionEnum> get_PanelPosition() { int v = getENUM("PanelPosition", IfcDoorPanelPositionEnum_); if (v >= 0) return (IfcDoorPanelPositionEnum) v; else return Nullable<IfcDoorPanelPositionEnum>(); }
        void put_PanelPosition(IfcDoorPanelPositionEnum value) { TextValue val = IfcDoorPanelPositionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PanelPosition", sdaiENUM, val); }

        IfcShapeAspect get_ShapeAspectStyle();
        void put_ShapeAspectStyle(IfcShapeAspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDoorStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDoorStyle : public virtual IfcTypeProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDoorStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDoorStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDoorStyle")
        {}

                /// <summary>
                /// Create new instace of IfcDoorStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcDoorStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDoorStyle"); assert(inst); return inst; }

        Nullable<IfcDoorStyleOperationEnum> get_OperationType() { int v = getENUM("OperationType", IfcDoorStyleOperationEnum_); if (v >= 0) return (IfcDoorStyleOperationEnum) v; else return Nullable<IfcDoorStyleOperationEnum>(); }
        void put_OperationType(IfcDoorStyleOperationEnum value) { TextValue val = IfcDoorStyleOperationEnum_[(int) value]; sdaiPutAttrBN(m_instance, "OperationType", sdaiENUM, val); }

        Nullable<IfcDoorStyleConstructionEnum> get_ConstructionType() { int v = getENUM("ConstructionType", IfcDoorStyleConstructionEnum_); if (v >= 0) return (IfcDoorStyleConstructionEnum) v; else return Nullable<IfcDoorStyleConstructionEnum>(); }
        void put_ConstructionType(IfcDoorStyleConstructionEnum value) { TextValue val = IfcDoorStyleConstructionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ConstructionType", sdaiENUM, val); }

        Nullable<bool> get_ParameterTakesPrecedence() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "ParameterTakesPrecedence", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_ParameterTakesPrecedence(bool value) { sdaiPutAttrBN(m_instance, "ParameterTakesPrecedence", sdaiBOOLEAN, &value); }

        Nullable<bool> get_Sizeable() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "Sizeable", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_Sizeable(bool value) { sdaiPutAttrBN(m_instance, "Sizeable", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedItem : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedItem")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedColour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedColour : public virtual IfcPreDefinedItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedColour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedColour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedColour")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedColour
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDraughtingPreDefinedColour : public virtual IfcPreDefinedColour
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDraughtingPreDefinedColour
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDraughtingPreDefinedColour(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDraughtingPreDefinedColour")
        {}

                /// <summary>
                /// Create new instace of IfcDraughtingPreDefinedColour and returns object of this C++ class to interact with
                /// </summary>
        static IfcDraughtingPreDefinedColour Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedColour"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedCurveFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedCurveFont : public virtual IfcPreDefinedItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedCurveFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedCurveFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedCurveFont")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedCurveFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDraughtingPreDefinedCurveFont : public virtual IfcPreDefinedCurveFont
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDraughtingPreDefinedCurveFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDraughtingPreDefinedCurveFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDraughtingPreDefinedCurveFont")
        {}

                /// <summary>
                /// Create new instace of IfcDraughtingPreDefinedCurveFont and returns object of this C++ class to interact with
                /// </summary>
        static IfcDraughtingPreDefinedCurveFont Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedCurveFont"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedTextFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedTextFont : public virtual IfcPreDefinedItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedTextFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedTextFont")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDraughtingPreDefinedTextFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDraughtingPreDefinedTextFont : public virtual IfcPreDefinedTextFont
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDraughtingPreDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDraughtingPreDefinedTextFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDraughtingPreDefinedTextFont")
        {}

                /// <summary>
                /// Create new instace of IfcDraughtingPreDefinedTextFont and returns object of this C++ class to interact with
                /// </summary>
        static IfcDraughtingPreDefinedTextFont Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDraughtingPreDefinedTextFont"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDuctFittingType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDuctFittingType : public virtual IfcFlowFittingType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDuctFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDuctFittingType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDuctFittingType")
        {}

                /// <summary>
                /// Create new instace of IfcDuctFittingType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDuctFittingType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDuctFittingType"); assert(inst); return inst; }

        Nullable<IfcDuctFittingTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcDuctFittingTypeEnum_); if (v >= 0) return (IfcDuctFittingTypeEnum) v; else return Nullable<IfcDuctFittingTypeEnum>(); }
        void put_PredefinedType(IfcDuctFittingTypeEnum value) { TextValue val = IfcDuctFittingTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDuctSegmentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDuctSegmentType : public virtual IfcFlowSegmentType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDuctSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDuctSegmentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDuctSegmentType")
        {}

                /// <summary>
                /// Create new instace of IfcDuctSegmentType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDuctSegmentType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDuctSegmentType"); assert(inst); return inst; }

        Nullable<IfcDuctSegmentTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcDuctSegmentTypeEnum_); if (v >= 0) return (IfcDuctSegmentTypeEnum) v; else return Nullable<IfcDuctSegmentTypeEnum>(); }
        void put_PredefinedType(IfcDuctSegmentTypeEnum value) { TextValue val = IfcDuctSegmentTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowTreatmentDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowTreatmentDeviceType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowTreatmentDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowTreatmentDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowTreatmentDeviceType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcDuctSilencerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcDuctSilencerType : public virtual IfcFlowTreatmentDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcDuctSilencerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcDuctSilencerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcDuctSilencerType")
        {}

                /// <summary>
                /// Create new instace of IfcDuctSilencerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcDuctSilencerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcDuctSilencerType"); assert(inst); return inst; }

        Nullable<IfcDuctSilencerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcDuctSilencerTypeEnum_); if (v >= 0) return (IfcDuctSilencerTypeEnum) v; else return Nullable<IfcDuctSilencerTypeEnum>(); }
        void put_PredefinedType(IfcDuctSilencerTypeEnum value) { TextValue val = IfcDuctSilencerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEdge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEdge : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEdge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEdge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEdge")
        {}

                /// <summary>
                /// Create new instace of IfcEdge and returns object of this C++ class to interact with
                /// </summary>
        static IfcEdge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEdge"); assert(inst); return inst; }

        IfcVertex get_EdgeStart();
        void put_EdgeStart(IfcVertex inst);

        IfcVertex get_EdgeEnd();
        void put_EdgeEnd(IfcVertex inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEdgeCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEdgeCurve : public virtual IfcEdge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEdgeCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEdgeCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEdgeCurve")
        {}

                /// <summary>
                /// Create new instace of IfcEdgeCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcEdgeCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEdgeCurve"); assert(inst); return inst; }

        IfcCurve get_EdgeGeometry();
        void put_EdgeGeometry(IfcCurve inst);

        Nullable<bool> get_SameSense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_SameSense(bool value) { sdaiPutAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLoop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLoop : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLoop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLoop")
        {}

                /// <summary>
                /// Create new instace of IfcLoop and returns object of this C++ class to interact with
                /// </summary>
        static IfcLoop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLoop"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEdgeLoop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEdgeLoop : public virtual IfcLoop
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEdgeLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEdgeLoop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEdgeLoop")
        {}

                /// <summary>
                /// Create new instace of IfcEdgeLoop and returns object of this C++ class to interact with
                /// </summary>
        static IfcEdgeLoop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEdgeLoop"); assert(inst); return inst; }

        //TList may be ListOfIfcOrientedEdge or list of converible elements
        template <typename TList> void get_EdgeList(TList& lst) { ListOfIfcOrientedEdgeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "EdgeList"); }

        //TList may be ListOfIfcOrientedEdge or list of converible elements
        template <typename TList> void put_EdgeList(TList& lst) { ListOfIfcOrientedEdgeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "EdgeList"); }

        //TArrayElem[] may be IfcOrientedEdge[] or array of convertible elements
        template <typename TArrayElem> void put_EdgeList(TArrayElem arr[], size_t n) { ListOfIfcOrientedEdge lst; ArrayToList(arr, n, lst); put_EdgeList(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEnergyProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEnergyProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEnergyProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEnergyProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEnergyProperties")
        {}

                /// <summary>
                /// Create new instace of IfcEnergyProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcEnergyProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEnergyProperties"); assert(inst); return inst; }

        Nullable<IfcEnergySequenceEnum> get_EnergySequence() { int v = getENUM("EnergySequence", IfcEnergySequenceEnum_); if (v >= 0) return (IfcEnergySequenceEnum) v; else return Nullable<IfcEnergySequenceEnum>(); }
        void put_EnergySequence(IfcEnergySequenceEnum value) { TextValue val = IfcEnergySequenceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "EnergySequence", sdaiENUM, val); }

        IfcLabel get_UserDefinedEnergySequence() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedEnergySequence", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedEnergySequence(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedEnergySequence", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricalBaseProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricalBaseProperties : public virtual IfcEnergyProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricalBaseProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricalBaseProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricalBaseProperties")
        {}

                /// <summary>
                /// Create new instace of IfcElectricalBaseProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricalBaseProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricalBaseProperties"); assert(inst); return inst; }

        Nullable<IfcElectricCurrentEnum> get_ElectricCurrentType() { int v = getENUM("ElectricCurrentType", IfcElectricCurrentEnum_); if (v >= 0) return (IfcElectricCurrentEnum) v; else return Nullable<IfcElectricCurrentEnum>(); }
        void put_ElectricCurrentType(IfcElectricCurrentEnum value) { TextValue val = IfcElectricCurrentEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ElectricCurrentType", sdaiENUM, val); }

        Nullable<IfcElectricVoltageMeasure> get_InputVoltage() { IfcElectricVoltageMeasure val = (IfcElectricVoltageMeasure) 0; if (sdaiGetAttrBN(m_instance, "InputVoltage", sdaiREAL, &val)) return val; else return Nullable<IfcElectricVoltageMeasure>(); }
        void put_InputVoltage(IfcElectricVoltageMeasure value) { sdaiPutAttrBN(m_instance, "InputVoltage", sdaiREAL, &value); }

        Nullable<IfcFrequencyMeasure> get_InputFrequency() { IfcFrequencyMeasure val = (IfcFrequencyMeasure) 0; if (sdaiGetAttrBN(m_instance, "InputFrequency", sdaiREAL, &val)) return val; else return Nullable<IfcFrequencyMeasure>(); }
        void put_InputFrequency(IfcFrequencyMeasure value) { sdaiPutAttrBN(m_instance, "InputFrequency", sdaiREAL, &value); }

        Nullable<IfcElectricCurrentMeasure> get_FullLoadCurrent() { IfcElectricCurrentMeasure val = (IfcElectricCurrentMeasure) 0; if (sdaiGetAttrBN(m_instance, "FullLoadCurrent", sdaiREAL, &val)) return val; else return Nullable<IfcElectricCurrentMeasure>(); }
        void put_FullLoadCurrent(IfcElectricCurrentMeasure value) { sdaiPutAttrBN(m_instance, "FullLoadCurrent", sdaiREAL, &value); }

        Nullable<IfcElectricCurrentMeasure> get_MinimumCircuitCurrent() { IfcElectricCurrentMeasure val = (IfcElectricCurrentMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinimumCircuitCurrent", sdaiREAL, &val)) return val; else return Nullable<IfcElectricCurrentMeasure>(); }
        void put_MinimumCircuitCurrent(IfcElectricCurrentMeasure value) { sdaiPutAttrBN(m_instance, "MinimumCircuitCurrent", sdaiREAL, &value); }

        Nullable<IfcPowerMeasure> get_MaximumPowerInput() { IfcPowerMeasure val = (IfcPowerMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaximumPowerInput", sdaiREAL, &val)) return val; else return Nullable<IfcPowerMeasure>(); }
        void put_MaximumPowerInput(IfcPowerMeasure value) { sdaiPutAttrBN(m_instance, "MaximumPowerInput", sdaiREAL, &value); }

        Nullable<IfcPowerMeasure> get_RatedPowerInput() { IfcPowerMeasure val = (IfcPowerMeasure) 0; if (sdaiGetAttrBN(m_instance, "RatedPowerInput", sdaiREAL, &val)) return val; else return Nullable<IfcPowerMeasure>(); }
        void put_RatedPowerInput(IfcPowerMeasure value) { sdaiPutAttrBN(m_instance, "RatedPowerInput", sdaiREAL, &value); }

        Nullable<IntValue> get_InputPhase() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "InputPhase", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_InputPhase(IntValue value) { sdaiPutAttrBN(m_instance, "InputPhase", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSystem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSystem : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSystem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSystem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSystem")
        {}

                /// <summary>
                /// Create new instace of IfcSystem and returns object of this C++ class to interact with
                /// </summary>
        static IfcSystem Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSystem"); assert(inst); return inst; }

        //TList may be SetOfIfcRelServicesBuildings or list of converible elements
        template <typename TList> void get_ServicesBuildings(TList& lst) { SetOfIfcRelServicesBuildingsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ServicesBuildings"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricalCircuit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricalCircuit : public virtual IfcSystem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricalCircuit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricalCircuit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricalCircuit")
        {}

                /// <summary>
                /// Create new instace of IfcElectricalCircuit and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricalCircuit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricalCircuit"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricalElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricalElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricalElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricalElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricalElement")
        {}

                /// <summary>
                /// Create new instace of IfcElectricalElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricalElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricalElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricApplianceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricApplianceType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricApplianceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricApplianceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricApplianceType")
        {}

                /// <summary>
                /// Create new instace of IfcElectricApplianceType and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricApplianceType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricApplianceType"); assert(inst); return inst; }

        Nullable<IfcElectricApplianceTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElectricApplianceTypeEnum_); if (v >= 0) return (IfcElectricApplianceTypeEnum) v; else return Nullable<IfcElectricApplianceTypeEnum>(); }
        void put_PredefinedType(IfcElectricApplianceTypeEnum value) { TextValue val = IfcElectricApplianceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowController
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowController : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowController
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowController(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowController")
        {}

                /// <summary>
                /// Create new instace of IfcFlowController and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowController Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowController"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricDistributionPoint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricDistributionPoint : public virtual IfcFlowController
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricDistributionPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricDistributionPoint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricDistributionPoint")
        {}

                /// <summary>
                /// Create new instace of IfcElectricDistributionPoint and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricDistributionPoint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricDistributionPoint"); assert(inst); return inst; }

        Nullable<IfcElectricDistributionPointFunctionEnum> get_DistributionPointFunction() { int v = getENUM("DistributionPointFunction", IfcElectricDistributionPointFunctionEnum_); if (v >= 0) return (IfcElectricDistributionPointFunctionEnum) v; else return Nullable<IfcElectricDistributionPointFunctionEnum>(); }
        void put_DistributionPointFunction(IfcElectricDistributionPointFunctionEnum value) { TextValue val = IfcElectricDistributionPointFunctionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "DistributionPointFunction", sdaiENUM, val); }

        IfcLabel get_UserDefinedFunction() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedFunction", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedFunction(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedFunction", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowStorageDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowStorageDeviceType : public virtual IfcDistributionFlowElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowStorageDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowStorageDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowStorageDeviceType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricFlowStorageDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricFlowStorageDeviceType : public virtual IfcFlowStorageDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricFlowStorageDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricFlowStorageDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricFlowStorageDeviceType")
        {}

                /// <summary>
                /// Create new instace of IfcElectricFlowStorageDeviceType and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricFlowStorageDeviceType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricFlowStorageDeviceType"); assert(inst); return inst; }

        Nullable<IfcElectricFlowStorageDeviceTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElectricFlowStorageDeviceTypeEnum_); if (v >= 0) return (IfcElectricFlowStorageDeviceTypeEnum) v; else return Nullable<IfcElectricFlowStorageDeviceTypeEnum>(); }
        void put_PredefinedType(IfcElectricFlowStorageDeviceTypeEnum value) { TextValue val = IfcElectricFlowStorageDeviceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricGeneratorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricGeneratorType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricGeneratorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricGeneratorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricGeneratorType")
        {}

                /// <summary>
                /// Create new instace of IfcElectricGeneratorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricGeneratorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricGeneratorType"); assert(inst); return inst; }

        Nullable<IfcElectricGeneratorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElectricGeneratorTypeEnum_); if (v >= 0) return (IfcElectricGeneratorTypeEnum) v; else return Nullable<IfcElectricGeneratorTypeEnum>(); }
        void put_PredefinedType(IfcElectricGeneratorTypeEnum value) { TextValue val = IfcElectricGeneratorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricHeaterType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricHeaterType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricHeaterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricHeaterType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricHeaterType")
        {}

                /// <summary>
                /// Create new instace of IfcElectricHeaterType and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricHeaterType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricHeaterType"); assert(inst); return inst; }

        Nullable<IfcElectricHeaterTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElectricHeaterTypeEnum_); if (v >= 0) return (IfcElectricHeaterTypeEnum) v; else return Nullable<IfcElectricHeaterTypeEnum>(); }
        void put_PredefinedType(IfcElectricHeaterTypeEnum value) { TextValue val = IfcElectricHeaterTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricMotorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricMotorType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricMotorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricMotorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricMotorType")
        {}

                /// <summary>
                /// Create new instace of IfcElectricMotorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricMotorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricMotorType"); assert(inst); return inst; }

        Nullable<IfcElectricMotorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElectricMotorTypeEnum_); if (v >= 0) return (IfcElectricMotorTypeEnum) v; else return Nullable<IfcElectricMotorTypeEnum>(); }
        void put_PredefinedType(IfcElectricMotorTypeEnum value) { TextValue val = IfcElectricMotorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElectricTimeControlType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElectricTimeControlType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElectricTimeControlType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElectricTimeControlType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElectricTimeControlType")
        {}

                /// <summary>
                /// Create new instace of IfcElectricTimeControlType and returns object of this C++ class to interact with
                /// </summary>
        static IfcElectricTimeControlType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElectricTimeControlType"); assert(inst); return inst; }

        Nullable<IfcElectricTimeControlTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElectricTimeControlTypeEnum_); if (v >= 0) return (IfcElectricTimeControlTypeEnum) v; else return Nullable<IfcElectricTimeControlTypeEnum>(); }
        void put_PredefinedType(IfcElectricTimeControlTypeEnum value) { TextValue val = IfcElectricTimeControlTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElementarySurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElementarySurface : public virtual IfcSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElementarySurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElementarySurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElementarySurface")
        {}


        IfcAxis2Placement3D get_Position();
        void put_Position(IfcAxis2Placement3D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElementAssembly
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElementAssembly : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElementAssembly
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElementAssembly(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElementAssembly")
        {}

                /// <summary>
                /// Create new instace of IfcElementAssembly and returns object of this C++ class to interact with
                /// </summary>
        static IfcElementAssembly Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElementAssembly"); assert(inst); return inst; }

        Nullable<IfcAssemblyPlaceEnum> get_AssemblyPlace() { int v = getENUM("AssemblyPlace", IfcAssemblyPlaceEnum_); if (v >= 0) return (IfcAssemblyPlaceEnum) v; else return Nullable<IfcAssemblyPlaceEnum>(); }
        void put_AssemblyPlace(IfcAssemblyPlaceEnum value) { TextValue val = IfcAssemblyPlaceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "AssemblyPlace", sdaiENUM, val); }

        Nullable<IfcElementAssemblyTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcElementAssemblyTypeEnum_); if (v >= 0) return (IfcElementAssemblyTypeEnum) v; else return Nullable<IfcElementAssemblyTypeEnum>(); }
        void put_PredefinedType(IfcElementAssemblyTypeEnum value) { TextValue val = IfcElementAssemblyTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcElementQuantity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcElementQuantity : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcElementQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcElementQuantity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcElementQuantity")
        {}

                /// <summary>
                /// Create new instace of IfcElementQuantity and returns object of this C++ class to interact with
                /// </summary>
        static IfcElementQuantity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcElementQuantity"); assert(inst); return inst; }

        IfcLabel get_MethodOfMeasurement() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "MethodOfMeasurement", sdaiSTRING, &val)) return val; else return NULL; }
        void put_MethodOfMeasurement(IfcLabel value) { sdaiPutAttrBN(m_instance, "MethodOfMeasurement", sdaiSTRING, value); }

        //TList may be SetOfIfcPhysicalQuantity or list of converible elements
        template <typename TList> void get_Quantities(TList& lst) { SetOfIfcPhysicalQuantitySerializer<TList> sr; sr.FromAttr(lst, m_instance, "Quantities"); }

        //TList may be SetOfIfcPhysicalQuantity or list of converible elements
        template <typename TList> void put_Quantities(TList& lst) { SetOfIfcPhysicalQuantitySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Quantities"); }

        //TArrayElem[] may be IfcPhysicalQuantity[] or array of convertible elements
        template <typename TArrayElem> void put_Quantities(TArrayElem arr[], size_t n) { SetOfIfcPhysicalQuantity lst; ArrayToList(arr, n, lst); put_Quantities(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEllipse
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEllipse : public virtual IfcConic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEllipse
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEllipse(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEllipse")
        {}

                /// <summary>
                /// Create new instace of IfcEllipse and returns object of this C++ class to interact with
                /// </summary>
        static IfcEllipse Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEllipse"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_SemiAxis1() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SemiAxis1", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_SemiAxis1(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "SemiAxis1", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_SemiAxis2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SemiAxis2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_SemiAxis2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "SemiAxis2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEllipseProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEllipseProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEllipseProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEllipseProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEllipseProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcEllipseProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcEllipseProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEllipseProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_SemiAxis1() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SemiAxis1", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_SemiAxis1(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "SemiAxis1", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_SemiAxis2() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SemiAxis2", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_SemiAxis2(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "SemiAxis2", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEnergyConversionDevice
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEnergyConversionDevice : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEnergyConversionDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEnergyConversionDevice(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEnergyConversionDevice")
        {}

                /// <summary>
                /// Create new instace of IfcEnergyConversionDevice and returns object of this C++ class to interact with
                /// </summary>
        static IfcEnergyConversionDevice Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEnergyConversionDevice"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEnvironmentalImpactValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEnvironmentalImpactValue : public virtual IfcAppliedValue
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEnvironmentalImpactValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEnvironmentalImpactValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEnvironmentalImpactValue")
        {}

                /// <summary>
                /// Create new instace of IfcEnvironmentalImpactValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcEnvironmentalImpactValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEnvironmentalImpactValue"); assert(inst); return inst; }

        IfcLabel get_ImpactType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ImpactType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ImpactType(IfcLabel value) { sdaiPutAttrBN(m_instance, "ImpactType", sdaiSTRING, value); }

        Nullable<IfcEnvironmentalImpactCategoryEnum> get_Category() { int v = getENUM("Category", IfcEnvironmentalImpactCategoryEnum_); if (v >= 0) return (IfcEnvironmentalImpactCategoryEnum) v; else return Nullable<IfcEnvironmentalImpactCategoryEnum>(); }
        void put_Category(IfcEnvironmentalImpactCategoryEnum value) { TextValue val = IfcEnvironmentalImpactCategoryEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Category", sdaiENUM, val); }

        IfcLabel get_UserDefinedCategory() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedCategory", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedCategory(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedCategory", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEquipmentElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEquipmentElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEquipmentElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEquipmentElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEquipmentElement")
        {}

                /// <summary>
                /// Create new instace of IfcEquipmentElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcEquipmentElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEquipmentElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEquipmentStandard
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEquipmentStandard : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEquipmentStandard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEquipmentStandard(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEquipmentStandard")
        {}

                /// <summary>
                /// Create new instace of IfcEquipmentStandard and returns object of this C++ class to interact with
                /// </summary>
        static IfcEquipmentStandard Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEquipmentStandard"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEvaporativeCoolerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEvaporativeCoolerType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEvaporativeCoolerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEvaporativeCoolerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEvaporativeCoolerType")
        {}

                /// <summary>
                /// Create new instace of IfcEvaporativeCoolerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcEvaporativeCoolerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEvaporativeCoolerType"); assert(inst); return inst; }

        Nullable<IfcEvaporativeCoolerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcEvaporativeCoolerTypeEnum_); if (v >= 0) return (IfcEvaporativeCoolerTypeEnum) v; else return Nullable<IfcEvaporativeCoolerTypeEnum>(); }
        void put_PredefinedType(IfcEvaporativeCoolerTypeEnum value) { TextValue val = IfcEvaporativeCoolerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcEvaporatorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcEvaporatorType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcEvaporatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcEvaporatorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcEvaporatorType")
        {}

                /// <summary>
                /// Create new instace of IfcEvaporatorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcEvaporatorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcEvaporatorType"); assert(inst); return inst; }

        Nullable<IfcEvaporatorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcEvaporatorTypeEnum_); if (v >= 0) return (IfcEvaporatorTypeEnum) v; else return Nullable<IfcEvaporatorTypeEnum>(); }
        void put_PredefinedType(IfcEvaporatorTypeEnum value) { TextValue val = IfcEvaporatorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialProperties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialProperties")
        {}


        IfcMaterial get_Material();
        void put_Material(IfcMaterial inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExtendedMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExtendedMaterialProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExtendedMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExtendedMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExtendedMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcExtendedMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcExtendedMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcExtendedMaterialProperties"); assert(inst); return inst; }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void get_ExtendedProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "ExtendedProperties"); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void put_ExtendedProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ExtendedProperties"); }

        //TArrayElem[] may be IfcProperty[] or array of convertible elements
        template <typename TArrayElem> void put_ExtendedProperties(TArrayElem arr[], size_t n) { SetOfIfcProperty lst; ArrayToList(arr, n, lst); put_ExtendedProperties(lst); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExternallyDefinedHatchStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExternallyDefinedHatchStyle : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExternallyDefinedHatchStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExternallyDefinedHatchStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExternallyDefinedHatchStyle")
        {}

                /// <summary>
                /// Create new instace of IfcExternallyDefinedHatchStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcExternallyDefinedHatchStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcExternallyDefinedHatchStyle"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExternallyDefinedSurfaceStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExternallyDefinedSurfaceStyle : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExternallyDefinedSurfaceStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExternallyDefinedSurfaceStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExternallyDefinedSurfaceStyle")
        {}

                /// <summary>
                /// Create new instace of IfcExternallyDefinedSurfaceStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcExternallyDefinedSurfaceStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcExternallyDefinedSurfaceStyle"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExternallyDefinedSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExternallyDefinedSymbol : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExternallyDefinedSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExternallyDefinedSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExternallyDefinedSymbol")
        {}

                /// <summary>
                /// Create new instace of IfcExternallyDefinedSymbol and returns object of this C++ class to interact with
                /// </summary>
        static IfcExternallyDefinedSymbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcExternallyDefinedSymbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExternallyDefinedTextFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExternallyDefinedTextFont : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExternallyDefinedTextFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExternallyDefinedTextFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExternallyDefinedTextFont")
        {}

                /// <summary>
                /// Create new instace of IfcExternallyDefinedTextFont and returns object of this C++ class to interact with
                /// </summary>
        static IfcExternallyDefinedTextFont Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcExternallyDefinedTextFont"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSweptAreaSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSweptAreaSolid : public virtual IfcSolidModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSweptAreaSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSweptAreaSolid")
        {}


        IfcProfileDef get_SweptArea();
        void put_SweptArea(IfcProfileDef inst);

        IfcAxis2Placement3D get_Position();
        void put_Position(IfcAxis2Placement3D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcExtrudedAreaSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcExtrudedAreaSolid : public virtual IfcSweptAreaSolid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcExtrudedAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcExtrudedAreaSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcExtrudedAreaSolid")
        {}

                /// <summary>
                /// Create new instace of IfcExtrudedAreaSolid and returns object of this C++ class to interact with
                /// </summary>
        static IfcExtrudedAreaSolid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcExtrudedAreaSolid"); assert(inst); return inst; }

        IfcDirection get_ExtrudedDirection();
        void put_ExtrudedDirection(IfcDirection inst);

        Nullable<IfcPositiveLengthMeasure> get_Depth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Depth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFace
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFace : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFace(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFace")
        {}

                /// <summary>
                /// Create new instace of IfcFace and returns object of this C++ class to interact with
                /// </summary>
        static IfcFace Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFace"); assert(inst); return inst; }

        //TList may be SetOfIfcFaceBound or list of converible elements
        template <typename TList> void get_Bounds(TList& lst) { SetOfIfcFaceBoundSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Bounds"); }

        //TList may be SetOfIfcFaceBound or list of converible elements
        template <typename TList> void put_Bounds(TList& lst) { SetOfIfcFaceBoundSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Bounds"); }

        //TArrayElem[] may be IfcFaceBound[] or array of convertible elements
        template <typename TArrayElem> void put_Bounds(TArrayElem arr[], size_t n) { SetOfIfcFaceBound lst; ArrayToList(arr, n, lst); put_Bounds(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFaceBasedSurfaceModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFaceBasedSurfaceModel : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFaceBasedSurfaceModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFaceBasedSurfaceModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFaceBasedSurfaceModel")
        {}

                /// <summary>
                /// Create new instace of IfcFaceBasedSurfaceModel and returns object of this C++ class to interact with
                /// </summary>
        static IfcFaceBasedSurfaceModel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFaceBasedSurfaceModel"); assert(inst); return inst; }

        //TList may be SetOfIfcConnectedFaceSet or list of converible elements
        template <typename TList> void get_FbsmFaces(TList& lst) { SetOfIfcConnectedFaceSetSerializer<TList> sr; sr.FromAttr(lst, m_instance, "FbsmFaces"); }

        //TList may be SetOfIfcConnectedFaceSet or list of converible elements
        template <typename TList> void put_FbsmFaces(TList& lst) { SetOfIfcConnectedFaceSetSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "FbsmFaces"); }

        //TArrayElem[] may be IfcConnectedFaceSet[] or array of convertible elements
        template <typename TArrayElem> void put_FbsmFaces(TArrayElem arr[], size_t n) { SetOfIfcConnectedFaceSet lst; ArrayToList(arr, n, lst); put_FbsmFaces(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFaceBound
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFaceBound : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFaceBound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFaceBound(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFaceBound")
        {}

                /// <summary>
                /// Create new instace of IfcFaceBound and returns object of this C++ class to interact with
                /// </summary>
        static IfcFaceBound Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFaceBound"); assert(inst); return inst; }

        IfcLoop get_Bound();
        void put_Bound(IfcLoop inst);

        Nullable<bool> get_Orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "Orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_Orientation(bool value) { sdaiPutAttrBN(m_instance, "Orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFaceOuterBound
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFaceOuterBound : public virtual IfcFaceBound
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFaceOuterBound
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFaceOuterBound(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFaceOuterBound")
        {}

                /// <summary>
                /// Create new instace of IfcFaceOuterBound and returns object of this C++ class to interact with
                /// </summary>
        static IfcFaceOuterBound Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFaceOuterBound"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFaceSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFaceSurface : public virtual IfcFace
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFaceSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFaceSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFaceSurface")
        {}

                /// <summary>
                /// Create new instace of IfcFaceSurface and returns object of this C++ class to interact with
                /// </summary>
        static IfcFaceSurface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFaceSurface"); assert(inst); return inst; }

        IfcSurface get_FaceSurface();
        void put_FaceSurface(IfcSurface inst);

        Nullable<bool> get_SameSense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_SameSense(bool value) { sdaiPutAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcManifoldSolidBrep
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcManifoldSolidBrep : public virtual IfcSolidModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcManifoldSolidBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcManifoldSolidBrep(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcManifoldSolidBrep")
        {}


        IfcClosedShell get_Outer();
        void put_Outer(IfcClosedShell inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFacetedBrep
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFacetedBrep : public virtual IfcManifoldSolidBrep
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFacetedBrep
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFacetedBrep(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFacetedBrep")
        {}

                /// <summary>
                /// Create new instace of IfcFacetedBrep and returns object of this C++ class to interact with
                /// </summary>
        static IfcFacetedBrep Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFacetedBrep"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFacetedBrepWithVoids
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFacetedBrepWithVoids : public virtual IfcManifoldSolidBrep
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFacetedBrepWithVoids
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFacetedBrepWithVoids(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFacetedBrepWithVoids")
        {}

                /// <summary>
                /// Create new instace of IfcFacetedBrepWithVoids and returns object of this C++ class to interact with
                /// </summary>
        static IfcFacetedBrepWithVoids Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFacetedBrepWithVoids"); assert(inst); return inst; }

        //TList may be SetOfIfcClosedShell or list of converible elements
        template <typename TList> void get_Voids(TList& lst) { SetOfIfcClosedShellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Voids"); }

        //TList may be SetOfIfcClosedShell or list of converible elements
        template <typename TList> void put_Voids(TList& lst) { SetOfIfcClosedShellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Voids"); }

        //TArrayElem[] may be IfcClosedShell[] or array of convertible elements
        template <typename TArrayElem> void put_Voids(TArrayElem arr[], size_t n) { SetOfIfcClosedShell lst; ArrayToList(arr, n, lst); put_Voids(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralConnectionCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralConnectionCondition : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralConnectionCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralConnectionCondition")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFailureConnectionCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFailureConnectionCondition : public virtual IfcStructuralConnectionCondition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFailureConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFailureConnectionCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFailureConnectionCondition")
        {}

                /// <summary>
                /// Create new instace of IfcFailureConnectionCondition and returns object of this C++ class to interact with
                /// </summary>
        static IfcFailureConnectionCondition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFailureConnectionCondition"); assert(inst); return inst; }

        Nullable<IfcForceMeasure> get_TensionFailureX() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "TensionFailureX", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_TensionFailureX(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "TensionFailureX", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_TensionFailureY() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "TensionFailureY", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_TensionFailureY(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "TensionFailureY", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_TensionFailureZ() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "TensionFailureZ", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_TensionFailureZ(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "TensionFailureZ", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_CompressionFailureX() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "CompressionFailureX", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_CompressionFailureX(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "CompressionFailureX", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_CompressionFailureY() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "CompressionFailureY", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_CompressionFailureY(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "CompressionFailureY", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_CompressionFailureZ() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "CompressionFailureZ", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_CompressionFailureZ(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "CompressionFailureZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFanType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFanType : public virtual IfcFlowMovingDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFanType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFanType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFanType")
        {}

                /// <summary>
                /// Create new instace of IfcFanType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFanType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFanType"); assert(inst); return inst; }

        Nullable<IfcFanTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcFanTypeEnum_); if (v >= 0) return (IfcFanTypeEnum) v; else return Nullable<IfcFanTypeEnum>(); }
        void put_PredefinedType(IfcFanTypeEnum value) { TextValue val = IfcFanTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFastener
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFastener : public virtual IfcElementComponent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFastener(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFastener")
        {}

                /// <summary>
                /// Create new instace of IfcFastener and returns object of this C++ class to interact with
                /// </summary>
        static IfcFastener Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFastener"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFastenerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFastenerType : public virtual IfcElementComponentType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFastenerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFastenerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFastenerType")
        {}

                /// <summary>
                /// Create new instace of IfcFastenerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFastenerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFastenerType"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFeatureElementAddition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFeatureElementAddition : public virtual IfcFeatureElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFeatureElementAddition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFeatureElementAddition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFeatureElementAddition")
        {}


        IfcRelProjectsElement get_ProjectsElements();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFillAreaStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFillAreaStyle : public virtual IfcPresentationStyle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFillAreaStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFillAreaStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFillAreaStyle")
        {}

                /// <summary>
                /// Create new instace of IfcFillAreaStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcFillAreaStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFillAreaStyle"); assert(inst); return inst; }

        //TList may be SetOfIfcFillStyleSelect or list of converible elements
        template <typename TList> void get_FillStyles(TList& lst) { SetOfIfcFillStyleSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "FillStyles"); }

        //TList may be SetOfIfcFillStyleSelect or list of converible elements
        template <typename TList> void put_FillStyles(TList& lst) { SetOfIfcFillStyleSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "FillStyles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFillAreaStyleHatching
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFillAreaStyleHatching : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFillAreaStyleHatching
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFillAreaStyleHatching(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFillAreaStyleHatching")
        {}

                /// <summary>
                /// Create new instace of IfcFillAreaStyleHatching and returns object of this C++ class to interact with
                /// </summary>
        static IfcFillAreaStyleHatching Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFillAreaStyleHatching"); assert(inst); return inst; }

        IfcCurveStyle get_HatchLineAppearance();
        void put_HatchLineAppearance(IfcCurveStyle inst);

        IfcHatchLineDistanceSelect_get get_StartOfNextHatchLine() { return IfcHatchLineDistanceSelect_get(m_instance, "StartOfNextHatchLine", NULL); }
        IfcHatchLineDistanceSelect_put put_StartOfNextHatchLine() { return IfcHatchLineDistanceSelect_put(m_instance, "StartOfNextHatchLine", NULL); }

        IfcCartesianPoint get_PointOfReferenceHatchLine();
        void put_PointOfReferenceHatchLine(IfcCartesianPoint inst);

        IfcCartesianPoint get_PatternStart();
        void put_PatternStart(IfcCartesianPoint inst);

        Nullable<IfcPlaneAngleMeasure> get_HatchLineAngle() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "HatchLineAngle", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_HatchLineAngle(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "HatchLineAngle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFillAreaStyleTiles
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFillAreaStyleTiles : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFillAreaStyleTiles
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFillAreaStyleTiles(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFillAreaStyleTiles")
        {}

                /// <summary>
                /// Create new instace of IfcFillAreaStyleTiles and returns object of this C++ class to interact with
                /// </summary>
        static IfcFillAreaStyleTiles Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFillAreaStyleTiles"); assert(inst); return inst; }

        IfcOneDirectionRepeatFactor get_TilingPattern();
        void put_TilingPattern(IfcOneDirectionRepeatFactor inst);

        //TList may be SetOfIfcFillAreaStyleTileShapeSelect or list of converible elements
        template <typename TList> void get_Tiles(TList& lst) { SetOfIfcFillAreaStyleTileShapeSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Tiles"); }

        //TList may be SetOfIfcFillAreaStyleTileShapeSelect or list of converible elements
        template <typename TList> void put_Tiles(TList& lst) { SetOfIfcFillAreaStyleTileShapeSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Tiles"); }

        Nullable<IfcPositiveRatioMeasure> get_TilingScale() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "TilingScale", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_TilingScale(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "TilingScale", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFillAreaStyleTileSymbolWithStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFillAreaStyleTileSymbolWithStyle : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFillAreaStyleTileSymbolWithStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFillAreaStyleTileSymbolWithStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFillAreaStyleTileSymbolWithStyle")
        {}

                /// <summary>
                /// Create new instace of IfcFillAreaStyleTileSymbolWithStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcFillAreaStyleTileSymbolWithStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFillAreaStyleTileSymbolWithStyle"); assert(inst); return inst; }

        IfcAnnotationSymbolOccurrence get_Symbol();
        void put_Symbol(IfcAnnotationSymbolOccurrence inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFilterType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFilterType : public virtual IfcFlowTreatmentDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFilterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFilterType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFilterType")
        {}

                /// <summary>
                /// Create new instace of IfcFilterType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFilterType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFilterType"); assert(inst); return inst; }

        Nullable<IfcFilterTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcFilterTypeEnum_); if (v >= 0) return (IfcFilterTypeEnum) v; else return Nullable<IfcFilterTypeEnum>(); }
        void put_PredefinedType(IfcFilterTypeEnum value) { TextValue val = IfcFilterTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFireSuppressionTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFireSuppressionTerminalType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFireSuppressionTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFireSuppressionTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFireSuppressionTerminalType")
        {}

                /// <summary>
                /// Create new instace of IfcFireSuppressionTerminalType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFireSuppressionTerminalType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFireSuppressionTerminalType"); assert(inst); return inst; }

        Nullable<IfcFireSuppressionTerminalTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcFireSuppressionTerminalTypeEnum_); if (v >= 0) return (IfcFireSuppressionTerminalTypeEnum) v; else return Nullable<IfcFireSuppressionTerminalTypeEnum>(); }
        void put_PredefinedType(IfcFireSuppressionTerminalTypeEnum value) { TextValue val = IfcFireSuppressionTerminalTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowFitting
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowFitting : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowFitting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowFitting(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowFitting")
        {}

                /// <summary>
                /// Create new instace of IfcFlowFitting and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowFitting Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowFitting"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowInstrumentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowInstrumentType : public virtual IfcDistributionControlElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowInstrumentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowInstrumentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowInstrumentType")
        {}

                /// <summary>
                /// Create new instace of IfcFlowInstrumentType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowInstrumentType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowInstrumentType"); assert(inst); return inst; }

        Nullable<IfcFlowInstrumentTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcFlowInstrumentTypeEnum_); if (v >= 0) return (IfcFlowInstrumentTypeEnum) v; else return Nullable<IfcFlowInstrumentTypeEnum>(); }
        void put_PredefinedType(IfcFlowInstrumentTypeEnum value) { TextValue val = IfcFlowInstrumentTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowMeterType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowMeterType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowMeterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowMeterType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowMeterType")
        {}

                /// <summary>
                /// Create new instace of IfcFlowMeterType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowMeterType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowMeterType"); assert(inst); return inst; }

        Nullable<IfcFlowMeterTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcFlowMeterTypeEnum_); if (v >= 0) return (IfcFlowMeterTypeEnum) v; else return Nullable<IfcFlowMeterTypeEnum>(); }
        void put_PredefinedType(IfcFlowMeterTypeEnum value) { TextValue val = IfcFlowMeterTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowMovingDevice
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowMovingDevice : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowMovingDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowMovingDevice(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowMovingDevice")
        {}

                /// <summary>
                /// Create new instace of IfcFlowMovingDevice and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowMovingDevice Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowMovingDevice"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowSegment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowSegment : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowSegment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowSegment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowSegment")
        {}

                /// <summary>
                /// Create new instace of IfcFlowSegment and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowSegment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowSegment"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowStorageDevice
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowStorageDevice : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowStorageDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowStorageDevice(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowStorageDevice")
        {}

                /// <summary>
                /// Create new instace of IfcFlowStorageDevice and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowStorageDevice Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowStorageDevice"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowTerminal
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowTerminal : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowTerminal
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowTerminal(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowTerminal")
        {}

                /// <summary>
                /// Create new instace of IfcFlowTerminal and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowTerminal Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowTerminal"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFlowTreatmentDevice
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFlowTreatmentDevice : public virtual IfcDistributionFlowElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFlowTreatmentDevice
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFlowTreatmentDevice(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFlowTreatmentDevice")
        {}

                /// <summary>
                /// Create new instace of IfcFlowTreatmentDevice and returns object of this C++ class to interact with
                /// </summary>
        static IfcFlowTreatmentDevice Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFlowTreatmentDevice"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFluidFlowProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFluidFlowProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFluidFlowProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFluidFlowProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFluidFlowProperties")
        {}

                /// <summary>
                /// Create new instace of IfcFluidFlowProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcFluidFlowProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFluidFlowProperties"); assert(inst); return inst; }

        Nullable<IfcPropertySourceEnum> get_PropertySource() { int v = getENUM("PropertySource", IfcPropertySourceEnum_); if (v >= 0) return (IfcPropertySourceEnum) v; else return Nullable<IfcPropertySourceEnum>(); }
        void put_PropertySource(IfcPropertySourceEnum value) { TextValue val = IfcPropertySourceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PropertySource", sdaiENUM, val); }

        IfcTimeSeries get_FlowConditionTimeSeries();
        void put_FlowConditionTimeSeries(IfcTimeSeries inst);

        IfcTimeSeries get_VelocityTimeSeries();
        void put_VelocityTimeSeries(IfcTimeSeries inst);

        IfcTimeSeries get_FlowrateTimeSeries();
        void put_FlowrateTimeSeries(IfcTimeSeries inst);

        IfcMaterial get_Fluid();
        void put_Fluid(IfcMaterial inst);

        IfcTimeSeries get_PressureTimeSeries();
        void put_PressureTimeSeries(IfcTimeSeries inst);

        IfcLabel get_UserDefinedPropertySource() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedPropertySource", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedPropertySource(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedPropertySource", sdaiSTRING, value); }

        Nullable<IfcThermodynamicTemperatureMeasure> get_TemperatureSingleValue() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "TemperatureSingleValue", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_TemperatureSingleValue(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "TemperatureSingleValue", sdaiREAL, &value); }

        Nullable<IfcThermodynamicTemperatureMeasure> get_WetBulbTemperatureSingleValue() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "WetBulbTemperatureSingleValue", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_WetBulbTemperatureSingleValue(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "WetBulbTemperatureSingleValue", sdaiREAL, &value); }

        IfcTimeSeries get_WetBulbTemperatureTimeSeries();
        void put_WetBulbTemperatureTimeSeries(IfcTimeSeries inst);

        IfcTimeSeries get_TemperatureTimeSeries();
        void put_TemperatureTimeSeries(IfcTimeSeries inst);

        IfcDerivedMeasureValue_get get_FlowrateSingleValue() { return IfcDerivedMeasureValue_get(m_instance, "FlowrateSingleValue", NULL); }
        IfcDerivedMeasureValue_put put_FlowrateSingleValue() { return IfcDerivedMeasureValue_put(m_instance, "FlowrateSingleValue", NULL); }

        Nullable<IfcPositiveRatioMeasure> get_FlowConditionSingleValue() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlowConditionSingleValue", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_FlowConditionSingleValue(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "FlowConditionSingleValue", sdaiREAL, &value); }

        Nullable<IfcLinearVelocityMeasure> get_VelocitySingleValue() { IfcLinearVelocityMeasure val = (IfcLinearVelocityMeasure) 0; if (sdaiGetAttrBN(m_instance, "VelocitySingleValue", sdaiREAL, &val)) return val; else return Nullable<IfcLinearVelocityMeasure>(); }
        void put_VelocitySingleValue(IfcLinearVelocityMeasure value) { sdaiPutAttrBN(m_instance, "VelocitySingleValue", sdaiREAL, &value); }

        Nullable<IfcPressureMeasure> get_PressureSingleValue() { IfcPressureMeasure val = (IfcPressureMeasure) 0; if (sdaiGetAttrBN(m_instance, "PressureSingleValue", sdaiREAL, &val)) return val; else return Nullable<IfcPressureMeasure>(); }
        void put_PressureSingleValue(IfcPressureMeasure value) { sdaiPutAttrBN(m_instance, "PressureSingleValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFooting
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFooting : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFooting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFooting(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFooting")
        {}

                /// <summary>
                /// Create new instace of IfcFooting and returns object of this C++ class to interact with
                /// </summary>
        static IfcFooting Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFooting"); assert(inst); return inst; }

        Nullable<IfcFootingTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcFootingTypeEnum_); if (v >= 0) return (IfcFootingTypeEnum) v; else return Nullable<IfcFootingTypeEnum>(); }
        void put_PredefinedType(IfcFootingTypeEnum value) { TextValue val = IfcFootingTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFuelProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFuelProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFuelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFuelProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFuelProperties")
        {}

                /// <summary>
                /// Create new instace of IfcFuelProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcFuelProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFuelProperties"); assert(inst); return inst; }

        Nullable<IfcThermodynamicTemperatureMeasure> get_CombustionTemperature() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "CombustionTemperature", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_CombustionTemperature(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "CombustionTemperature", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_CarbonContent() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "CarbonContent", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_CarbonContent(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "CarbonContent", sdaiREAL, &value); }

        Nullable<IfcHeatingValueMeasure> get_LowerHeatingValue() { IfcHeatingValueMeasure val = (IfcHeatingValueMeasure) 0; if (sdaiGetAttrBN(m_instance, "LowerHeatingValue", sdaiREAL, &val)) return val; else return Nullable<IfcHeatingValueMeasure>(); }
        void put_LowerHeatingValue(IfcHeatingValueMeasure value) { sdaiPutAttrBN(m_instance, "LowerHeatingValue", sdaiREAL, &value); }

        Nullable<IfcHeatingValueMeasure> get_HigherHeatingValue() { IfcHeatingValueMeasure val = (IfcHeatingValueMeasure) 0; if (sdaiGetAttrBN(m_instance, "HigherHeatingValue", sdaiREAL, &val)) return val; else return Nullable<IfcHeatingValueMeasure>(); }
        void put_HigherHeatingValue(IfcHeatingValueMeasure value) { sdaiPutAttrBN(m_instance, "HigherHeatingValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFurnishingElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFurnishingElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFurnishingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFurnishingElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFurnishingElement")
        {}

                /// <summary>
                /// Create new instace of IfcFurnishingElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcFurnishingElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFurnishingElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFurnishingElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFurnishingElementType : public virtual IfcElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFurnishingElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFurnishingElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFurnishingElementType")
        {}

                /// <summary>
                /// Create new instace of IfcFurnishingElementType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFurnishingElementType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFurnishingElementType"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFurnitureStandard
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFurnitureStandard : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFurnitureStandard
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFurnitureStandard(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFurnitureStandard")
        {}

                /// <summary>
                /// Create new instace of IfcFurnitureStandard and returns object of this C++ class to interact with
                /// </summary>
        static IfcFurnitureStandard Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFurnitureStandard"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcFurnitureType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcFurnitureType : public virtual IfcFurnishingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcFurnitureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcFurnitureType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcFurnitureType")
        {}

                /// <summary>
                /// Create new instace of IfcFurnitureType and returns object of this C++ class to interact with
                /// </summary>
        static IfcFurnitureType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcFurnitureType"); assert(inst); return inst; }

        Nullable<IfcAssemblyPlaceEnum> get_AssemblyPlace() { int v = getENUM("AssemblyPlace", IfcAssemblyPlaceEnum_); if (v >= 0) return (IfcAssemblyPlaceEnum) v; else return Nullable<IfcAssemblyPlaceEnum>(); }
        void put_AssemblyPlace(IfcAssemblyPlaceEnum value) { TextValue val = IfcAssemblyPlaceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "AssemblyPlace", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGasTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGasTerminalType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGasTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGasTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGasTerminalType")
        {}

                /// <summary>
                /// Create new instace of IfcGasTerminalType and returns object of this C++ class to interact with
                /// </summary>
        static IfcGasTerminalType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGasTerminalType"); assert(inst); return inst; }

        Nullable<IfcGasTerminalTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcGasTerminalTypeEnum_); if (v >= 0) return (IfcGasTerminalTypeEnum) v; else return Nullable<IfcGasTerminalTypeEnum>(); }
        void put_PredefinedType(IfcGasTerminalTypeEnum value) { TextValue val = IfcGasTerminalTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeneralMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeneralMaterialProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeneralMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeneralMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeneralMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcGeneralMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcGeneralMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGeneralMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcMolecularWeightMeasure> get_MolecularWeight() { IfcMolecularWeightMeasure val = (IfcMolecularWeightMeasure) 0; if (sdaiGetAttrBN(m_instance, "MolecularWeight", sdaiREAL, &val)) return val; else return Nullable<IfcMolecularWeightMeasure>(); }
        void put_MolecularWeight(IfcMolecularWeightMeasure value) { sdaiPutAttrBN(m_instance, "MolecularWeight", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_Porosity() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Porosity", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_Porosity(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "Porosity", sdaiREAL, &value); }

        Nullable<IfcMassDensityMeasure> get_MassDensity() { IfcMassDensityMeasure val = (IfcMassDensityMeasure) 0; if (sdaiGetAttrBN(m_instance, "MassDensity", sdaiREAL, &val)) return val; else return Nullable<IfcMassDensityMeasure>(); }
        void put_MassDensity(IfcMassDensityMeasure value) { sdaiPutAttrBN(m_instance, "MassDensity", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProfileProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProfileProperties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProfileProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProfileProperties")
        {}


        IfcLabel get_ProfileName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ProfileName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ProfileName(IfcLabel value) { sdaiPutAttrBN(m_instance, "ProfileName", sdaiSTRING, value); }

        IfcProfileDef get_ProfileDefinition();
        void put_ProfileDefinition(IfcProfileDef inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeneralProfileProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeneralProfileProperties : public virtual IfcProfileProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeneralProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeneralProfileProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeneralProfileProperties")
        {}

                /// <summary>
                /// Create new instace of IfcGeneralProfileProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcGeneralProfileProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGeneralProfileProperties"); assert(inst); return inst; }

        Nullable<IfcMassPerLengthMeasure> get_PhysicalWeight() { IfcMassPerLengthMeasure val = (IfcMassPerLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "PhysicalWeight", sdaiREAL, &val)) return val; else return Nullable<IfcMassPerLengthMeasure>(); }
        void put_PhysicalWeight(IfcMassPerLengthMeasure value) { sdaiPutAttrBN(m_instance, "PhysicalWeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Perimeter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Perimeter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Perimeter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Perimeter", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_MinimumPlateThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinimumPlateThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MinimumPlateThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MinimumPlateThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_MaximumPlateThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaximumPlateThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MaximumPlateThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MaximumPlateThickness", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_CrossSectionArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "CrossSectionArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_CrossSectionArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "CrossSectionArea", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeometricSet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeometricSet : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeometricSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeometricSet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeometricSet")
        {}

                /// <summary>
                /// Create new instace of IfcGeometricSet and returns object of this C++ class to interact with
                /// </summary>
        static IfcGeometricSet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGeometricSet"); assert(inst); return inst; }

        //TList may be SetOfIfcGeometricSetSelect or list of converible elements
        template <typename TList> void get_Elements(TList& lst) { SetOfIfcGeometricSetSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Elements"); }

        //TList may be SetOfIfcGeometricSetSelect or list of converible elements
        template <typename TList> void put_Elements(TList& lst) { SetOfIfcGeometricSetSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Elements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeometricCurveSet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeometricCurveSet : public virtual IfcGeometricSet
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeometricCurveSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeometricCurveSet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeometricCurveSet")
        {}

                /// <summary>
                /// Create new instace of IfcGeometricCurveSet and returns object of this C++ class to interact with
                /// </summary>
        static IfcGeometricCurveSet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGeometricCurveSet"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRepresentationContext
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRepresentationContext : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRepresentationContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRepresentationContext(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRepresentationContext")
        {}

                /// <summary>
                /// Create new instace of IfcRepresentationContext and returns object of this C++ class to interact with
                /// </summary>
        static IfcRepresentationContext Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRepresentationContext"); assert(inst); return inst; }

        IfcLabel get_ContextIdentifier() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ContextIdentifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ContextIdentifier(IfcLabel value) { sdaiPutAttrBN(m_instance, "ContextIdentifier", sdaiSTRING, value); }

        IfcLabel get_ContextType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ContextType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ContextType(IfcLabel value) { sdaiPutAttrBN(m_instance, "ContextType", sdaiSTRING, value); }

        //TList may be SetOfIfcRepresentation or list of converible elements
        template <typename TList> void get_RepresentationsInContext(TList& lst) { SetOfIfcRepresentationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RepresentationsInContext"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationContext
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeometricRepresentationContext : public virtual IfcRepresentationContext
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeometricRepresentationContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeometricRepresentationContext(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeometricRepresentationContext")
        {}

                /// <summary>
                /// Create new instace of IfcGeometricRepresentationContext and returns object of this C++ class to interact with
                /// </summary>
        static IfcGeometricRepresentationContext Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGeometricRepresentationContext"); assert(inst); return inst; }

        Nullable<IfcDimensionCount> get_CoordinateSpaceDimension() { IfcDimensionCount val = (IfcDimensionCount) 0; if (sdaiGetAttrBN(m_instance, "CoordinateSpaceDimension", sdaiINTEGER, &val)) return val; else return Nullable<IfcDimensionCount>(); }
        void put_CoordinateSpaceDimension(IfcDimensionCount value) { sdaiPutAttrBN(m_instance, "CoordinateSpaceDimension", sdaiINTEGER, &value); }

        Nullable<double> get_Precision() { double val = (double) 0; if (sdaiGetAttrBN(m_instance, "Precision", sdaiREAL, &val)) return val; else return Nullable<double>(); }
        void put_Precision(double value) { sdaiPutAttrBN(m_instance, "Precision", sdaiREAL, &value); }

        IfcAxis2Placement_get get_WorldCoordinateSystem() { return IfcAxis2Placement_get(m_instance, "WorldCoordinateSystem", NULL); }
        IfcAxis2Placement_put put_WorldCoordinateSystem() { return IfcAxis2Placement_put(m_instance, "WorldCoordinateSystem", NULL); }

        IfcDirection get_TrueNorth();
        void put_TrueNorth(IfcDirection inst);

        //TList may be SetOfIfcGeometricRepresentationSubContext or list of converible elements
        template <typename TList> void get_HasSubContexts(TList& lst) { SetOfIfcGeometricRepresentationSubContextSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasSubContexts"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGeometricRepresentationSubContext
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGeometricRepresentationSubContext : public virtual IfcGeometricRepresentationContext
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGeometricRepresentationSubContext
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGeometricRepresentationSubContext(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGeometricRepresentationSubContext")
        {}

                /// <summary>
                /// Create new instace of IfcGeometricRepresentationSubContext and returns object of this C++ class to interact with
                /// </summary>
        static IfcGeometricRepresentationSubContext Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGeometricRepresentationSubContext"); assert(inst); return inst; }

        IfcGeometricRepresentationContext get_ParentContext();
        void put_ParentContext(IfcGeometricRepresentationContext inst);

        Nullable<IfcPositiveRatioMeasure> get_TargetScale() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "TargetScale", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_TargetScale(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "TargetScale", sdaiREAL, &value); }

        Nullable<IfcGeometricProjectionEnum> get_TargetView() { int v = getENUM("TargetView", IfcGeometricProjectionEnum_); if (v >= 0) return (IfcGeometricProjectionEnum) v; else return Nullable<IfcGeometricProjectionEnum>(); }
        void put_TargetView(IfcGeometricProjectionEnum value) { TextValue val = IfcGeometricProjectionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "TargetView", sdaiENUM, val); }

        IfcLabel get_UserDefinedTargetView() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedTargetView", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedTargetView(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedTargetView", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGrid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGrid : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGrid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGrid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGrid")
        {}

                /// <summary>
                /// Create new instace of IfcGrid and returns object of this C++ class to interact with
                /// </summary>
        static IfcGrid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGrid"); assert(inst); return inst; }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void get_UAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr; sr.FromAttr(lst, m_instance, "UAxes"); }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void put_UAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "UAxes"); }

        //TArrayElem[] may be IfcGridAxis[] or array of convertible elements
        template <typename TArrayElem> void put_UAxes(TArrayElem arr[], size_t n) { ListOfIfcGridAxis lst; ArrayToList(arr, n, lst); put_UAxes(lst); }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void get_VAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr; sr.FromAttr(lst, m_instance, "VAxes"); }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void put_VAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "VAxes"); }

        //TArrayElem[] may be IfcGridAxis[] or array of convertible elements
        template <typename TArrayElem> void put_VAxes(TArrayElem arr[], size_t n) { ListOfIfcGridAxis lst; ArrayToList(arr, n, lst); put_VAxes(lst); }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void get_WAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr; sr.FromAttr(lst, m_instance, "WAxes"); }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void put_WAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "WAxes"); }

        //TArrayElem[] may be IfcGridAxis[] or array of convertible elements
        template <typename TArrayElem> void put_WAxes(TArrayElem arr[], size_t n) { ListOfIfcGridAxis lst; ArrayToList(arr, n, lst); put_WAxes(lst); }

        //TList may be SetOfIfcRelContainedInSpatialStructure or list of converible elements
        template <typename TList> void get_ContainedInStructure(TList& lst) { SetOfIfcRelContainedInSpatialStructureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ContainedInStructure"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGridAxis
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGridAxis : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGridAxis
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGridAxis(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGridAxis")
        {}

                /// <summary>
                /// Create new instace of IfcGridAxis and returns object of this C++ class to interact with
                /// </summary>
        static IfcGridAxis Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGridAxis"); assert(inst); return inst; }

        IfcLabel get_AxisTag() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "AxisTag", sdaiSTRING, &val)) return val; else return NULL; }
        void put_AxisTag(IfcLabel value) { sdaiPutAttrBN(m_instance, "AxisTag", sdaiSTRING, value); }

        IfcCurve get_AxisCurve();
        void put_AxisCurve(IfcCurve inst);

        Nullable<IfcBoolean> get_SameSense() { IfcBoolean val = (IfcBoolean) 0; if (sdaiGetAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &val)) return val; else return Nullable<IfcBoolean>(); }
        void put_SameSense(IfcBoolean value) { sdaiPutAttrBN(m_instance, "SameSense", sdaiBOOLEAN, &value); }

        //TList may be SetOfIfcGrid or list of converible elements
        template <typename TList> void get_PartOfW(TList& lst) { SetOfIfcGridSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PartOfW"); }

        //TList may be SetOfIfcGrid or list of converible elements
        template <typename TList> void get_PartOfV(TList& lst) { SetOfIfcGridSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PartOfV"); }

        //TList may be SetOfIfcGrid or list of converible elements
        template <typename TList> void get_PartOfU(TList& lst) { SetOfIfcGridSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PartOfU"); }

        //TList may be SetOfIfcVirtualGridIntersection or list of converible elements
        template <typename TList> void get_HasIntersections(TList& lst) { SetOfIfcVirtualGridIntersectionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasIntersections"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcObjectPlacement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcObjectPlacement : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcObjectPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcObjectPlacement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcObjectPlacement")
        {}


        //TList may be SetOfIfcProduct or list of converible elements
        template <typename TList> void get_PlacesObject(TList& lst) { SetOfIfcProductSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PlacesObject"); }

        //TList may be SetOfIfcLocalPlacement or list of converible elements
        template <typename TList> void get_ReferencedByPlacements(TList& lst) { SetOfIfcLocalPlacementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferencedByPlacements"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcGridPlacement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcGridPlacement : public virtual IfcObjectPlacement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcGridPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcGridPlacement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcGridPlacement")
        {}

                /// <summary>
                /// Create new instace of IfcGridPlacement and returns object of this C++ class to interact with
                /// </summary>
        static IfcGridPlacement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcGridPlacement"); assert(inst); return inst; }

        IfcVirtualGridIntersection get_PlacementLocation();
        void put_PlacementLocation(IfcVirtualGridIntersection inst);

        IfcVirtualGridIntersection get_PlacementRefDirection();
        void put_PlacementRefDirection(IfcVirtualGridIntersection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcHeatExchangerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcHeatExchangerType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcHeatExchangerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcHeatExchangerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcHeatExchangerType")
        {}

                /// <summary>
                /// Create new instace of IfcHeatExchangerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcHeatExchangerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcHeatExchangerType"); assert(inst); return inst; }

        Nullable<IfcHeatExchangerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcHeatExchangerTypeEnum_); if (v >= 0) return (IfcHeatExchangerTypeEnum) v; else return Nullable<IfcHeatExchangerTypeEnum>(); }
        void put_PredefinedType(IfcHeatExchangerTypeEnum value) { TextValue val = IfcHeatExchangerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcHumidifierType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcHumidifierType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcHumidifierType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcHumidifierType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcHumidifierType")
        {}

                /// <summary>
                /// Create new instace of IfcHumidifierType and returns object of this C++ class to interact with
                /// </summary>
        static IfcHumidifierType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcHumidifierType"); assert(inst); return inst; }

        Nullable<IfcHumidifierTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcHumidifierTypeEnum_); if (v >= 0) return (IfcHumidifierTypeEnum) v; else return Nullable<IfcHumidifierTypeEnum>(); }
        void put_PredefinedType(IfcHumidifierTypeEnum value) { TextValue val = IfcHumidifierTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcHygroscopicMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcHygroscopicMaterialProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcHygroscopicMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcHygroscopicMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcHygroscopicMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcHygroscopicMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcHygroscopicMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcHygroscopicMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveRatioMeasure> get_UpperVaporResistanceFactor() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "UpperVaporResistanceFactor", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_UpperVaporResistanceFactor(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "UpperVaporResistanceFactor", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_LowerVaporResistanceFactor() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "LowerVaporResistanceFactor", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_LowerVaporResistanceFactor(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "LowerVaporResistanceFactor", sdaiREAL, &value); }

        Nullable<IfcIsothermalMoistureCapacityMeasure> get_IsothermalMoistureCapacity() { IfcIsothermalMoistureCapacityMeasure val = (IfcIsothermalMoistureCapacityMeasure) 0; if (sdaiGetAttrBN(m_instance, "IsothermalMoistureCapacity", sdaiREAL, &val)) return val; else return Nullable<IfcIsothermalMoistureCapacityMeasure>(); }
        void put_IsothermalMoistureCapacity(IfcIsothermalMoistureCapacityMeasure value) { sdaiPutAttrBN(m_instance, "IsothermalMoistureCapacity", sdaiREAL, &value); }

        Nullable<IfcVaporPermeabilityMeasure> get_VaporPermeability() { IfcVaporPermeabilityMeasure val = (IfcVaporPermeabilityMeasure) 0; if (sdaiGetAttrBN(m_instance, "VaporPermeability", sdaiREAL, &val)) return val; else return Nullable<IfcVaporPermeabilityMeasure>(); }
        void put_VaporPermeability(IfcVaporPermeabilityMeasure value) { sdaiPutAttrBN(m_instance, "VaporPermeability", sdaiREAL, &value); }

        Nullable<IfcMoistureDiffusivityMeasure> get_MoistureDiffusivity() { IfcMoistureDiffusivityMeasure val = (IfcMoistureDiffusivityMeasure) 0; if (sdaiGetAttrBN(m_instance, "MoistureDiffusivity", sdaiREAL, &val)) return val; else return Nullable<IfcMoistureDiffusivityMeasure>(); }
        void put_MoistureDiffusivity(IfcMoistureDiffusivityMeasure value) { sdaiPutAttrBN(m_instance, "MoistureDiffusivity", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcImageTexture
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcImageTexture : public virtual IfcSurfaceTexture
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcImageTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcImageTexture(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcImageTexture")
        {}

                /// <summary>
                /// Create new instace of IfcImageTexture and returns object of this C++ class to interact with
                /// </summary>
        static IfcImageTexture Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcImageTexture"); assert(inst); return inst; }

        IfcIdentifier get_UrlReference() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "UrlReference", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UrlReference(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "UrlReference", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcInventory
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcInventory : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcInventory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcInventory(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcInventory")
        {}

                /// <summary>
                /// Create new instace of IfcInventory and returns object of this C++ class to interact with
                /// </summary>
        static IfcInventory Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcInventory"); assert(inst); return inst; }

        Nullable<IfcInventoryTypeEnum> get_InventoryType() { int v = getENUM("InventoryType", IfcInventoryTypeEnum_); if (v >= 0) return (IfcInventoryTypeEnum) v; else return Nullable<IfcInventoryTypeEnum>(); }
        void put_InventoryType(IfcInventoryTypeEnum value) { TextValue val = IfcInventoryTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "InventoryType", sdaiENUM, val); }

        IfcActorSelect_get get_Jurisdiction() { return IfcActorSelect_get(m_instance, "Jurisdiction", NULL); }
        IfcActorSelect_put put_Jurisdiction() { return IfcActorSelect_put(m_instance, "Jurisdiction", NULL); }

        //TList may be SetOfIfcPerson or list of converible elements
        template <typename TList> void get_ResponsiblePersons(TList& lst) { SetOfIfcPersonSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ResponsiblePersons"); }

        //TList may be SetOfIfcPerson or list of converible elements
        template <typename TList> void put_ResponsiblePersons(TList& lst) { SetOfIfcPersonSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ResponsiblePersons"); }

        //TArrayElem[] may be IfcPerson[] or array of convertible elements
        template <typename TArrayElem> void put_ResponsiblePersons(TArrayElem arr[], size_t n) { SetOfIfcPerson lst; ArrayToList(arr, n, lst); put_ResponsiblePersons(lst); }

        IfcCalendarDate get_LastUpdateDate();
        void put_LastUpdateDate(IfcCalendarDate inst);

        IfcCostValue get_CurrentValue();
        void put_CurrentValue(IfcCostValue inst);

        IfcCostValue get_OriginalValue();
        void put_OriginalValue(IfcCostValue inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTimeSeries
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTimeSeries : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTimeSeries(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTimeSeries")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcDateTimeSelect_get get_StartTime() { return IfcDateTimeSelect_get(m_instance, "StartTime", NULL); }
        IfcDateTimeSelect_put put_StartTime() { return IfcDateTimeSelect_put(m_instance, "StartTime", NULL); }

        IfcDateTimeSelect_get get_EndTime() { return IfcDateTimeSelect_get(m_instance, "EndTime", NULL); }
        IfcDateTimeSelect_put put_EndTime() { return IfcDateTimeSelect_put(m_instance, "EndTime", NULL); }

        Nullable<IfcTimeSeriesDataTypeEnum> get_TimeSeriesDataType() { int v = getENUM("TimeSeriesDataType", IfcTimeSeriesDataTypeEnum_); if (v >= 0) return (IfcTimeSeriesDataTypeEnum) v; else return Nullable<IfcTimeSeriesDataTypeEnum>(); }
        void put_TimeSeriesDataType(IfcTimeSeriesDataTypeEnum value) { TextValue val = IfcTimeSeriesDataTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "TimeSeriesDataType", sdaiENUM, val); }

        Nullable<IfcDataOriginEnum> get_DataOrigin() { int v = getENUM("DataOrigin", IfcDataOriginEnum_); if (v >= 0) return (IfcDataOriginEnum) v; else return Nullable<IfcDataOriginEnum>(); }
        void put_DataOrigin(IfcDataOriginEnum value) { TextValue val = IfcDataOriginEnum_[(int) value]; sdaiPutAttrBN(m_instance, "DataOrigin", sdaiENUM, val); }

        IfcLabel get_UserDefinedDataOrigin() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedDataOrigin", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedDataOrigin(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedDataOrigin", sdaiSTRING, value); }

        IfcUnit_get get_Unit() { return IfcUnit_get(m_instance, "Unit", NULL); }
        IfcUnit_put put_Unit() { return IfcUnit_put(m_instance, "Unit", NULL); }

        //TList may be SetOfIfcTimeSeriesReferenceRelationship or list of converible elements
        template <typename TList> void get_DocumentedBy(TList& lst) { SetOfIfcTimeSeriesReferenceRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DocumentedBy"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcIrregularTimeSeries
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcIrregularTimeSeries : public virtual IfcTimeSeries
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcIrregularTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcIrregularTimeSeries(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcIrregularTimeSeries")
        {}

                /// <summary>
                /// Create new instace of IfcIrregularTimeSeries and returns object of this C++ class to interact with
                /// </summary>
        static IfcIrregularTimeSeries Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcIrregularTimeSeries"); assert(inst); return inst; }

        //TList may be ListOfIfcIrregularTimeSeriesValue or list of converible elements
        template <typename TList> void get_Values(TList& lst) { ListOfIfcIrregularTimeSeriesValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Values"); }

        //TList may be ListOfIfcIrregularTimeSeriesValue or list of converible elements
        template <typename TList> void put_Values(TList& lst) { ListOfIfcIrregularTimeSeriesValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Values"); }

        //TArrayElem[] may be IfcIrregularTimeSeriesValue[] or array of convertible elements
        template <typename TArrayElem> void put_Values(TArrayElem arr[], size_t n) { ListOfIfcIrregularTimeSeriesValue lst; ArrayToList(arr, n, lst); put_Values(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcIrregularTimeSeriesValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcIrregularTimeSeriesValue : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcIrregularTimeSeriesValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcIrregularTimeSeriesValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcIrregularTimeSeriesValue")
        {}

                /// <summary>
                /// Create new instace of IfcIrregularTimeSeriesValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcIrregularTimeSeriesValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcIrregularTimeSeriesValue"); assert(inst); return inst; }

        IfcDateTimeSelect_get get_TimeStamp() { return IfcDateTimeSelect_get(m_instance, "TimeStamp", NULL); }
        IfcDateTimeSelect_put put_TimeStamp() { return IfcDateTimeSelect_put(m_instance, "TimeStamp", NULL); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_ListValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ListValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_ListValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ListValues"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcJunctionBoxType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcJunctionBoxType : public virtual IfcFlowFittingType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcJunctionBoxType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcJunctionBoxType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcJunctionBoxType")
        {}

                /// <summary>
                /// Create new instace of IfcJunctionBoxType and returns object of this C++ class to interact with
                /// </summary>
        static IfcJunctionBoxType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcJunctionBoxType"); assert(inst); return inst; }

        Nullable<IfcJunctionBoxTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcJunctionBoxTypeEnum_); if (v >= 0) return (IfcJunctionBoxTypeEnum) v; else return Nullable<IfcJunctionBoxTypeEnum>(); }
        void put_PredefinedType(IfcJunctionBoxTypeEnum value) { TextValue val = IfcJunctionBoxTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLaborResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLaborResource : public virtual IfcConstructionResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLaborResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLaborResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLaborResource")
        {}

                /// <summary>
                /// Create new instace of IfcLaborResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcLaborResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLaborResource"); assert(inst); return inst; }

        IfcText get_SkillSet() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "SkillSet", sdaiSTRING, &val)) return val; else return NULL; }
        void put_SkillSet(IfcText value) { sdaiPutAttrBN(m_instance, "SkillSet", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLampType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLampType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLampType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLampType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLampType")
        {}

                /// <summary>
                /// Create new instace of IfcLampType and returns object of this C++ class to interact with
                /// </summary>
        static IfcLampType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLampType"); assert(inst); return inst; }

        Nullable<IfcLampTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcLampTypeEnum_); if (v >= 0) return (IfcLampTypeEnum) v; else return Nullable<IfcLampTypeEnum>(); }
        void put_PredefinedType(IfcLampTypeEnum value) { TextValue val = IfcLampTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLibraryInformation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLibraryInformation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLibraryInformation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLibraryInformation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLibraryInformation")
        {}

                /// <summary>
                /// Create new instace of IfcLibraryInformation and returns object of this C++ class to interact with
                /// </summary>
        static IfcLibraryInformation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLibraryInformation"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcLabel get_Version() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Version", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Version(IfcLabel value) { sdaiPutAttrBN(m_instance, "Version", sdaiSTRING, value); }

        IfcOrganization get_Publisher();
        void put_Publisher(IfcOrganization inst);

        IfcCalendarDate get_VersionDate();
        void put_VersionDate(IfcCalendarDate inst);

        //TList may be SetOfIfcLibraryReference or list of converible elements
        template <typename TList> void get_LibraryReference(TList& lst) { SetOfIfcLibraryReferenceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LibraryReference"); }

        //TList may be SetOfIfcLibraryReference or list of converible elements
        template <typename TList> void put_LibraryReference(TList& lst) { SetOfIfcLibraryReferenceSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "LibraryReference"); }

        //TArrayElem[] may be IfcLibraryReference[] or array of convertible elements
        template <typename TArrayElem> void put_LibraryReference(TArrayElem arr[], size_t n) { SetOfIfcLibraryReference lst; ArrayToList(arr, n, lst); put_LibraryReference(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLibraryReference
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLibraryReference : public virtual IfcExternalReference
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLibraryReference
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLibraryReference(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLibraryReference")
        {}

                /// <summary>
                /// Create new instace of IfcLibraryReference and returns object of this C++ class to interact with
                /// </summary>
        static IfcLibraryReference Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLibraryReference"); assert(inst); return inst; }

        //TList may be SetOfIfcLibraryInformation or list of converible elements
        template <typename TList> void get_ReferenceIntoLibrary(TList& lst) { SetOfIfcLibraryInformationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferenceIntoLibrary"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightDistributionData
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightDistributionData : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightDistributionData
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightDistributionData(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightDistributionData")
        {}

                /// <summary>
                /// Create new instace of IfcLightDistributionData and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightDistributionData Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightDistributionData"); assert(inst); return inst; }

        Nullable<IfcPlaneAngleMeasure> get_MainPlaneAngle() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "MainPlaneAngle", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_MainPlaneAngle(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "MainPlaneAngle", sdaiREAL, &value); }

        //TList may be ListOfIfcPlaneAngleMeasure or list of converible elements
        template <typename TList> void get_SecondaryPlaneAngle(TList& lst) { ListOfIfcPlaneAngleMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SecondaryPlaneAngle"); }

        //TList may be ListOfIfcPlaneAngleMeasure or list of converible elements
        template <typename TList> void put_SecondaryPlaneAngle(TList& lst) { ListOfIfcPlaneAngleMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SecondaryPlaneAngle"); }

        //TArrayElem[] may be IfcPlaneAngleMeasure[] or array of convertible elements
        template <typename TArrayElem> void put_SecondaryPlaneAngle(TArrayElem arr[], size_t n) { ListOfIfcPlaneAngleMeasure lst; ArrayToList(arr, n, lst); put_SecondaryPlaneAngle(lst); }

        //TList may be ListOfIfcLuminousIntensityDistributionMeasure or list of converible elements
        template <typename TList> void get_LuminousIntensity(TList& lst) { ListOfIfcLuminousIntensityDistributionMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LuminousIntensity"); }

        //TList may be ListOfIfcLuminousIntensityDistributionMeasure or list of converible elements
        template <typename TList> void put_LuminousIntensity(TList& lst) { ListOfIfcLuminousIntensityDistributionMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "LuminousIntensity"); }

        //TArrayElem[] may be IfcLuminousIntensityDistributionMeasure[] or array of convertible elements
        template <typename TArrayElem> void put_LuminousIntensity(TArrayElem arr[], size_t n) { ListOfIfcLuminousIntensityDistributionMeasure lst; ArrayToList(arr, n, lst); put_LuminousIntensity(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightFixtureType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightFixtureType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightFixtureType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightFixtureType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightFixtureType")
        {}

                /// <summary>
                /// Create new instace of IfcLightFixtureType and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightFixtureType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightFixtureType"); assert(inst); return inst; }

        Nullable<IfcLightFixtureTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcLightFixtureTypeEnum_); if (v >= 0) return (IfcLightFixtureTypeEnum) v; else return Nullable<IfcLightFixtureTypeEnum>(); }
        void put_PredefinedType(IfcLightFixtureTypeEnum value) { TextValue val = IfcLightFixtureTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightIntensityDistribution
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightIntensityDistribution : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightIntensityDistribution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightIntensityDistribution(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightIntensityDistribution")
        {}

                /// <summary>
                /// Create new instace of IfcLightIntensityDistribution and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightIntensityDistribution Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightIntensityDistribution"); assert(inst); return inst; }

        Nullable<IfcLightDistributionCurveEnum> get_LightDistributionCurve() { int v = getENUM("LightDistributionCurve", IfcLightDistributionCurveEnum_); if (v >= 0) return (IfcLightDistributionCurveEnum) v; else return Nullable<IfcLightDistributionCurveEnum>(); }
        void put_LightDistributionCurve(IfcLightDistributionCurveEnum value) { TextValue val = IfcLightDistributionCurveEnum_[(int) value]; sdaiPutAttrBN(m_instance, "LightDistributionCurve", sdaiENUM, val); }

        //TList may be ListOfIfcLightDistributionData or list of converible elements
        template <typename TList> void get_DistributionData(TList& lst) { ListOfIfcLightDistributionDataSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DistributionData"); }

        //TList may be ListOfIfcLightDistributionData or list of converible elements
        template <typename TList> void put_DistributionData(TList& lst) { ListOfIfcLightDistributionDataSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "DistributionData"); }

        //TArrayElem[] may be IfcLightDistributionData[] or array of convertible elements
        template <typename TArrayElem> void put_DistributionData(TArrayElem arr[], size_t n) { ListOfIfcLightDistributionData lst; ArrayToList(arr, n, lst); put_DistributionData(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightSource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightSource : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightSource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightSource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightSource")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcColourRgb get_LightColour();
        void put_LightColour(IfcColourRgb inst);

        Nullable<IfcNormalisedRatioMeasure> get_AmbientIntensity() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "AmbientIntensity", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_AmbientIntensity(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "AmbientIntensity", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_Intensity() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Intensity", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_Intensity(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "Intensity", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightSourceAmbient
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightSourceAmbient : public virtual IfcLightSource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightSourceAmbient
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightSourceAmbient(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightSourceAmbient")
        {}

                /// <summary>
                /// Create new instace of IfcLightSourceAmbient and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightSourceAmbient Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightSourceAmbient"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightSourceDirectional
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightSourceDirectional : public virtual IfcLightSource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightSourceDirectional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightSourceDirectional(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightSourceDirectional")
        {}

                /// <summary>
                /// Create new instace of IfcLightSourceDirectional and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightSourceDirectional Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightSourceDirectional"); assert(inst); return inst; }

        IfcDirection get_Orientation();
        void put_Orientation(IfcDirection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightSourceGoniometric
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightSourceGoniometric : public virtual IfcLightSource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightSourceGoniometric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightSourceGoniometric(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightSourceGoniometric")
        {}

                /// <summary>
                /// Create new instace of IfcLightSourceGoniometric and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightSourceGoniometric Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightSourceGoniometric"); assert(inst); return inst; }

        IfcAxis2Placement3D get_Position();
        void put_Position(IfcAxis2Placement3D inst);

        IfcColourRgb get_ColourAppearance();
        void put_ColourAppearance(IfcColourRgb inst);

        Nullable<IfcThermodynamicTemperatureMeasure> get_ColourTemperature() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "ColourTemperature", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_ColourTemperature(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "ColourTemperature", sdaiREAL, &value); }

        Nullable<IfcLuminousFluxMeasure> get_LuminousFlux() { IfcLuminousFluxMeasure val = (IfcLuminousFluxMeasure) 0; if (sdaiGetAttrBN(m_instance, "LuminousFlux", sdaiREAL, &val)) return val; else return Nullable<IfcLuminousFluxMeasure>(); }
        void put_LuminousFlux(IfcLuminousFluxMeasure value) { sdaiPutAttrBN(m_instance, "LuminousFlux", sdaiREAL, &value); }

        Nullable<IfcLightEmissionSourceEnum> get_LightEmissionSource() { int v = getENUM("LightEmissionSource", IfcLightEmissionSourceEnum_); if (v >= 0) return (IfcLightEmissionSourceEnum) v; else return Nullable<IfcLightEmissionSourceEnum>(); }
        void put_LightEmissionSource(IfcLightEmissionSourceEnum value) { TextValue val = IfcLightEmissionSourceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "LightEmissionSource", sdaiENUM, val); }

        IfcLightDistributionDataSourceSelect_get get_LightDistributionDataSource() { return IfcLightDistributionDataSourceSelect_get(m_instance, "LightDistributionDataSource", NULL); }
        IfcLightDistributionDataSourceSelect_put put_LightDistributionDataSource() { return IfcLightDistributionDataSourceSelect_put(m_instance, "LightDistributionDataSource", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightSourcePositional
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightSourcePositional : public virtual IfcLightSource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightSourcePositional
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightSourcePositional(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightSourcePositional")
        {}

                /// <summary>
                /// Create new instace of IfcLightSourcePositional and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightSourcePositional Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightSourcePositional"); assert(inst); return inst; }

        IfcCartesianPoint get_Position();
        void put_Position(IfcCartesianPoint inst);

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }

        Nullable<IfcReal> get_ConstantAttenuation() { IfcReal val = (IfcReal) 0; if (sdaiGetAttrBN(m_instance, "ConstantAttenuation", sdaiREAL, &val)) return val; else return Nullable<IfcReal>(); }
        void put_ConstantAttenuation(IfcReal value) { sdaiPutAttrBN(m_instance, "ConstantAttenuation", sdaiREAL, &value); }

        Nullable<IfcReal> get_DistanceAttenuation() { IfcReal val = (IfcReal) 0; if (sdaiGetAttrBN(m_instance, "DistanceAttenuation", sdaiREAL, &val)) return val; else return Nullable<IfcReal>(); }
        void put_DistanceAttenuation(IfcReal value) { sdaiPutAttrBN(m_instance, "DistanceAttenuation", sdaiREAL, &value); }

        Nullable<IfcReal> get_QuadricAttenuation() { IfcReal val = (IfcReal) 0; if (sdaiGetAttrBN(m_instance, "QuadricAttenuation", sdaiREAL, &val)) return val; else return Nullable<IfcReal>(); }
        void put_QuadricAttenuation(IfcReal value) { sdaiPutAttrBN(m_instance, "QuadricAttenuation", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLightSourceSpot
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLightSourceSpot : public virtual IfcLightSourcePositional
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLightSourceSpot
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLightSourceSpot(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLightSourceSpot")
        {}

                /// <summary>
                /// Create new instace of IfcLightSourceSpot and returns object of this C++ class to interact with
                /// </summary>
        static IfcLightSourceSpot Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLightSourceSpot"); assert(inst); return inst; }

        IfcDirection get_Orientation();
        void put_Orientation(IfcDirection inst);

        Nullable<IfcReal> get_ConcentrationExponent() { IfcReal val = (IfcReal) 0; if (sdaiGetAttrBN(m_instance, "ConcentrationExponent", sdaiREAL, &val)) return val; else return Nullable<IfcReal>(); }
        void put_ConcentrationExponent(IfcReal value) { sdaiPutAttrBN(m_instance, "ConcentrationExponent", sdaiREAL, &value); }

        Nullable<IfcPositivePlaneAngleMeasure> get_SpreadAngle() { IfcPositivePlaneAngleMeasure val = (IfcPositivePlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "SpreadAngle", sdaiREAL, &val)) return val; else return Nullable<IfcPositivePlaneAngleMeasure>(); }
        void put_SpreadAngle(IfcPositivePlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "SpreadAngle", sdaiREAL, &value); }

        Nullable<IfcPositivePlaneAngleMeasure> get_BeamWidthAngle() { IfcPositivePlaneAngleMeasure val = (IfcPositivePlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "BeamWidthAngle", sdaiREAL, &val)) return val; else return Nullable<IfcPositivePlaneAngleMeasure>(); }
        void put_BeamWidthAngle(IfcPositivePlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "BeamWidthAngle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLine
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLine : public virtual IfcCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLine(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLine")
        {}

                /// <summary>
                /// Create new instace of IfcLine and returns object of this C++ class to interact with
                /// </summary>
        static IfcLine Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLine"); assert(inst); return inst; }

        IfcCartesianPoint get_Pnt();
        void put_Pnt(IfcCartesianPoint inst);

        IfcVector get_Dir();
        void put_Dir(IfcVector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLinearDimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLinearDimension : public virtual IfcDimensionCurveDirectedCallout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLinearDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLinearDimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLinearDimension")
        {}

                /// <summary>
                /// Create new instace of IfcLinearDimension and returns object of this C++ class to interact with
                /// </summary>
        static IfcLinearDimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLinearDimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLocalPlacement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLocalPlacement : public virtual IfcObjectPlacement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLocalPlacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLocalPlacement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLocalPlacement")
        {}

                /// <summary>
                /// Create new instace of IfcLocalPlacement and returns object of this C++ class to interact with
                /// </summary>
        static IfcLocalPlacement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLocalPlacement"); assert(inst); return inst; }

        IfcObjectPlacement get_PlacementRelTo();
        void put_PlacementRelTo(IfcObjectPlacement inst);

        IfcAxis2Placement_get get_RelativePlacement() { return IfcAxis2Placement_get(m_instance, "RelativePlacement", NULL); }
        IfcAxis2Placement_put put_RelativePlacement() { return IfcAxis2Placement_put(m_instance, "RelativePlacement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLocalTime
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLocalTime : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLocalTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLocalTime(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLocalTime")
        {}

                /// <summary>
                /// Create new instace of IfcLocalTime and returns object of this C++ class to interact with
                /// </summary>
        static IfcLocalTime Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLocalTime"); assert(inst); return inst; }

        Nullable<IfcHourInDay> get_HourComponent() { IfcHourInDay val = (IfcHourInDay) 0; if (sdaiGetAttrBN(m_instance, "HourComponent", sdaiINTEGER, &val)) return val; else return Nullable<IfcHourInDay>(); }
        void put_HourComponent(IfcHourInDay value) { sdaiPutAttrBN(m_instance, "HourComponent", sdaiINTEGER, &value); }

        Nullable<IfcMinuteInHour> get_MinuteComponent() { IfcMinuteInHour val = (IfcMinuteInHour) 0; if (sdaiGetAttrBN(m_instance, "MinuteComponent", sdaiINTEGER, &val)) return val; else return Nullable<IfcMinuteInHour>(); }
        void put_MinuteComponent(IfcMinuteInHour value) { sdaiPutAttrBN(m_instance, "MinuteComponent", sdaiINTEGER, &value); }

        Nullable<IfcSecondInMinute> get_SecondComponent() { IfcSecondInMinute val = (IfcSecondInMinute) 0; if (sdaiGetAttrBN(m_instance, "SecondComponent", sdaiREAL, &val)) return val; else return Nullable<IfcSecondInMinute>(); }
        void put_SecondComponent(IfcSecondInMinute value) { sdaiPutAttrBN(m_instance, "SecondComponent", sdaiREAL, &value); }

        IfcCoordinatedUniversalTimeOffset get_Zone();
        void put_Zone(IfcCoordinatedUniversalTimeOffset inst);

        Nullable<IfcDaylightSavingHour> get_DaylightSavingOffset() { IfcDaylightSavingHour val = (IfcDaylightSavingHour) 0; if (sdaiGetAttrBN(m_instance, "DaylightSavingOffset", sdaiINTEGER, &val)) return val; else return Nullable<IfcDaylightSavingHour>(); }
        void put_DaylightSavingOffset(IfcDaylightSavingHour value) { sdaiPutAttrBN(m_instance, "DaylightSavingOffset", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcLShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcLShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcLShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcLShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcLShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcLShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcLShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcLShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Depth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Depth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Width() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Width", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Width(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Width", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Thickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Thickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Thickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Thickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_EdgeRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EdgeRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_EdgeRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "EdgeRadius", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_LegSlope() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "LegSlope", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_LegSlope(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "LegSlope", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInX() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInX(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInY() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInY(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMappedItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMappedItem : public virtual IfcRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMappedItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMappedItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMappedItem")
        {}

                /// <summary>
                /// Create new instace of IfcMappedItem and returns object of this C++ class to interact with
                /// </summary>
        static IfcMappedItem Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMappedItem"); assert(inst); return inst; }

        IfcRepresentationMap get_MappingSource();
        void put_MappingSource(IfcRepresentationMap inst);

        IfcCartesianTransformationOperator get_MappingTarget();
        void put_MappingTarget(IfcCartesianTransformationOperator inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterial
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterial : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterial(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterial")
        {}

                /// <summary>
                /// Create new instace of IfcMaterial and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterial Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterial"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        //TList may be SetOfIfcMaterialDefinitionRepresentation or list of converible elements
        template <typename TList> void get_HasRepresentation(TList& lst) { SetOfIfcMaterialDefinitionRepresentationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasRepresentation"); }

        //TList may be SetOfIfcMaterialClassificationRelationship or list of converible elements
        template <typename TList> void get_ClassifiedAs(TList& lst) { SetOfIfcMaterialClassificationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ClassifiedAs"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialClassificationRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialClassificationRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialClassificationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialClassificationRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialClassificationRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcMaterialClassificationRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterialClassificationRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterialClassificationRelationship"); assert(inst); return inst; }

        //TList may be SetOfIfcClassificationNotationSelect or list of converible elements
        template <typename TList> void get_MaterialClassifications(TList& lst) { SetOfIfcClassificationNotationSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "MaterialClassifications"); }

        //TList may be SetOfIfcClassificationNotationSelect or list of converible elements
        template <typename TList> void put_MaterialClassifications(TList& lst) { SetOfIfcClassificationNotationSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "MaterialClassifications"); }

        IfcMaterial get_ClassifiedMaterial();
        void put_ClassifiedMaterial(IfcMaterial inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProductRepresentation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProductRepresentation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProductRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProductRepresentation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProductRepresentation")
        {}

                /// <summary>
                /// Create new instace of IfcProductRepresentation and returns object of this C++ class to interact with
                /// </summary>
        static IfcProductRepresentation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProductRepresentation"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        //TList may be ListOfIfcRepresentation or list of converible elements
        template <typename TList> void get_Representations(TList& lst) { ListOfIfcRepresentationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Representations"); }

        //TList may be ListOfIfcRepresentation or list of converible elements
        template <typename TList> void put_Representations(TList& lst) { ListOfIfcRepresentationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Representations"); }

        //TArrayElem[] may be IfcRepresentation[] or array of convertible elements
        template <typename TArrayElem> void put_Representations(TArrayElem arr[], size_t n) { ListOfIfcRepresentation lst; ArrayToList(arr, n, lst); put_Representations(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialDefinitionRepresentation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialDefinitionRepresentation : public virtual IfcProductRepresentation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialDefinitionRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialDefinitionRepresentation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialDefinitionRepresentation")
        {}

                /// <summary>
                /// Create new instace of IfcMaterialDefinitionRepresentation and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterialDefinitionRepresentation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterialDefinitionRepresentation"); assert(inst); return inst; }

        IfcMaterial get_RepresentedMaterial();
        void put_RepresentedMaterial(IfcMaterial inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialLayer
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialLayer : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialLayer
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialLayer(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialLayer")
        {}

                /// <summary>
                /// Create new instace of IfcMaterialLayer and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterialLayer Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterialLayer"); assert(inst); return inst; }

        IfcMaterial get_Material();
        void put_Material(IfcMaterial inst);

        Nullable<IfcPositiveLengthMeasure> get_LayerThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LayerThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LayerThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LayerThickness", sdaiREAL, &value); }

        Nullable<IfcLogical> get_IsVentilated() { int v = getENUM("IsVentilated", LOGICAL_VALUE_); if (v >= 0) return (IfcLogical) v; else return Nullable<IfcLogical>(); }
        void put_IsVentilated(IfcLogical value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "IsVentilated", sdaiENUM, val); }

        IfcMaterialLayerSet get_ToMaterialLayerSet();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialLayerSet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialLayerSet : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialLayerSet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialLayerSet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialLayerSet")
        {}

                /// <summary>
                /// Create new instace of IfcMaterialLayerSet and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterialLayerSet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterialLayerSet"); assert(inst); return inst; }

        //TList may be ListOfIfcMaterialLayer or list of converible elements
        template <typename TList> void get_MaterialLayers(TList& lst) { ListOfIfcMaterialLayerSerializer<TList> sr; sr.FromAttr(lst, m_instance, "MaterialLayers"); }

        //TList may be ListOfIfcMaterialLayer or list of converible elements
        template <typename TList> void put_MaterialLayers(TList& lst) { ListOfIfcMaterialLayerSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "MaterialLayers"); }

        //TArrayElem[] may be IfcMaterialLayer[] or array of convertible elements
        template <typename TArrayElem> void put_MaterialLayers(TArrayElem arr[], size_t n) { ListOfIfcMaterialLayer lst; ArrayToList(arr, n, lst); put_MaterialLayers(lst); }

        IfcLabel get_LayerSetName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "LayerSetName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_LayerSetName(IfcLabel value) { sdaiPutAttrBN(m_instance, "LayerSetName", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialLayerSetUsage
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialLayerSetUsage : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialLayerSetUsage
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialLayerSetUsage(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialLayerSetUsage")
        {}

                /// <summary>
                /// Create new instace of IfcMaterialLayerSetUsage and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterialLayerSetUsage Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterialLayerSetUsage"); assert(inst); return inst; }

        IfcMaterialLayerSet get_ForLayerSet();
        void put_ForLayerSet(IfcMaterialLayerSet inst);

        Nullable<IfcLayerSetDirectionEnum> get_LayerSetDirection() { int v = getENUM("LayerSetDirection", IfcLayerSetDirectionEnum_); if (v >= 0) return (IfcLayerSetDirectionEnum) v; else return Nullable<IfcLayerSetDirectionEnum>(); }
        void put_LayerSetDirection(IfcLayerSetDirectionEnum value) { TextValue val = IfcLayerSetDirectionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "LayerSetDirection", sdaiENUM, val); }

        Nullable<IfcDirectionSenseEnum> get_DirectionSense() { int v = getENUM("DirectionSense", IfcDirectionSenseEnum_); if (v >= 0) return (IfcDirectionSenseEnum) v; else return Nullable<IfcDirectionSenseEnum>(); }
        void put_DirectionSense(IfcDirectionSenseEnum value) { TextValue val = IfcDirectionSenseEnum_[(int) value]; sdaiPutAttrBN(m_instance, "DirectionSense", sdaiENUM, val); }

        Nullable<IfcLengthMeasure> get_OffsetFromReferenceLine() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OffsetFromReferenceLine", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_OffsetFromReferenceLine(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "OffsetFromReferenceLine", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMaterialList
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMaterialList : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMaterialList
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMaterialList(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMaterialList")
        {}

                /// <summary>
                /// Create new instace of IfcMaterialList and returns object of this C++ class to interact with
                /// </summary>
        static IfcMaterialList Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMaterialList"); assert(inst); return inst; }

        //TList may be ListOfIfcMaterial or list of converible elements
        template <typename TList> void get_Materials(TList& lst) { ListOfIfcMaterialSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Materials"); }

        //TList may be ListOfIfcMaterial or list of converible elements
        template <typename TList> void put_Materials(TList& lst) { ListOfIfcMaterialSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Materials"); }

        //TArrayElem[] may be IfcMaterial[] or array of convertible elements
        template <typename TArrayElem> void put_Materials(TArrayElem arr[], size_t n) { ListOfIfcMaterial lst; ArrayToList(arr, n, lst); put_Materials(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMeasureWithUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMeasureWithUnit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMeasureWithUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMeasureWithUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMeasureWithUnit")
        {}

                /// <summary>
                /// Create new instace of IfcMeasureWithUnit and returns object of this C++ class to interact with
                /// </summary>
        static IfcMeasureWithUnit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMeasureWithUnit"); assert(inst); return inst; }

        IfcValue_get get_ValueComponent() { return IfcValue_get(m_instance, "ValueComponent", NULL); }
        IfcValue_put put_ValueComponent() { return IfcValue_put(m_instance, "ValueComponent", NULL); }

        IfcUnit_get get_UnitComponent() { return IfcUnit_get(m_instance, "UnitComponent", NULL); }
        IfcUnit_put put_UnitComponent() { return IfcUnit_put(m_instance, "UnitComponent", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMechanicalMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMechanicalMaterialProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMechanicalMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMechanicalMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMechanicalMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcMechanicalMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcMechanicalMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMechanicalMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcDynamicViscosityMeasure> get_DynamicViscosity() { IfcDynamicViscosityMeasure val = (IfcDynamicViscosityMeasure) 0; if (sdaiGetAttrBN(m_instance, "DynamicViscosity", sdaiREAL, &val)) return val; else return Nullable<IfcDynamicViscosityMeasure>(); }
        void put_DynamicViscosity(IfcDynamicViscosityMeasure value) { sdaiPutAttrBN(m_instance, "DynamicViscosity", sdaiREAL, &value); }

        Nullable<IfcModulusOfElasticityMeasure> get_YoungModulus() { IfcModulusOfElasticityMeasure val = (IfcModulusOfElasticityMeasure) 0; if (sdaiGetAttrBN(m_instance, "YoungModulus", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfElasticityMeasure>(); }
        void put_YoungModulus(IfcModulusOfElasticityMeasure value) { sdaiPutAttrBN(m_instance, "YoungModulus", sdaiREAL, &value); }

        Nullable<IfcModulusOfElasticityMeasure> get_ShearModulus() { IfcModulusOfElasticityMeasure val = (IfcModulusOfElasticityMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearModulus", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfElasticityMeasure>(); }
        void put_ShearModulus(IfcModulusOfElasticityMeasure value) { sdaiPutAttrBN(m_instance, "ShearModulus", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_PoissonRatio() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "PoissonRatio", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_PoissonRatio(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "PoissonRatio", sdaiREAL, &value); }

        Nullable<IfcThermalExpansionCoefficientMeasure> get_ThermalExpansionCoefficient() { IfcThermalExpansionCoefficientMeasure val = (IfcThermalExpansionCoefficientMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThermalExpansionCoefficient", sdaiREAL, &val)) return val; else return Nullable<IfcThermalExpansionCoefficientMeasure>(); }
        void put_ThermalExpansionCoefficient(IfcThermalExpansionCoefficientMeasure value) { sdaiPutAttrBN(m_instance, "ThermalExpansionCoefficient", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMechanicalConcreteMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMechanicalConcreteMaterialProperties : public virtual IfcMechanicalMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMechanicalConcreteMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMechanicalConcreteMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMechanicalConcreteMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcMechanicalConcreteMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcMechanicalConcreteMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMechanicalConcreteMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcPressureMeasure> get_CompressiveStrength() { IfcPressureMeasure val = (IfcPressureMeasure) 0; if (sdaiGetAttrBN(m_instance, "CompressiveStrength", sdaiREAL, &val)) return val; else return Nullable<IfcPressureMeasure>(); }
        void put_CompressiveStrength(IfcPressureMeasure value) { sdaiPutAttrBN(m_instance, "CompressiveStrength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_MaxAggregateSize() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaxAggregateSize", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MaxAggregateSize(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MaxAggregateSize", sdaiREAL, &value); }

        IfcText get_AdmixturesDescription() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "AdmixturesDescription", sdaiSTRING, &val)) return val; else return NULL; }
        void put_AdmixturesDescription(IfcText value) { sdaiPutAttrBN(m_instance, "AdmixturesDescription", sdaiSTRING, value); }

        IfcText get_Workability() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Workability", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Workability(IfcText value) { sdaiPutAttrBN(m_instance, "Workability", sdaiSTRING, value); }

        Nullable<IfcNormalisedRatioMeasure> get_ProtectivePoreRatio() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ProtectivePoreRatio", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_ProtectivePoreRatio(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "ProtectivePoreRatio", sdaiREAL, &value); }

        IfcText get_WaterImpermeability() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "WaterImpermeability", sdaiSTRING, &val)) return val; else return NULL; }
        void put_WaterImpermeability(IfcText value) { sdaiPutAttrBN(m_instance, "WaterImpermeability", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMechanicalFastener
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMechanicalFastener : public virtual IfcFastener
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMechanicalFastener
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMechanicalFastener(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMechanicalFastener")
        {}

                /// <summary>
                /// Create new instace of IfcMechanicalFastener and returns object of this C++ class to interact with
                /// </summary>
        static IfcMechanicalFastener Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMechanicalFastener"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_NominalDiameter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "NominalDiameter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_NominalDiameter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "NominalDiameter", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_NominalLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "NominalLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_NominalLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "NominalLength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMechanicalFastenerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMechanicalFastenerType : public virtual IfcFastenerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMechanicalFastenerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMechanicalFastenerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMechanicalFastenerType")
        {}

                /// <summary>
                /// Create new instace of IfcMechanicalFastenerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcMechanicalFastenerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMechanicalFastenerType"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMechanicalSteelMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMechanicalSteelMaterialProperties : public virtual IfcMechanicalMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMechanicalSteelMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMechanicalSteelMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMechanicalSteelMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcMechanicalSteelMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcMechanicalSteelMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMechanicalSteelMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcPressureMeasure> get_YieldStress() { IfcPressureMeasure val = (IfcPressureMeasure) 0; if (sdaiGetAttrBN(m_instance, "YieldStress", sdaiREAL, &val)) return val; else return Nullable<IfcPressureMeasure>(); }
        void put_YieldStress(IfcPressureMeasure value) { sdaiPutAttrBN(m_instance, "YieldStress", sdaiREAL, &value); }

        Nullable<IfcPressureMeasure> get_UltimateStress() { IfcPressureMeasure val = (IfcPressureMeasure) 0; if (sdaiGetAttrBN(m_instance, "UltimateStress", sdaiREAL, &val)) return val; else return Nullable<IfcPressureMeasure>(); }
        void put_UltimateStress(IfcPressureMeasure value) { sdaiPutAttrBN(m_instance, "UltimateStress", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_UltimateStrain() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "UltimateStrain", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_UltimateStrain(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "UltimateStrain", sdaiREAL, &value); }

        Nullable<IfcModulusOfElasticityMeasure> get_HardeningModule() { IfcModulusOfElasticityMeasure val = (IfcModulusOfElasticityMeasure) 0; if (sdaiGetAttrBN(m_instance, "HardeningModule", sdaiREAL, &val)) return val; else return Nullable<IfcModulusOfElasticityMeasure>(); }
        void put_HardeningModule(IfcModulusOfElasticityMeasure value) { sdaiPutAttrBN(m_instance, "HardeningModule", sdaiREAL, &value); }

        Nullable<IfcPressureMeasure> get_ProportionalStress() { IfcPressureMeasure val = (IfcPressureMeasure) 0; if (sdaiGetAttrBN(m_instance, "ProportionalStress", sdaiREAL, &val)) return val; else return Nullable<IfcPressureMeasure>(); }
        void put_ProportionalStress(IfcPressureMeasure value) { sdaiPutAttrBN(m_instance, "ProportionalStress", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_PlasticStrain() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "PlasticStrain", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_PlasticStrain(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "PlasticStrain", sdaiREAL, &value); }

        //TList may be SetOfIfcRelaxation or list of converible elements
        template <typename TList> void get_Relaxations(TList& lst) { SetOfIfcRelaxationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Relaxations"); }

        //TList may be SetOfIfcRelaxation or list of converible elements
        template <typename TList> void put_Relaxations(TList& lst) { SetOfIfcRelaxationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Relaxations"); }

        //TArrayElem[] may be IfcRelaxation[] or array of convertible elements
        template <typename TArrayElem> void put_Relaxations(TArrayElem arr[], size_t n) { SetOfIfcRelaxation lst; ArrayToList(arr, n, lst); put_Relaxations(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMember
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMember : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMember(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMember")
        {}

                /// <summary>
                /// Create new instace of IfcMember and returns object of this C++ class to interact with
                /// </summary>
        static IfcMember Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMember"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMemberType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMemberType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMemberType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMemberType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMemberType")
        {}

                /// <summary>
                /// Create new instace of IfcMemberType and returns object of this C++ class to interact with
                /// </summary>
        static IfcMemberType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMemberType"); assert(inst); return inst; }

        Nullable<IfcMemberTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcMemberTypeEnum_); if (v >= 0) return (IfcMemberTypeEnum) v; else return Nullable<IfcMemberTypeEnum>(); }
        void put_PredefinedType(IfcMemberTypeEnum value) { TextValue val = IfcMemberTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMetric
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMetric : public virtual IfcConstraint
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMetric
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMetric(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMetric")
        {}

                /// <summary>
                /// Create new instace of IfcMetric and returns object of this C++ class to interact with
                /// </summary>
        static IfcMetric Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMetric"); assert(inst); return inst; }

        Nullable<IfcBenchmarkEnum> get_Benchmark() { int v = getENUM("Benchmark", IfcBenchmarkEnum_); if (v >= 0) return (IfcBenchmarkEnum) v; else return Nullable<IfcBenchmarkEnum>(); }
        void put_Benchmark(IfcBenchmarkEnum value) { TextValue val = IfcBenchmarkEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Benchmark", sdaiENUM, val); }

        IfcLabel get_ValueSource() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ValueSource", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ValueSource(IfcLabel value) { sdaiPutAttrBN(m_instance, "ValueSource", sdaiSTRING, value); }

        IfcMetricValueSelect_get get_DataValue() { return IfcMetricValueSelect_get(m_instance, "DataValue", NULL); }
        IfcMetricValueSelect_put put_DataValue() { return IfcMetricValueSelect_put(m_instance, "DataValue", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMonetaryUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMonetaryUnit : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMonetaryUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMonetaryUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMonetaryUnit")
        {}

                /// <summary>
                /// Create new instace of IfcMonetaryUnit and returns object of this C++ class to interact with
                /// </summary>
        static IfcMonetaryUnit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMonetaryUnit"); assert(inst); return inst; }

        Nullable<IfcCurrencyEnum> get_Currency() { int v = getENUM("Currency", IfcCurrencyEnum_); if (v >= 0) return (IfcCurrencyEnum) v; else return Nullable<IfcCurrencyEnum>(); }
        void put_Currency(IfcCurrencyEnum value) { TextValue val = IfcCurrencyEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Currency", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMotorConnectionType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMotorConnectionType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMotorConnectionType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMotorConnectionType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMotorConnectionType")
        {}

                /// <summary>
                /// Create new instace of IfcMotorConnectionType and returns object of this C++ class to interact with
                /// </summary>
        static IfcMotorConnectionType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMotorConnectionType"); assert(inst); return inst; }

        Nullable<IfcMotorConnectionTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcMotorConnectionTypeEnum_); if (v >= 0) return (IfcMotorConnectionTypeEnum) v; else return Nullable<IfcMotorConnectionTypeEnum>(); }
        void put_PredefinedType(IfcMotorConnectionTypeEnum value) { TextValue val = IfcMotorConnectionTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProcess
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProcess : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProcess(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProcess")
        {}


        //TList may be SetOfIfcRelAssignsToProcess or list of converible elements
        template <typename TList> void get_OperatesOn(TList& lst) { SetOfIfcRelAssignsToProcessSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OperatesOn"); }

        //TList may be SetOfIfcRelSequence or list of converible elements
        template <typename TList> void get_IsSuccessorFrom(TList& lst) { SetOfIfcRelSequenceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsSuccessorFrom"); }

        //TList may be SetOfIfcRelSequence or list of converible elements
        template <typename TList> void get_IsPredecessorTo(TList& lst) { SetOfIfcRelSequenceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsPredecessorTo"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTask
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTask : public virtual IfcProcess
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTask
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTask(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTask")
        {}

                /// <summary>
                /// Create new instace of IfcTask and returns object of this C++ class to interact with
                /// </summary>
        static IfcTask Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTask"); assert(inst); return inst; }

        IfcIdentifier get_TaskId() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "TaskId", sdaiSTRING, &val)) return val; else return NULL; }
        void put_TaskId(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "TaskId", sdaiSTRING, value); }

        IfcLabel get_Status() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Status(IfcLabel value) { sdaiPutAttrBN(m_instance, "Status", sdaiSTRING, value); }

        IfcLabel get_WorkMethod() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "WorkMethod", sdaiSTRING, &val)) return val; else return NULL; }
        void put_WorkMethod(IfcLabel value) { sdaiPutAttrBN(m_instance, "WorkMethod", sdaiSTRING, value); }

        Nullable<bool> get_IsMilestone() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "IsMilestone", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_IsMilestone(bool value) { sdaiPutAttrBN(m_instance, "IsMilestone", sdaiBOOLEAN, &value); }

        Nullable<IntValue> get_Priority() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "Priority", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_Priority(IntValue value) { sdaiPutAttrBN(m_instance, "Priority", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcMove
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcMove : public virtual IfcTask
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcMove
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcMove(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcMove")
        {}

                /// <summary>
                /// Create new instace of IfcMove and returns object of this C++ class to interact with
                /// </summary>
        static IfcMove Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcMove"); assert(inst); return inst; }

        IfcSpatialStructureElement get_MoveFrom();
        void put_MoveFrom(IfcSpatialStructureElement inst);

        IfcSpatialStructureElement get_MoveTo();
        void put_MoveTo(IfcSpatialStructureElement inst);

        //TList may be ListOfIfcText or list of converible elements
        template <typename TList> void get_PunchList(TList& lst) { ListOfIfcTextSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PunchList"); }

        //TList may be ListOfIfcText or list of converible elements
        template <typename TList> void put_PunchList(TList& lst) { ListOfIfcTextSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "PunchList"); }

        //TArrayElem[] may be IfcText[] or array of convertible elements
        template <typename TArrayElem> void put_PunchList(TArrayElem arr[], size_t n) { ListOfIfcText lst; ArrayToList(arr, n, lst); put_PunchList(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcObjective
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcObjective : public virtual IfcConstraint
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcObjective
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcObjective(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcObjective")
        {}

                /// <summary>
                /// Create new instace of IfcObjective and returns object of this C++ class to interact with
                /// </summary>
        static IfcObjective Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcObjective"); assert(inst); return inst; }

        IfcMetric get_BenchmarkValues();
        void put_BenchmarkValues(IfcMetric inst);

        IfcMetric get_ResultValues();
        void put_ResultValues(IfcMetric inst);

        Nullable<IfcObjectiveEnum> get_ObjectiveQualifier() { int v = getENUM("ObjectiveQualifier", IfcObjectiveEnum_); if (v >= 0) return (IfcObjectiveEnum) v; else return Nullable<IfcObjectiveEnum>(); }
        void put_ObjectiveQualifier(IfcObjectiveEnum value) { TextValue val = IfcObjectiveEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ObjectiveQualifier", sdaiENUM, val); }

        IfcLabel get_UserDefinedQualifier() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedQualifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedQualifier(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedQualifier", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOccupant
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOccupant : public virtual IfcActor
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOccupant
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOccupant(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOccupant")
        {}

                /// <summary>
                /// Create new instace of IfcOccupant and returns object of this C++ class to interact with
                /// </summary>
        static IfcOccupant Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOccupant"); assert(inst); return inst; }

        Nullable<IfcOccupantTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcOccupantTypeEnum_); if (v >= 0) return (IfcOccupantTypeEnum) v; else return Nullable<IfcOccupantTypeEnum>(); }
        void put_PredefinedType(IfcOccupantTypeEnum value) { TextValue val = IfcOccupantTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOffsetCurve2D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOffsetCurve2D : public virtual IfcCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOffsetCurve2D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOffsetCurve2D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOffsetCurve2D")
        {}

                /// <summary>
                /// Create new instace of IfcOffsetCurve2D and returns object of this C++ class to interact with
                /// </summary>
        static IfcOffsetCurve2D Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOffsetCurve2D"); assert(inst); return inst; }

        IfcCurve get_BasisCurve();
        void put_BasisCurve(IfcCurve inst);

        Nullable<IfcLengthMeasure> get_Distance() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Distance", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_Distance(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "Distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_SelfIntersect() { int v = getENUM("SelfIntersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_SelfIntersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "SelfIntersect", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOffsetCurve3D
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOffsetCurve3D : public virtual IfcCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOffsetCurve3D
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOffsetCurve3D(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOffsetCurve3D")
        {}

                /// <summary>
                /// Create new instace of IfcOffsetCurve3D and returns object of this C++ class to interact with
                /// </summary>
        static IfcOffsetCurve3D Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOffsetCurve3D"); assert(inst); return inst; }

        IfcCurve get_BasisCurve();
        void put_BasisCurve(IfcCurve inst);

        Nullable<IfcLengthMeasure> get_Distance() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Distance", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_Distance(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "Distance", sdaiREAL, &value); }

        Nullable<LOGICAL_VALUE> get_SelfIntersect() { int v = getENUM("SelfIntersect", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_SelfIntersect(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "SelfIntersect", sdaiENUM, val); }

        IfcDirection get_RefDirection();
        void put_RefDirection(IfcDirection inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOneDirectionRepeatFactor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOneDirectionRepeatFactor : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOneDirectionRepeatFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOneDirectionRepeatFactor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOneDirectionRepeatFactor")
        {}

                /// <summary>
                /// Create new instace of IfcOneDirectionRepeatFactor and returns object of this C++ class to interact with
                /// </summary>
        static IfcOneDirectionRepeatFactor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOneDirectionRepeatFactor"); assert(inst); return inst; }

        IfcVector get_RepeatFactor();
        void put_RepeatFactor(IfcVector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOpeningElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOpeningElement : public virtual IfcFeatureElementSubtraction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOpeningElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOpeningElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOpeningElement")
        {}

                /// <summary>
                /// Create new instace of IfcOpeningElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcOpeningElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOpeningElement"); assert(inst); return inst; }

        //TList may be SetOfIfcRelFillsElement or list of converible elements
        template <typename TList> void get_HasFillings(TList& lst) { SetOfIfcRelFillsElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasFillings"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOpenShell
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOpenShell : public virtual IfcConnectedFaceSet
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOpenShell
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOpenShell(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOpenShell")
        {}

                /// <summary>
                /// Create new instace of IfcOpenShell and returns object of this C++ class to interact with
                /// </summary>
        static IfcOpenShell Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOpenShell"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOpticalMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOpticalMaterialProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOpticalMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOpticalMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOpticalMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcOpticalMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcOpticalMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOpticalMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveRatioMeasure> get_VisibleTransmittance() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "VisibleTransmittance", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_VisibleTransmittance(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "VisibleTransmittance", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_SolarTransmittance() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "SolarTransmittance", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_SolarTransmittance(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "SolarTransmittance", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_ThermalIrTransmittance() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThermalIrTransmittance", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_ThermalIrTransmittance(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "ThermalIrTransmittance", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_ThermalIrEmissivityBack() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThermalIrEmissivityBack", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_ThermalIrEmissivityBack(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "ThermalIrEmissivityBack", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_ThermalIrEmissivityFront() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThermalIrEmissivityFront", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_ThermalIrEmissivityFront(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "ThermalIrEmissivityFront", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_VisibleReflectanceBack() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "VisibleReflectanceBack", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_VisibleReflectanceBack(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "VisibleReflectanceBack", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_VisibleReflectanceFront() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "VisibleReflectanceFront", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_VisibleReflectanceFront(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "VisibleReflectanceFront", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_SolarReflectanceFront() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "SolarReflectanceFront", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_SolarReflectanceFront(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "SolarReflectanceFront", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_SolarReflectanceBack() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "SolarReflectanceBack", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_SolarReflectanceBack(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "SolarReflectanceBack", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOrderAction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOrderAction : public virtual IfcTask
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOrderAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOrderAction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOrderAction")
        {}

                /// <summary>
                /// Create new instace of IfcOrderAction and returns object of this C++ class to interact with
                /// </summary>
        static IfcOrderAction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOrderAction"); assert(inst); return inst; }

        IfcIdentifier get_ActionID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ActionID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ActionID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ActionID", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOrganization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOrganization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOrganization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOrganization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOrganization")
        {}

                /// <summary>
                /// Create new instace of IfcOrganization and returns object of this C++ class to interact with
                /// </summary>
        static IfcOrganization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOrganization"); assert(inst); return inst; }

        IfcIdentifier get_Id() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Id(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Id", sdaiSTRING, value); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        //TList may be ListOfIfcActorRole or list of converible elements
        template <typename TList> void get_Roles(TList& lst) { ListOfIfcActorRoleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Roles"); }

        //TList may be ListOfIfcActorRole or list of converible elements
        template <typename TList> void put_Roles(TList& lst) { ListOfIfcActorRoleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Roles"); }

        //TArrayElem[] may be IfcActorRole[] or array of convertible elements
        template <typename TArrayElem> void put_Roles(TArrayElem arr[], size_t n) { ListOfIfcActorRole lst; ArrayToList(arr, n, lst); put_Roles(lst); }

        //TList may be ListOfIfcAddress or list of converible elements
        template <typename TList> void get_Addresses(TList& lst) { ListOfIfcAddressSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Addresses"); }

        //TList may be ListOfIfcAddress or list of converible elements
        template <typename TList> void put_Addresses(TList& lst) { ListOfIfcAddressSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Addresses"); }

        //TArrayElem[] may be IfcAddress[] or array of convertible elements
        template <typename TArrayElem> void put_Addresses(TArrayElem arr[], size_t n) { ListOfIfcAddress lst; ArrayToList(arr, n, lst); put_Addresses(lst); }

        //TList may be SetOfIfcOrganizationRelationship or list of converible elements
        template <typename TList> void get_IsRelatedBy(TList& lst) { SetOfIfcOrganizationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IsRelatedBy"); }

        //TList may be SetOfIfcOrganizationRelationship or list of converible elements
        template <typename TList> void get_Relates(TList& lst) { SetOfIfcOrganizationRelationshipSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Relates"); }

        //TList may be SetOfIfcPersonAndOrganization or list of converible elements
        template <typename TList> void get_Engages(TList& lst) { SetOfIfcPersonAndOrganizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Engages"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOrganizationRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOrganizationRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOrganizationRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOrganizationRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOrganizationRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcOrganizationRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcOrganizationRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOrganizationRelationship"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcOrganization get_RelatingOrganization();
        void put_RelatingOrganization(IfcOrganization inst);

        //TList may be SetOfIfcOrganization or list of converible elements
        template <typename TList> void get_RelatedOrganizations(TList& lst) { SetOfIfcOrganizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedOrganizations"); }

        //TList may be SetOfIfcOrganization or list of converible elements
        template <typename TList> void put_RelatedOrganizations(TList& lst) { SetOfIfcOrganizationSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedOrganizations"); }

        //TArrayElem[] may be IfcOrganization[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedOrganizations(TArrayElem arr[], size_t n) { SetOfIfcOrganization lst; ArrayToList(arr, n, lst); put_RelatedOrganizations(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOrientedEdge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOrientedEdge : public virtual IfcEdge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOrientedEdge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOrientedEdge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOrientedEdge")
        {}

                /// <summary>
                /// Create new instace of IfcOrientedEdge and returns object of this C++ class to interact with
                /// </summary>
        static IfcOrientedEdge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOrientedEdge"); assert(inst); return inst; }

        IfcEdge get_EdgeElement();
        void put_EdgeElement(IfcEdge inst);

        Nullable<bool> get_Orientation() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "Orientation", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_Orientation(bool value) { sdaiPutAttrBN(m_instance, "Orientation", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOutletType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOutletType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOutletType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOutletType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOutletType")
        {}

                /// <summary>
                /// Create new instace of IfcOutletType and returns object of this C++ class to interact with
                /// </summary>
        static IfcOutletType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOutletType"); assert(inst); return inst; }

        Nullable<IfcOutletTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcOutletTypeEnum_); if (v >= 0) return (IfcOutletTypeEnum) v; else return Nullable<IfcOutletTypeEnum>(); }
        void put_PredefinedType(IfcOutletTypeEnum value) { TextValue val = IfcOutletTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcOwnerHistory
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcOwnerHistory : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcOwnerHistory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcOwnerHistory(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcOwnerHistory")
        {}

                /// <summary>
                /// Create new instace of IfcOwnerHistory and returns object of this C++ class to interact with
                /// </summary>
        static IfcOwnerHistory Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcOwnerHistory"); assert(inst); return inst; }

        IfcPersonAndOrganization get_OwningUser();
        void put_OwningUser(IfcPersonAndOrganization inst);

        IfcApplication get_OwningApplication();
        void put_OwningApplication(IfcApplication inst);

        Nullable<IfcStateEnum> get_State() { int v = getENUM("State", IfcStateEnum_); if (v >= 0) return (IfcStateEnum) v; else return Nullable<IfcStateEnum>(); }
        void put_State(IfcStateEnum value) { TextValue val = IfcStateEnum_[(int) value]; sdaiPutAttrBN(m_instance, "State", sdaiENUM, val); }

        Nullable<IfcChangeActionEnum> get_ChangeAction() { int v = getENUM("ChangeAction", IfcChangeActionEnum_); if (v >= 0) return (IfcChangeActionEnum) v; else return Nullable<IfcChangeActionEnum>(); }
        void put_ChangeAction(IfcChangeActionEnum value) { TextValue val = IfcChangeActionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ChangeAction", sdaiENUM, val); }

        Nullable<IfcTimeStamp> get_LastModifiedDate() { IfcTimeStamp val = (IfcTimeStamp) 0; if (sdaiGetAttrBN(m_instance, "LastModifiedDate", sdaiINTEGER, &val)) return val; else return Nullable<IfcTimeStamp>(); }
        void put_LastModifiedDate(IfcTimeStamp value) { sdaiPutAttrBN(m_instance, "LastModifiedDate", sdaiINTEGER, &value); }

        IfcPersonAndOrganization get_LastModifyingUser();
        void put_LastModifyingUser(IfcPersonAndOrganization inst);

        IfcApplication get_LastModifyingApplication();
        void put_LastModifyingApplication(IfcApplication inst);

        Nullable<IfcTimeStamp> get_CreationDate() { IfcTimeStamp val = (IfcTimeStamp) 0; if (sdaiGetAttrBN(m_instance, "CreationDate", sdaiINTEGER, &val)) return val; else return Nullable<IfcTimeStamp>(); }
        void put_CreationDate(IfcTimeStamp value) { sdaiPutAttrBN(m_instance, "CreationDate", sdaiINTEGER, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPath
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPath : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPath
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPath(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPath")
        {}

                /// <summary>
                /// Create new instace of IfcPath and returns object of this C++ class to interact with
                /// </summary>
        static IfcPath Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPath"); assert(inst); return inst; }

        //TList may be ListOfIfcOrientedEdge or list of converible elements
        template <typename TList> void get_EdgeList(TList& lst) { ListOfIfcOrientedEdgeSerializer<TList> sr; sr.FromAttr(lst, m_instance, "EdgeList"); }

        //TList may be ListOfIfcOrientedEdge or list of converible elements
        template <typename TList> void put_EdgeList(TList& lst) { ListOfIfcOrientedEdgeSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "EdgeList"); }

        //TArrayElem[] may be IfcOrientedEdge[] or array of convertible elements
        template <typename TArrayElem> void put_EdgeList(TArrayElem arr[], size_t n) { ListOfIfcOrientedEdge lst; ArrayToList(arr, n, lst); put_EdgeList(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPerformanceHistory
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPerformanceHistory : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPerformanceHistory
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPerformanceHistory(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPerformanceHistory")
        {}

                /// <summary>
                /// Create new instace of IfcPerformanceHistory and returns object of this C++ class to interact with
                /// </summary>
        static IfcPerformanceHistory Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPerformanceHistory"); assert(inst); return inst; }

        IfcLabel get_LifeCyclePhase() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "LifeCyclePhase", sdaiSTRING, &val)) return val; else return NULL; }
        void put_LifeCyclePhase(IfcLabel value) { sdaiPutAttrBN(m_instance, "LifeCyclePhase", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPermeableCoveringProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPermeableCoveringProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPermeableCoveringProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPermeableCoveringProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPermeableCoveringProperties")
        {}

                /// <summary>
                /// Create new instace of IfcPermeableCoveringProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcPermeableCoveringProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPermeableCoveringProperties"); assert(inst); return inst; }

        Nullable<IfcPermeableCoveringOperationEnum> get_OperationType() { int v = getENUM("OperationType", IfcPermeableCoveringOperationEnum_); if (v >= 0) return (IfcPermeableCoveringOperationEnum) v; else return Nullable<IfcPermeableCoveringOperationEnum>(); }
        void put_OperationType(IfcPermeableCoveringOperationEnum value) { TextValue val = IfcPermeableCoveringOperationEnum_[(int) value]; sdaiPutAttrBN(m_instance, "OperationType", sdaiENUM, val); }

        Nullable<IfcWindowPanelPositionEnum> get_PanelPosition() { int v = getENUM("PanelPosition", IfcWindowPanelPositionEnum_); if (v >= 0) return (IfcWindowPanelPositionEnum) v; else return Nullable<IfcWindowPanelPositionEnum>(); }
        void put_PanelPosition(IfcWindowPanelPositionEnum value) { TextValue val = IfcWindowPanelPositionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PanelPosition", sdaiENUM, val); }

        Nullable<IfcPositiveLengthMeasure> get_FrameDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FrameDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FrameDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FrameDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FrameThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FrameThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FrameThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FrameThickness", sdaiREAL, &value); }

        IfcShapeAspect get_ShapeAspectStyle();
        void put_ShapeAspectStyle(IfcShapeAspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPermit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPermit : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPermit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPermit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPermit")
        {}

                /// <summary>
                /// Create new instace of IfcPermit and returns object of this C++ class to interact with
                /// </summary>
        static IfcPermit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPermit"); assert(inst); return inst; }

        IfcIdentifier get_PermitID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "PermitID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_PermitID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "PermitID", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPerson
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPerson : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPerson
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPerson(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPerson")
        {}

                /// <summary>
                /// Create new instace of IfcPerson and returns object of this C++ class to interact with
                /// </summary>
        static IfcPerson Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPerson"); assert(inst); return inst; }

        IfcIdentifier get_Id() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Id", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Id(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Id", sdaiSTRING, value); }

        IfcLabel get_FamilyName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "FamilyName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_FamilyName(IfcLabel value) { sdaiPutAttrBN(m_instance, "FamilyName", sdaiSTRING, value); }

        IfcLabel get_GivenName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "GivenName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_GivenName(IfcLabel value) { sdaiPutAttrBN(m_instance, "GivenName", sdaiSTRING, value); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_MiddleNames(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "MiddleNames"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_MiddleNames(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "MiddleNames"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_MiddleNames(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_MiddleNames(lst); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_PrefixTitles(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "PrefixTitles"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_PrefixTitles(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "PrefixTitles"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_PrefixTitles(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_PrefixTitles(lst); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_SuffixTitles(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SuffixTitles"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_SuffixTitles(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SuffixTitles"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_SuffixTitles(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_SuffixTitles(lst); }

        //TList may be ListOfIfcActorRole or list of converible elements
        template <typename TList> void get_Roles(TList& lst) { ListOfIfcActorRoleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Roles"); }

        //TList may be ListOfIfcActorRole or list of converible elements
        template <typename TList> void put_Roles(TList& lst) { ListOfIfcActorRoleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Roles"); }

        //TArrayElem[] may be IfcActorRole[] or array of convertible elements
        template <typename TArrayElem> void put_Roles(TArrayElem arr[], size_t n) { ListOfIfcActorRole lst; ArrayToList(arr, n, lst); put_Roles(lst); }

        //TList may be ListOfIfcAddress or list of converible elements
        template <typename TList> void get_Addresses(TList& lst) { ListOfIfcAddressSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Addresses"); }

        //TList may be ListOfIfcAddress or list of converible elements
        template <typename TList> void put_Addresses(TList& lst) { ListOfIfcAddressSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Addresses"); }

        //TArrayElem[] may be IfcAddress[] or array of convertible elements
        template <typename TArrayElem> void put_Addresses(TArrayElem arr[], size_t n) { ListOfIfcAddress lst; ArrayToList(arr, n, lst); put_Addresses(lst); }

        //TList may be SetOfIfcPersonAndOrganization or list of converible elements
        template <typename TList> void get_EngagedIn(TList& lst) { SetOfIfcPersonAndOrganizationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "EngagedIn"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPersonAndOrganization
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPersonAndOrganization : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPersonAndOrganization
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPersonAndOrganization(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPersonAndOrganization")
        {}

                /// <summary>
                /// Create new instace of IfcPersonAndOrganization and returns object of this C++ class to interact with
                /// </summary>
        static IfcPersonAndOrganization Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPersonAndOrganization"); assert(inst); return inst; }

        IfcPerson get_ThePerson();
        void put_ThePerson(IfcPerson inst);

        IfcOrganization get_TheOrganization();
        void put_TheOrganization(IfcOrganization inst);

        //TList may be ListOfIfcActorRole or list of converible elements
        template <typename TList> void get_Roles(TList& lst) { ListOfIfcActorRoleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Roles"); }

        //TList may be ListOfIfcActorRole or list of converible elements
        template <typename TList> void put_Roles(TList& lst) { ListOfIfcActorRoleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Roles"); }

        //TArrayElem[] may be IfcActorRole[] or array of convertible elements
        template <typename TArrayElem> void put_Roles(TArrayElem arr[], size_t n) { ListOfIfcActorRole lst; ArrayToList(arr, n, lst); put_Roles(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPhysicalQuantity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPhysicalQuantity : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPhysicalQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPhysicalQuantity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPhysicalQuantity")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        //TList may be SetOfIfcPhysicalComplexQuantity or list of converible elements
        template <typename TList> void get_PartOfComplex(TList& lst) { SetOfIfcPhysicalComplexQuantitySerializer<TList> sr; sr.FromAttr(lst, m_instance, "PartOfComplex"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPhysicalComplexQuantity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPhysicalComplexQuantity : public virtual IfcPhysicalQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPhysicalComplexQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPhysicalComplexQuantity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPhysicalComplexQuantity")
        {}

                /// <summary>
                /// Create new instace of IfcPhysicalComplexQuantity and returns object of this C++ class to interact with
                /// </summary>
        static IfcPhysicalComplexQuantity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPhysicalComplexQuantity"); assert(inst); return inst; }

        //TList may be SetOfIfcPhysicalQuantity or list of converible elements
        template <typename TList> void get_HasQuantities(TList& lst) { SetOfIfcPhysicalQuantitySerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasQuantities"); }

        //TList may be SetOfIfcPhysicalQuantity or list of converible elements
        template <typename TList> void put_HasQuantities(TList& lst) { SetOfIfcPhysicalQuantitySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "HasQuantities"); }

        //TArrayElem[] may be IfcPhysicalQuantity[] or array of convertible elements
        template <typename TArrayElem> void put_HasQuantities(TArrayElem arr[], size_t n) { SetOfIfcPhysicalQuantity lst; ArrayToList(arr, n, lst); put_HasQuantities(lst); }

        IfcLabel get_Discrimination() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Discrimination", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Discrimination(IfcLabel value) { sdaiPutAttrBN(m_instance, "Discrimination", sdaiSTRING, value); }

        IfcLabel get_Quality() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Quality", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Quality(IfcLabel value) { sdaiPutAttrBN(m_instance, "Quality", sdaiSTRING, value); }

        IfcLabel get_Usage() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Usage", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Usage(IfcLabel value) { sdaiPutAttrBN(m_instance, "Usage", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPhysicalSimpleQuantity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPhysicalSimpleQuantity : public virtual IfcPhysicalQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPhysicalSimpleQuantity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPhysicalSimpleQuantity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPhysicalSimpleQuantity")
        {}


        IfcNamedUnit get_Unit();
        void put_Unit(IfcNamedUnit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPile
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPile : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPile
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPile(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPile")
        {}

                /// <summary>
                /// Create new instace of IfcPile and returns object of this C++ class to interact with
                /// </summary>
        static IfcPile Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPile"); assert(inst); return inst; }

        Nullable<IfcPileTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcPileTypeEnum_); if (v >= 0) return (IfcPileTypeEnum) v; else return Nullable<IfcPileTypeEnum>(); }
        void put_PredefinedType(IfcPileTypeEnum value) { TextValue val = IfcPileTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        Nullable<IfcPileConstructionEnum> get_ConstructionType() { int v = getENUM("ConstructionType", IfcPileConstructionEnum_); if (v >= 0) return (IfcPileConstructionEnum) v; else return Nullable<IfcPileConstructionEnum>(); }
        void put_ConstructionType(IfcPileConstructionEnum value) { TextValue val = IfcPileConstructionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ConstructionType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPipeFittingType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPipeFittingType : public virtual IfcFlowFittingType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPipeFittingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPipeFittingType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPipeFittingType")
        {}

                /// <summary>
                /// Create new instace of IfcPipeFittingType and returns object of this C++ class to interact with
                /// </summary>
        static IfcPipeFittingType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPipeFittingType"); assert(inst); return inst; }

        Nullable<IfcPipeFittingTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcPipeFittingTypeEnum_); if (v >= 0) return (IfcPipeFittingTypeEnum) v; else return Nullable<IfcPipeFittingTypeEnum>(); }
        void put_PredefinedType(IfcPipeFittingTypeEnum value) { TextValue val = IfcPipeFittingTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPipeSegmentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPipeSegmentType : public virtual IfcFlowSegmentType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPipeSegmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPipeSegmentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPipeSegmentType")
        {}

                /// <summary>
                /// Create new instace of IfcPipeSegmentType and returns object of this C++ class to interact with
                /// </summary>
        static IfcPipeSegmentType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPipeSegmentType"); assert(inst); return inst; }

        Nullable<IfcPipeSegmentTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcPipeSegmentTypeEnum_); if (v >= 0) return (IfcPipeSegmentTypeEnum) v; else return Nullable<IfcPipeSegmentTypeEnum>(); }
        void put_PredefinedType(IfcPipeSegmentTypeEnum value) { TextValue val = IfcPipeSegmentTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPixelTexture
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPixelTexture : public virtual IfcSurfaceTexture
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPixelTexture
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPixelTexture(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPixelTexture")
        {}

                /// <summary>
                /// Create new instace of IfcPixelTexture and returns object of this C++ class to interact with
                /// </summary>
        static IfcPixelTexture Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPixelTexture"); assert(inst); return inst; }

        Nullable<IfcInteger> get_Width() { IfcInteger val = (IfcInteger) 0; if (sdaiGetAttrBN(m_instance, "Width", sdaiINTEGER, &val)) return val; else return Nullable<IfcInteger>(); }
        void put_Width(IfcInteger value) { sdaiPutAttrBN(m_instance, "Width", sdaiINTEGER, &value); }

        Nullable<IfcInteger> get_Height() { IfcInteger val = (IfcInteger) 0; if (sdaiGetAttrBN(m_instance, "Height", sdaiINTEGER, &val)) return val; else return Nullable<IfcInteger>(); }
        void put_Height(IfcInteger value) { sdaiPutAttrBN(m_instance, "Height", sdaiINTEGER, &value); }

        Nullable<IfcInteger> get_ColourComponents() { IfcInteger val = (IfcInteger) 0; if (sdaiGetAttrBN(m_instance, "ColourComponents", sdaiINTEGER, &val)) return val; else return Nullable<IfcInteger>(); }
        void put_ColourComponents(IfcInteger value) { sdaiPutAttrBN(m_instance, "ColourComponents", sdaiINTEGER, &value); }

        //TList may be ListOfTextValue or list of converible elements
        template <typename TList> void get_Pixel(TList& lst) { ListOfTextValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Pixel"); }

        //TList may be ListOfTextValue or list of converible elements
        template <typename TList> void put_Pixel(TList& lst) { ListOfTextValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Pixel"); }

        //TArrayElem[] may be TextValue[] or array of convertible elements
        template <typename TArrayElem> void put_Pixel(TArrayElem arr[], size_t n) { ListOfTextValue lst; ArrayToList(arr, n, lst); put_Pixel(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPlanarExtent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPlanarExtent : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPlanarExtent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPlanarExtent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPlanarExtent")
        {}

                /// <summary>
                /// Create new instace of IfcPlanarExtent and returns object of this C++ class to interact with
                /// </summary>
        static IfcPlanarExtent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPlanarExtent"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_SizeInX() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SizeInX", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_SizeInX(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "SizeInX", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_SizeInY() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SizeInY", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_SizeInY(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "SizeInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPlanarBox
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPlanarBox : public virtual IfcPlanarExtent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPlanarBox
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPlanarBox(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPlanarBox")
        {}

                /// <summary>
                /// Create new instace of IfcPlanarBox and returns object of this C++ class to interact with
                /// </summary>
        static IfcPlanarBox Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPlanarBox"); assert(inst); return inst; }

        IfcAxis2Placement_get get_Placement() { return IfcAxis2Placement_get(m_instance, "Placement", NULL); }
        IfcAxis2Placement_put put_Placement() { return IfcAxis2Placement_put(m_instance, "Placement", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPlane
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPlane : public virtual IfcElementarySurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPlane
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPlane(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPlane")
        {}

                /// <summary>
                /// Create new instace of IfcPlane and returns object of this C++ class to interact with
                /// </summary>
        static IfcPlane Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPlane"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPlate
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPlate : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPlate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPlate(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPlate")
        {}

                /// <summary>
                /// Create new instace of IfcPlate and returns object of this C++ class to interact with
                /// </summary>
        static IfcPlate Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPlate"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPlateType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPlateType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPlateType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPlateType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPlateType")
        {}

                /// <summary>
                /// Create new instace of IfcPlateType and returns object of this C++ class to interact with
                /// </summary>
        static IfcPlateType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPlateType"); assert(inst); return inst; }

        Nullable<IfcPlateTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcPlateTypeEnum_); if (v >= 0) return (IfcPlateTypeEnum) v; else return Nullable<IfcPlateTypeEnum>(); }
        void put_PredefinedType(IfcPlateTypeEnum value) { TextValue val = IfcPlateTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPointOnCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPointOnCurve : public virtual IfcPoint
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPointOnCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPointOnCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPointOnCurve")
        {}

                /// <summary>
                /// Create new instace of IfcPointOnCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcPointOnCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPointOnCurve"); assert(inst); return inst; }

        IfcCurve get_BasisCurve();
        void put_BasisCurve(IfcCurve inst);

        Nullable<IfcParameterValue> get_PointParameter() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "PointParameter", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_PointParameter(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "PointParameter", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPointOnSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPointOnSurface : public virtual IfcPoint
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPointOnSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPointOnSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPointOnSurface")
        {}

                /// <summary>
                /// Create new instace of IfcPointOnSurface and returns object of this C++ class to interact with
                /// </summary>
        static IfcPointOnSurface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPointOnSurface"); assert(inst); return inst; }

        IfcSurface get_BasisSurface();
        void put_BasisSurface(IfcSurface inst);

        Nullable<IfcParameterValue> get_PointParameterU() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "PointParameterU", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_PointParameterU(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "PointParameterU", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_PointParameterV() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "PointParameterV", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_PointParameterV(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "PointParameterV", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPolygonalBoundedHalfSpace
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPolygonalBoundedHalfSpace : public virtual IfcHalfSpaceSolid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPolygonalBoundedHalfSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPolygonalBoundedHalfSpace(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPolygonalBoundedHalfSpace")
        {}

                /// <summary>
                /// Create new instace of IfcPolygonalBoundedHalfSpace and returns object of this C++ class to interact with
                /// </summary>
        static IfcPolygonalBoundedHalfSpace Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPolygonalBoundedHalfSpace"); assert(inst); return inst; }

        IfcAxis2Placement3D get_Position();
        void put_Position(IfcAxis2Placement3D inst);

        IfcBoundedCurve get_PolygonalBoundary();
        void put_PolygonalBoundary(IfcBoundedCurve inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPolyline
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPolyline : public virtual IfcBoundedCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPolyline
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPolyline(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPolyline")
        {}

                /// <summary>
                /// Create new instace of IfcPolyline and returns object of this C++ class to interact with
                /// </summary>
        static IfcPolyline Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPolyline"); assert(inst); return inst; }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void get_Points(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Points"); }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void put_Points(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Points"); }

        //TArrayElem[] may be IfcCartesianPoint[] or array of convertible elements
        template <typename TArrayElem> void put_Points(TArrayElem arr[], size_t n) { ListOfIfcCartesianPoint lst; ArrayToList(arr, n, lst); put_Points(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPolyLoop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPolyLoop : public virtual IfcLoop
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPolyLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPolyLoop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPolyLoop")
        {}

                /// <summary>
                /// Create new instace of IfcPolyLoop and returns object of this C++ class to interact with
                /// </summary>
        static IfcPolyLoop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPolyLoop"); assert(inst); return inst; }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void get_Polygon(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Polygon"); }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void put_Polygon(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Polygon"); }

        //TArrayElem[] may be IfcCartesianPoint[] or array of convertible elements
        template <typename TArrayElem> void put_Polygon(TArrayElem arr[], size_t n) { ListOfIfcCartesianPoint lst; ArrayToList(arr, n, lst); put_Polygon(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPostalAddress
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPostalAddress : public virtual IfcAddress
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPostalAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPostalAddress(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPostalAddress")
        {}

                /// <summary>
                /// Create new instace of IfcPostalAddress and returns object of this C++ class to interact with
                /// </summary>
        static IfcPostalAddress Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPostalAddress"); assert(inst); return inst; }

        IfcLabel get_InternalLocation() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "InternalLocation", sdaiSTRING, &val)) return val; else return NULL; }
        void put_InternalLocation(IfcLabel value) { sdaiPutAttrBN(m_instance, "InternalLocation", sdaiSTRING, value); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_AddressLines(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "AddressLines"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_AddressLines(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "AddressLines"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_AddressLines(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_AddressLines(lst); }

        IfcLabel get_PostalBox() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "PostalBox", sdaiSTRING, &val)) return val; else return NULL; }
        void put_PostalBox(IfcLabel value) { sdaiPutAttrBN(m_instance, "PostalBox", sdaiSTRING, value); }

        IfcLabel get_Town() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Town", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Town(IfcLabel value) { sdaiPutAttrBN(m_instance, "Town", sdaiSTRING, value); }

        IfcLabel get_Region() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Region", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Region(IfcLabel value) { sdaiPutAttrBN(m_instance, "Region", sdaiSTRING, value); }

        IfcLabel get_PostalCode() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "PostalCode", sdaiSTRING, &val)) return val; else return NULL; }
        void put_PostalCode(IfcLabel value) { sdaiPutAttrBN(m_instance, "PostalCode", sdaiSTRING, value); }

        IfcLabel get_Country() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Country", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Country(IfcLabel value) { sdaiPutAttrBN(m_instance, "Country", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedSymbol : public virtual IfcPreDefinedItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedSymbol")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedDimensionSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedDimensionSymbol : public virtual IfcPreDefinedSymbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedDimensionSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedDimensionSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedDimensionSymbol")
        {}

                /// <summary>
                /// Create new instace of IfcPreDefinedDimensionSymbol and returns object of this C++ class to interact with
                /// </summary>
        static IfcPreDefinedDimensionSymbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPreDefinedDimensionSymbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedPointMarkerSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedPointMarkerSymbol : public virtual IfcPreDefinedSymbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedPointMarkerSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedPointMarkerSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedPointMarkerSymbol")
        {}

                /// <summary>
                /// Create new instace of IfcPreDefinedPointMarkerSymbol and returns object of this C++ class to interact with
                /// </summary>
        static IfcPreDefinedPointMarkerSymbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPreDefinedPointMarkerSymbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPreDefinedTerminatorSymbol
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPreDefinedTerminatorSymbol : public virtual IfcPreDefinedSymbol
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPreDefinedTerminatorSymbol
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPreDefinedTerminatorSymbol(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPreDefinedTerminatorSymbol")
        {}

                /// <summary>
                /// Create new instace of IfcPreDefinedTerminatorSymbol and returns object of this C++ class to interact with
                /// </summary>
        static IfcPreDefinedTerminatorSymbol Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPreDefinedTerminatorSymbol"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPresentationLayerAssignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPresentationLayerAssignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPresentationLayerAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPresentationLayerAssignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPresentationLayerAssignment")
        {}

                /// <summary>
                /// Create new instace of IfcPresentationLayerAssignment and returns object of this C++ class to interact with
                /// </summary>
        static IfcPresentationLayerAssignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPresentationLayerAssignment"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        //TList may be SetOfIfcLayeredItem or list of converible elements
        template <typename TList> void get_AssignedItems(TList& lst) { SetOfIfcLayeredItemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "AssignedItems"); }

        //TList may be SetOfIfcLayeredItem or list of converible elements
        template <typename TList> void put_AssignedItems(TList& lst) { SetOfIfcLayeredItemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "AssignedItems"); }

        IfcIdentifier get_Identifier() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Identifier(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Identifier", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPresentationLayerWithStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPresentationLayerWithStyle : public virtual IfcPresentationLayerAssignment
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPresentationLayerWithStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPresentationLayerWithStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPresentationLayerWithStyle")
        {}

                /// <summary>
                /// Create new instace of IfcPresentationLayerWithStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcPresentationLayerWithStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPresentationLayerWithStyle"); assert(inst); return inst; }

        Nullable<LOGICAL_VALUE> get_LayerOn() { int v = getENUM("LayerOn", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_LayerOn(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "LayerOn", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_LayerFrozen() { int v = getENUM("LayerFrozen", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_LayerFrozen(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "LayerFrozen", sdaiENUM, val); }

        Nullable<LOGICAL_VALUE> get_LayerBlocked() { int v = getENUM("LayerBlocked", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_LayerBlocked(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "LayerBlocked", sdaiENUM, val); }

        //TList may be SetOfIfcPresentationStyleSelect or list of converible elements
        template <typename TList> void get_LayerStyles(TList& lst) { SetOfIfcPresentationStyleSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LayerStyles"); }

        //TList may be SetOfIfcPresentationStyleSelect or list of converible elements
        template <typename TList> void put_LayerStyles(TList& lst) { SetOfIfcPresentationStyleSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "LayerStyles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPresentationStyleAssignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPresentationStyleAssignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPresentationStyleAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPresentationStyleAssignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPresentationStyleAssignment")
        {}

                /// <summary>
                /// Create new instace of IfcPresentationStyleAssignment and returns object of this C++ class to interact with
                /// </summary>
        static IfcPresentationStyleAssignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPresentationStyleAssignment"); assert(inst); return inst; }

        //TList may be SetOfIfcPresentationStyleSelect or list of converible elements
        template <typename TList> void get_Styles(TList& lst) { SetOfIfcPresentationStyleSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Styles"); }

        //TList may be SetOfIfcPresentationStyleSelect or list of converible elements
        template <typename TList> void put_Styles(TList& lst) { SetOfIfcPresentationStyleSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProcedure
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProcedure : public virtual IfcProcess
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProcedure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProcedure(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProcedure")
        {}

                /// <summary>
                /// Create new instace of IfcProcedure and returns object of this C++ class to interact with
                /// </summary>
        static IfcProcedure Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProcedure"); assert(inst); return inst; }

        IfcIdentifier get_ProcedureID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ProcedureID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ProcedureID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ProcedureID", sdaiSTRING, value); }

        Nullable<IfcProcedureTypeEnum> get_ProcedureType() { int v = getENUM("ProcedureType", IfcProcedureTypeEnum_); if (v >= 0) return (IfcProcedureTypeEnum) v; else return Nullable<IfcProcedureTypeEnum>(); }
        void put_ProcedureType(IfcProcedureTypeEnum value) { TextValue val = IfcProcedureTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ProcedureType", sdaiENUM, val); }

        IfcLabel get_UserDefinedProcedureType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedProcedureType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedProcedureType(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedProcedureType", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProductDefinitionShape
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProductDefinitionShape : public virtual IfcProductRepresentation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProductDefinitionShape
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProductDefinitionShape(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProductDefinitionShape")
        {}

                /// <summary>
                /// Create new instace of IfcProductDefinitionShape and returns object of this C++ class to interact with
                /// </summary>
        static IfcProductDefinitionShape Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProductDefinitionShape"); assert(inst); return inst; }

        //TList may be SetOfIfcProduct or list of converible elements
        template <typename TList> void get_ShapeOfProduct(TList& lst) { SetOfIfcProductSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ShapeOfProduct"); }

        //TList may be SetOfIfcShapeAspect or list of converible elements
        template <typename TList> void get_HasShapeAspects(TList& lst) { SetOfIfcShapeAspectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasShapeAspects"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProductsOfCombustionProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProductsOfCombustionProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProductsOfCombustionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProductsOfCombustionProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProductsOfCombustionProperties")
        {}

                /// <summary>
                /// Create new instace of IfcProductsOfCombustionProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcProductsOfCombustionProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProductsOfCombustionProperties"); assert(inst); return inst; }

        Nullable<IfcSpecificHeatCapacityMeasure> get_SpecificHeatCapacity() { IfcSpecificHeatCapacityMeasure val = (IfcSpecificHeatCapacityMeasure) 0; if (sdaiGetAttrBN(m_instance, "SpecificHeatCapacity", sdaiREAL, &val)) return val; else return Nullable<IfcSpecificHeatCapacityMeasure>(); }
        void put_SpecificHeatCapacity(IfcSpecificHeatCapacityMeasure value) { sdaiPutAttrBN(m_instance, "SpecificHeatCapacity", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_N20Content() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "N20Content", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_N20Content(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "N20Content", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_COContent() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "COContent", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_COContent(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "COContent", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_CO2Content() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "CO2Content", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_CO2Content(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "CO2Content", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProject
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProject : public virtual IfcObject
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProject
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProject(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProject")
        {}

                /// <summary>
                /// Create new instace of IfcProject and returns object of this C++ class to interact with
                /// </summary>
        static IfcProject Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProject"); assert(inst); return inst; }

        IfcLabel get_LongName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "LongName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_LongName(IfcLabel value) { sdaiPutAttrBN(m_instance, "LongName", sdaiSTRING, value); }

        IfcLabel get_Phase() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Phase", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Phase(IfcLabel value) { sdaiPutAttrBN(m_instance, "Phase", sdaiSTRING, value); }

        //TList may be SetOfIfcRepresentationContext or list of converible elements
        template <typename TList> void get_RepresentationContexts(TList& lst) { SetOfIfcRepresentationContextSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RepresentationContexts"); }

        //TList may be SetOfIfcRepresentationContext or list of converible elements
        template <typename TList> void put_RepresentationContexts(TList& lst) { SetOfIfcRepresentationContextSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RepresentationContexts"); }

        //TArrayElem[] may be IfcRepresentationContext[] or array of convertible elements
        template <typename TArrayElem> void put_RepresentationContexts(TArrayElem arr[], size_t n) { SetOfIfcRepresentationContext lst; ArrayToList(arr, n, lst); put_RepresentationContexts(lst); }

        IfcUnitAssignment get_UnitsInContext();
        void put_UnitsInContext(IfcUnitAssignment inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProjectionCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProjectionCurve : public virtual IfcAnnotationCurveOccurrence
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProjectionCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProjectionCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProjectionCurve")
        {}

                /// <summary>
                /// Create new instace of IfcProjectionCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcProjectionCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProjectionCurve"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProjectionElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProjectionElement : public virtual IfcFeatureElementAddition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProjectionElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProjectionElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProjectionElement")
        {}

                /// <summary>
                /// Create new instace of IfcProjectionElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcProjectionElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProjectionElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProjectOrder
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProjectOrder : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProjectOrder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProjectOrder(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProjectOrder")
        {}

                /// <summary>
                /// Create new instace of IfcProjectOrder and returns object of this C++ class to interact with
                /// </summary>
        static IfcProjectOrder Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProjectOrder"); assert(inst); return inst; }

        IfcIdentifier get_ID() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "ID", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ID(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "ID", sdaiSTRING, value); }

        Nullable<IfcProjectOrderTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcProjectOrderTypeEnum_); if (v >= 0) return (IfcProjectOrderTypeEnum) v; else return Nullable<IfcProjectOrderTypeEnum>(); }
        void put_PredefinedType(IfcProjectOrderTypeEnum value) { TextValue val = IfcProjectOrderTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        IfcLabel get_Status() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Status", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Status(IfcLabel value) { sdaiPutAttrBN(m_instance, "Status", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProjectOrderRecord
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProjectOrderRecord : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProjectOrderRecord
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProjectOrderRecord(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProjectOrderRecord")
        {}

                /// <summary>
                /// Create new instace of IfcProjectOrderRecord and returns object of this C++ class to interact with
                /// </summary>
        static IfcProjectOrderRecord Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProjectOrderRecord"); assert(inst); return inst; }

        //TList may be ListOfIfcRelAssignsToProjectOrder or list of converible elements
        template <typename TList> void get_Records(TList& lst) { ListOfIfcRelAssignsToProjectOrderSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Records"); }

        //TList may be ListOfIfcRelAssignsToProjectOrder or list of converible elements
        template <typename TList> void put_Records(TList& lst) { ListOfIfcRelAssignsToProjectOrderSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Records"); }

        //TArrayElem[] may be IfcRelAssignsToProjectOrder[] or array of convertible elements
        template <typename TArrayElem> void put_Records(TArrayElem arr[], size_t n) { ListOfIfcRelAssignsToProjectOrder lst; ArrayToList(arr, n, lst); put_Records(lst); }

        Nullable<IfcProjectOrderRecordTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcProjectOrderRecordTypeEnum_); if (v >= 0) return (IfcProjectOrderRecordTypeEnum) v; else return Nullable<IfcProjectOrderRecordTypeEnum>(); }
        void put_PredefinedType(IfcProjectOrderRecordTypeEnum value) { TextValue val = IfcProjectOrderRecordTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSimpleProperty
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSimpleProperty : public virtual IfcProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSimpleProperty
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSimpleProperty(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSimpleProperty")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyBoundedValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyBoundedValue : public virtual IfcSimpleProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyBoundedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyBoundedValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyBoundedValue")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyBoundedValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyBoundedValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyBoundedValue"); assert(inst); return inst; }

        IfcValue_get get_UpperBoundValue() { return IfcValue_get(m_instance, "UpperBoundValue", NULL); }
        IfcValue_put put_UpperBoundValue() { return IfcValue_put(m_instance, "UpperBoundValue", NULL); }

        IfcValue_get get_LowerBoundValue() { return IfcValue_get(m_instance, "LowerBoundValue", NULL); }
        IfcValue_put put_LowerBoundValue() { return IfcValue_put(m_instance, "LowerBoundValue", NULL); }

        IfcUnit_get get_Unit() { return IfcUnit_get(m_instance, "Unit", NULL); }
        IfcUnit_put put_Unit() { return IfcUnit_put(m_instance, "Unit", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyConstraintRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyConstraintRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyConstraintRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyConstraintRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyConstraintRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyConstraintRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyConstraintRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyConstraintRelationship"); assert(inst); return inst; }

        IfcConstraint get_RelatingConstraint();
        void put_RelatingConstraint(IfcConstraint inst);

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void get_RelatedProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedProperties"); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void put_RelatedProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedProperties"); }

        //TArrayElem[] may be IfcProperty[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedProperties(TArrayElem arr[], size_t n) { SetOfIfcProperty lst; ArrayToList(arr, n, lst); put_RelatedProperties(lst); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyDependencyRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyDependencyRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyDependencyRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyDependencyRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyDependencyRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyDependencyRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyDependencyRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyDependencyRelationship"); assert(inst); return inst; }

        IfcProperty get_DependingProperty();
        void put_DependingProperty(IfcProperty inst);

        IfcProperty get_DependantProperty();
        void put_DependantProperty(IfcProperty inst);

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        IfcText get_Expression() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Expression", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Expression(IfcText value) { sdaiPutAttrBN(m_instance, "Expression", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyEnumeratedValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyEnumeratedValue : public virtual IfcSimpleProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyEnumeratedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyEnumeratedValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyEnumeratedValue")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyEnumeratedValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyEnumeratedValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyEnumeratedValue"); assert(inst); return inst; }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_EnumerationValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "EnumerationValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_EnumerationValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "EnumerationValues"); }

        IfcPropertyEnumeration get_EnumerationReference();
        void put_EnumerationReference(IfcPropertyEnumeration inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyEnumeration
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyEnumeration : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyEnumeration
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyEnumeration(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyEnumeration")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyEnumeration and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyEnumeration Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyEnumeration"); assert(inst); return inst; }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_EnumerationValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "EnumerationValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_EnumerationValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "EnumerationValues"); }

        IfcUnit_get get_Unit() { return IfcUnit_get(m_instance, "Unit", NULL); }
        IfcUnit_put put_Unit() { return IfcUnit_put(m_instance, "Unit", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyListValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyListValue : public virtual IfcSimpleProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyListValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyListValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyListValue")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyListValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyListValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyListValue"); assert(inst); return inst; }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_ListValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ListValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_ListValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ListValues"); }

        IfcUnit_get get_Unit() { return IfcUnit_get(m_instance, "Unit", NULL); }
        IfcUnit_put put_Unit() { return IfcUnit_put(m_instance, "Unit", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyReferenceValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyReferenceValue : public virtual IfcSimpleProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyReferenceValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyReferenceValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyReferenceValue")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyReferenceValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyReferenceValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyReferenceValue"); assert(inst); return inst; }

        IfcLabel get_UsageName() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UsageName", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UsageName(IfcLabel value) { sdaiPutAttrBN(m_instance, "UsageName", sdaiSTRING, value); }

        IfcObjectReferenceSelect_get get_PropertyReference() { return IfcObjectReferenceSelect_get(m_instance, "PropertyReference", NULL); }
        IfcObjectReferenceSelect_put put_PropertyReference() { return IfcObjectReferenceSelect_put(m_instance, "PropertyReference", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertySet
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertySet : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertySet
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertySet(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertySet")
        {}

                /// <summary>
                /// Create new instace of IfcPropertySet and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertySet Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertySet"); assert(inst); return inst; }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void get_HasProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasProperties"); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void put_HasProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "HasProperties"); }

        //TArrayElem[] may be IfcProperty[] or array of convertible elements
        template <typename TArrayElem> void put_HasProperties(TArrayElem arr[], size_t n) { SetOfIfcProperty lst; ArrayToList(arr, n, lst); put_HasProperties(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertySingleValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertySingleValue : public virtual IfcSimpleProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertySingleValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertySingleValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertySingleValue")
        {}

                /// <summary>
                /// Create new instace of IfcPropertySingleValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertySingleValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertySingleValue"); assert(inst); return inst; }

        IfcValue_get get_NominalValue() { return IfcValue_get(m_instance, "NominalValue", NULL); }
        IfcValue_put put_NominalValue() { return IfcValue_put(m_instance, "NominalValue", NULL); }

        IfcUnit_get get_Unit() { return IfcUnit_get(m_instance, "Unit", NULL); }
        IfcUnit_put put_Unit() { return IfcUnit_put(m_instance, "Unit", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPropertyTableValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPropertyTableValue : public virtual IfcSimpleProperty
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPropertyTableValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPropertyTableValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPropertyTableValue")
        {}

                /// <summary>
                /// Create new instace of IfcPropertyTableValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcPropertyTableValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPropertyTableValue"); assert(inst); return inst; }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_DefiningValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DefiningValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_DefiningValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "DefiningValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_DefinedValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "DefinedValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_DefinedValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "DefinedValues"); }

        IfcText get_Expression() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Expression", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Expression(IfcText value) { sdaiPutAttrBN(m_instance, "Expression", sdaiSTRING, value); }

        IfcUnit_get get_DefiningUnit() { return IfcUnit_get(m_instance, "DefiningUnit", NULL); }
        IfcUnit_put put_DefiningUnit() { return IfcUnit_put(m_instance, "DefiningUnit", NULL); }

        IfcUnit_get get_DefinedUnit() { return IfcUnit_get(m_instance, "DefinedUnit", NULL); }
        IfcUnit_put put_DefinedUnit() { return IfcUnit_put(m_instance, "DefinedUnit", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProtectiveDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProtectiveDeviceType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProtectiveDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProtectiveDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProtectiveDeviceType")
        {}

                /// <summary>
                /// Create new instace of IfcProtectiveDeviceType and returns object of this C++ class to interact with
                /// </summary>
        static IfcProtectiveDeviceType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProtectiveDeviceType"); assert(inst); return inst; }

        Nullable<IfcProtectiveDeviceTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcProtectiveDeviceTypeEnum_); if (v >= 0) return (IfcProtectiveDeviceTypeEnum) v; else return Nullable<IfcProtectiveDeviceTypeEnum>(); }
        void put_PredefinedType(IfcProtectiveDeviceTypeEnum value) { TextValue val = IfcProtectiveDeviceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcProxy
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcProxy : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcProxy
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcProxy(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcProxy")
        {}

                /// <summary>
                /// Create new instace of IfcProxy and returns object of this C++ class to interact with
                /// </summary>
        static IfcProxy Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcProxy"); assert(inst); return inst; }

        Nullable<IfcObjectTypeEnum> get_ProxyType() { int v = getENUM("ProxyType", IfcObjectTypeEnum_); if (v >= 0) return (IfcObjectTypeEnum) v; else return Nullable<IfcObjectTypeEnum>(); }
        void put_ProxyType(IfcObjectTypeEnum value) { TextValue val = IfcObjectTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ProxyType", sdaiENUM, val); }

        IfcLabel get_Tag() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Tag", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Tag(IfcLabel value) { sdaiPutAttrBN(m_instance, "Tag", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcPumpType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcPumpType : public virtual IfcFlowMovingDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcPumpType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcPumpType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcPumpType")
        {}

                /// <summary>
                /// Create new instace of IfcPumpType and returns object of this C++ class to interact with
                /// </summary>
        static IfcPumpType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcPumpType"); assert(inst); return inst; }

        Nullable<IfcPumpTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcPumpTypeEnum_); if (v >= 0) return (IfcPumpTypeEnum) v; else return Nullable<IfcPumpTypeEnum>(); }
        void put_PredefinedType(IfcPumpTypeEnum value) { TextValue val = IfcPumpTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcQuantityArea
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcQuantityArea : public virtual IfcPhysicalSimpleQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcQuantityArea
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcQuantityArea(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcQuantityArea")
        {}

                /// <summary>
                /// Create new instace of IfcQuantityArea and returns object of this C++ class to interact with
                /// </summary>
        static IfcQuantityArea Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcQuantityArea"); assert(inst); return inst; }

        Nullable<IfcAreaMeasure> get_AreaValue() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "AreaValue", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_AreaValue(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "AreaValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcQuantityCount
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcQuantityCount : public virtual IfcPhysicalSimpleQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcQuantityCount
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcQuantityCount(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcQuantityCount")
        {}

                /// <summary>
                /// Create new instace of IfcQuantityCount and returns object of this C++ class to interact with
                /// </summary>
        static IfcQuantityCount Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcQuantityCount"); assert(inst); return inst; }

        Nullable<IfcCountMeasure> get_CountValue() { IfcCountMeasure val = (IfcCountMeasure) 0; if (sdaiGetAttrBN(m_instance, "CountValue", sdaiREAL, &val)) return val; else return Nullable<IfcCountMeasure>(); }
        void put_CountValue(IfcCountMeasure value) { sdaiPutAttrBN(m_instance, "CountValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcQuantityLength
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcQuantityLength : public virtual IfcPhysicalSimpleQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcQuantityLength
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcQuantityLength(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcQuantityLength")
        {}

                /// <summary>
                /// Create new instace of IfcQuantityLength and returns object of this C++ class to interact with
                /// </summary>
        static IfcQuantityLength Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcQuantityLength"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_LengthValue() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LengthValue", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_LengthValue(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "LengthValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcQuantityTime
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcQuantityTime : public virtual IfcPhysicalSimpleQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcQuantityTime
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcQuantityTime(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcQuantityTime")
        {}

                /// <summary>
                /// Create new instace of IfcQuantityTime and returns object of this C++ class to interact with
                /// </summary>
        static IfcQuantityTime Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcQuantityTime"); assert(inst); return inst; }

        Nullable<IfcTimeMeasure> get_TimeValue() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "TimeValue", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_TimeValue(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "TimeValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcQuantityVolume
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcQuantityVolume : public virtual IfcPhysicalSimpleQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcQuantityVolume
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcQuantityVolume(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcQuantityVolume")
        {}

                /// <summary>
                /// Create new instace of IfcQuantityVolume and returns object of this C++ class to interact with
                /// </summary>
        static IfcQuantityVolume Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcQuantityVolume"); assert(inst); return inst; }

        Nullable<IfcVolumeMeasure> get_VolumeValue() { IfcVolumeMeasure val = (IfcVolumeMeasure) 0; if (sdaiGetAttrBN(m_instance, "VolumeValue", sdaiREAL, &val)) return val; else return Nullable<IfcVolumeMeasure>(); }
        void put_VolumeValue(IfcVolumeMeasure value) { sdaiPutAttrBN(m_instance, "VolumeValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcQuantityWeight
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcQuantityWeight : public virtual IfcPhysicalSimpleQuantity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcQuantityWeight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcQuantityWeight(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcQuantityWeight")
        {}

                /// <summary>
                /// Create new instace of IfcQuantityWeight and returns object of this C++ class to interact with
                /// </summary>
        static IfcQuantityWeight Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcQuantityWeight"); assert(inst); return inst; }

        Nullable<IfcMassMeasure> get_WeightValue() { IfcMassMeasure val = (IfcMassMeasure) 0; if (sdaiGetAttrBN(m_instance, "WeightValue", sdaiREAL, &val)) return val; else return Nullable<IfcMassMeasure>(); }
        void put_WeightValue(IfcMassMeasure value) { sdaiPutAttrBN(m_instance, "WeightValue", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRadiusDimension
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRadiusDimension : public virtual IfcDimensionCurveDirectedCallout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRadiusDimension
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRadiusDimension(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRadiusDimension")
        {}

                /// <summary>
                /// Create new instace of IfcRadiusDimension and returns object of this C++ class to interact with
                /// </summary>
        static IfcRadiusDimension Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRadiusDimension"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRailing
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRailing : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRailing
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRailing(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRailing")
        {}

                /// <summary>
                /// Create new instace of IfcRailing and returns object of this C++ class to interact with
                /// </summary>
        static IfcRailing Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRailing"); assert(inst); return inst; }

        Nullable<IfcRailingTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcRailingTypeEnum_); if (v >= 0) return (IfcRailingTypeEnum) v; else return Nullable<IfcRailingTypeEnum>(); }
        void put_PredefinedType(IfcRailingTypeEnum value) { TextValue val = IfcRailingTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRailingType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRailingType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRailingType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRailingType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRailingType")
        {}

                /// <summary>
                /// Create new instace of IfcRailingType and returns object of this C++ class to interact with
                /// </summary>
        static IfcRailingType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRailingType"); assert(inst); return inst; }

        Nullable<IfcRailingTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcRailingTypeEnum_); if (v >= 0) return (IfcRailingTypeEnum) v; else return Nullable<IfcRailingTypeEnum>(); }
        void put_PredefinedType(IfcRailingTypeEnum value) { TextValue val = IfcRailingTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRamp
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRamp : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRamp
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRamp(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRamp")
        {}

                /// <summary>
                /// Create new instace of IfcRamp and returns object of this C++ class to interact with
                /// </summary>
        static IfcRamp Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRamp"); assert(inst); return inst; }

        Nullable<IfcRampTypeEnum> get_ShapeType() { int v = getENUM("ShapeType", IfcRampTypeEnum_); if (v >= 0) return (IfcRampTypeEnum) v; else return Nullable<IfcRampTypeEnum>(); }
        void put_ShapeType(IfcRampTypeEnum value) { TextValue val = IfcRampTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ShapeType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRampFlight
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRampFlight : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRampFlight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRampFlight(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRampFlight")
        {}

                /// <summary>
                /// Create new instace of IfcRampFlight and returns object of this C++ class to interact with
                /// </summary>
        static IfcRampFlight Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRampFlight"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRampFlightType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRampFlightType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRampFlightType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRampFlightType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRampFlightType")
        {}

                /// <summary>
                /// Create new instace of IfcRampFlightType and returns object of this C++ class to interact with
                /// </summary>
        static IfcRampFlightType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRampFlightType"); assert(inst); return inst; }

        Nullable<IfcRampFlightTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcRampFlightTypeEnum_); if (v >= 0) return (IfcRampFlightTypeEnum) v; else return Nullable<IfcRampFlightTypeEnum>(); }
        void put_PredefinedType(IfcRampFlightTypeEnum value) { TextValue val = IfcRampFlightTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRationalBezierCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRationalBezierCurve : public virtual IfcBezierCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRationalBezierCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRationalBezierCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRationalBezierCurve")
        {}

                /// <summary>
                /// Create new instace of IfcRationalBezierCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcRationalBezierCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRationalBezierCurve"); assert(inst); return inst; }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void get_WeightsData(TList& lst) { list_of_doubleSerializer<TList> sr; sr.FromAttr(lst, m_instance, "WeightsData"); }

        //TList may be list_of_double or list of converible elements
        template <typename TList> void put_WeightsData(TList& lst) { list_of_doubleSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "WeightsData"); }

        //TArrayElem[] may be double[] or array of convertible elements
        template <typename TArrayElem> void put_WeightsData(TArrayElem arr[], size_t n) { list_of_double lst; ArrayToList(arr, n, lst); put_WeightsData(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRectangleProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRectangleProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRectangleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRectangleProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRectangleProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcRectangleProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcRectangleProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRectangleProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_XDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "XDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_XDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "XDim", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_YDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "YDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_YDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "YDim", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRectangleHollowProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRectangleHollowProfileDef : public virtual IfcRectangleProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRectangleHollowProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRectangleHollowProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRectangleHollowProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcRectangleHollowProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcRectangleHollowProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRectangleHollowProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_WallThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WallThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WallThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WallThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_InnerFilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "InnerFilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_InnerFilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "InnerFilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_OuterFilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OuterFilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OuterFilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OuterFilletRadius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRectangularPyramid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRectangularPyramid : public virtual IfcCsgPrimitive3D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRectangularPyramid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRectangularPyramid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRectangularPyramid")
        {}

                /// <summary>
                /// Create new instace of IfcRectangularPyramid and returns object of this C++ class to interact with
                /// </summary>
        static IfcRectangularPyramid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRectangularPyramid"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_XLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "XLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_XLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "XLength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_YLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "YLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_YLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "YLength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Height() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Height", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Height(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Height", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRectangularTrimmedSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRectangularTrimmedSurface : public virtual IfcBoundedSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRectangularTrimmedSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRectangularTrimmedSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRectangularTrimmedSurface")
        {}

                /// <summary>
                /// Create new instace of IfcRectangularTrimmedSurface and returns object of this C++ class to interact with
                /// </summary>
        static IfcRectangularTrimmedSurface Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRectangularTrimmedSurface"); assert(inst); return inst; }

        IfcSurface get_BasisSurface();
        void put_BasisSurface(IfcSurface inst);

        Nullable<IfcParameterValue> get_U1() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "U1", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_U1(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "U1", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_V1() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "V1", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_V1(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "V1", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_U2() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "U2", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_U2(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "U2", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_V2() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "V2", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_V2(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "V2", sdaiREAL, &value); }

        Nullable<bool> get_Usense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "Usense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_Usense(bool value) { sdaiPutAttrBN(m_instance, "Usense", sdaiBOOLEAN, &value); }

        Nullable<bool> get_Vsense() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "Vsense", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_Vsense(bool value) { sdaiPutAttrBN(m_instance, "Vsense", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcReferencesValueDocument
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcReferencesValueDocument : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcReferencesValueDocument
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcReferencesValueDocument(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcReferencesValueDocument")
        {}

                /// <summary>
                /// Create new instace of IfcReferencesValueDocument and returns object of this C++ class to interact with
                /// </summary>
        static IfcReferencesValueDocument Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcReferencesValueDocument"); assert(inst); return inst; }

        IfcDocumentSelect_get get_ReferencedDocument() { return IfcDocumentSelect_get(m_instance, "ReferencedDocument", NULL); }
        IfcDocumentSelect_put put_ReferencedDocument() { return IfcDocumentSelect_put(m_instance, "ReferencedDocument", NULL); }

        //TList may be SetOfIfcAppliedValue or list of converible elements
        template <typename TList> void get_ReferencingValues(TList& lst) { SetOfIfcAppliedValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferencingValues"); }

        //TList may be SetOfIfcAppliedValue or list of converible elements
        template <typename TList> void put_ReferencingValues(TList& lst) { SetOfIfcAppliedValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ReferencingValues"); }

        //TArrayElem[] may be IfcAppliedValue[] or array of convertible elements
        template <typename TArrayElem> void put_ReferencingValues(TArrayElem arr[], size_t n) { SetOfIfcAppliedValue lst; ArrayToList(arr, n, lst); put_ReferencingValues(lst); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRegularTimeSeries
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRegularTimeSeries : public virtual IfcTimeSeries
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRegularTimeSeries
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRegularTimeSeries(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRegularTimeSeries")
        {}

                /// <summary>
                /// Create new instace of IfcRegularTimeSeries and returns object of this C++ class to interact with
                /// </summary>
        static IfcRegularTimeSeries Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRegularTimeSeries"); assert(inst); return inst; }

        Nullable<IfcTimeMeasure> get_TimeStep() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "TimeStep", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_TimeStep(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "TimeStep", sdaiREAL, &value); }

        //TList may be ListOfIfcTimeSeriesValue or list of converible elements
        template <typename TList> void get_Values(TList& lst) { ListOfIfcTimeSeriesValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Values"); }

        //TList may be ListOfIfcTimeSeriesValue or list of converible elements
        template <typename TList> void put_Values(TList& lst) { ListOfIfcTimeSeriesValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Values"); }

        //TArrayElem[] may be IfcTimeSeriesValue[] or array of convertible elements
        template <typename TArrayElem> void put_Values(TArrayElem arr[], size_t n) { ListOfIfcTimeSeriesValue lst; ArrayToList(arr, n, lst); put_Values(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcReinforcementBarProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcReinforcementBarProperties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcReinforcementBarProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcReinforcementBarProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcReinforcementBarProperties")
        {}

                /// <summary>
                /// Create new instace of IfcReinforcementBarProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcReinforcementBarProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcReinforcementBarProperties"); assert(inst); return inst; }

        Nullable<IfcAreaMeasure> get_TotalCrossSectionArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "TotalCrossSectionArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_TotalCrossSectionArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "TotalCrossSectionArea", sdaiREAL, &value); }

        IfcLabel get_SteelGrade() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "SteelGrade", sdaiSTRING, &val)) return val; else return NULL; }
        void put_SteelGrade(IfcLabel value) { sdaiPutAttrBN(m_instance, "SteelGrade", sdaiSTRING, value); }

        Nullable<IfcReinforcingBarSurfaceEnum> get_BarSurface() { int v = getENUM("BarSurface", IfcReinforcingBarSurfaceEnum_); if (v >= 0) return (IfcReinforcingBarSurfaceEnum) v; else return Nullable<IfcReinforcingBarSurfaceEnum>(); }
        void put_BarSurface(IfcReinforcingBarSurfaceEnum value) { TextValue val = IfcReinforcingBarSurfaceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "BarSurface", sdaiENUM, val); }

        Nullable<IfcLengthMeasure> get_EffectiveDepth() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EffectiveDepth", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_EffectiveDepth(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "EffectiveDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_NominalBarDiameter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "NominalBarDiameter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_NominalBarDiameter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "NominalBarDiameter", sdaiREAL, &value); }

        Nullable<IfcCountMeasure> get_BarCount() { IfcCountMeasure val = (IfcCountMeasure) 0; if (sdaiGetAttrBN(m_instance, "BarCount", sdaiREAL, &val)) return val; else return Nullable<IfcCountMeasure>(); }
        void put_BarCount(IfcCountMeasure value) { sdaiPutAttrBN(m_instance, "BarCount", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcReinforcementDefinitionProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcReinforcementDefinitionProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcReinforcementDefinitionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcReinforcementDefinitionProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcReinforcementDefinitionProperties")
        {}

                /// <summary>
                /// Create new instace of IfcReinforcementDefinitionProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcReinforcementDefinitionProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcReinforcementDefinitionProperties"); assert(inst); return inst; }

        IfcLabel get_DefinitionType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "DefinitionType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_DefinitionType(IfcLabel value) { sdaiPutAttrBN(m_instance, "DefinitionType", sdaiSTRING, value); }

        //TList may be ListOfIfcSectionReinforcementProperties or list of converible elements
        template <typename TList> void get_ReinforcementSectionDefinitions(TList& lst) { ListOfIfcSectionReinforcementPropertiesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReinforcementSectionDefinitions"); }

        //TList may be ListOfIfcSectionReinforcementProperties or list of converible elements
        template <typename TList> void put_ReinforcementSectionDefinitions(TList& lst) { ListOfIfcSectionReinforcementPropertiesSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ReinforcementSectionDefinitions"); }

        //TArrayElem[] may be IfcSectionReinforcementProperties[] or array of convertible elements
        template <typename TArrayElem> void put_ReinforcementSectionDefinitions(TArrayElem arr[], size_t n) { ListOfIfcSectionReinforcementProperties lst; ArrayToList(arr, n, lst); put_ReinforcementSectionDefinitions(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcReinforcingElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcReinforcingElement : public virtual IfcBuildingElementComponent
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcReinforcingElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcReinforcingElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcReinforcingElement")
        {}


        IfcLabel get_SteelGrade() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "SteelGrade", sdaiSTRING, &val)) return val; else return NULL; }
        void put_SteelGrade(IfcLabel value) { sdaiPutAttrBN(m_instance, "SteelGrade", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcReinforcingBar
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcReinforcingBar : public virtual IfcReinforcingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcReinforcingBar
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcReinforcingBar(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcReinforcingBar")
        {}

                /// <summary>
                /// Create new instace of IfcReinforcingBar and returns object of this C++ class to interact with
                /// </summary>
        static IfcReinforcingBar Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcReinforcingBar"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_NominalDiameter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "NominalDiameter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_NominalDiameter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "NominalDiameter", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_CrossSectionArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "CrossSectionArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_CrossSectionArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "CrossSectionArea", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BarLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BarLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BarLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BarLength", sdaiREAL, &value); }

        Nullable<IfcReinforcingBarRoleEnum> get_BarRole() { int v = getENUM("BarRole", IfcReinforcingBarRoleEnum_); if (v >= 0) return (IfcReinforcingBarRoleEnum) v; else return Nullable<IfcReinforcingBarRoleEnum>(); }
        void put_BarRole(IfcReinforcingBarRoleEnum value) { TextValue val = IfcReinforcingBarRoleEnum_[(int) value]; sdaiPutAttrBN(m_instance, "BarRole", sdaiENUM, val); }

        Nullable<IfcReinforcingBarSurfaceEnum> get_BarSurface() { int v = getENUM("BarSurface", IfcReinforcingBarSurfaceEnum_); if (v >= 0) return (IfcReinforcingBarSurfaceEnum) v; else return Nullable<IfcReinforcingBarSurfaceEnum>(); }
        void put_BarSurface(IfcReinforcingBarSurfaceEnum value) { TextValue val = IfcReinforcingBarSurfaceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "BarSurface", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcReinforcingMesh
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcReinforcingMesh : public virtual IfcReinforcingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcReinforcingMesh
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcReinforcingMesh(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcReinforcingMesh")
        {}

                /// <summary>
                /// Create new instace of IfcReinforcingMesh and returns object of this C++ class to interact with
                /// </summary>
        static IfcReinforcingMesh Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcReinforcingMesh"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_MeshLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MeshLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MeshLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MeshLength", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_MeshWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MeshWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MeshWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MeshWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_LongitudinalBarNominalDiameter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LongitudinalBarNominalDiameter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LongitudinalBarNominalDiameter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LongitudinalBarNominalDiameter", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TransverseBarNominalDiameter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransverseBarNominalDiameter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TransverseBarNominalDiameter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TransverseBarNominalDiameter", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_LongitudinalBarCrossSectionArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "LongitudinalBarCrossSectionArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_LongitudinalBarCrossSectionArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "LongitudinalBarCrossSectionArea", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_TransverseBarCrossSectionArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransverseBarCrossSectionArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_TransverseBarCrossSectionArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "TransverseBarCrossSectionArea", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_LongitudinalBarSpacing() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LongitudinalBarSpacing", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LongitudinalBarSpacing(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LongitudinalBarSpacing", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TransverseBarSpacing() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransverseBarSpacing", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TransverseBarSpacing(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TransverseBarSpacing", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelationship : public virtual IfcRoot
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelationship")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelDecomposes
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelDecomposes : public virtual IfcRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelDecomposes
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelDecomposes(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelDecomposes")
        {}


        IfcObjectDefinition get_RelatingObject();
        void put_RelatingObject(IfcObjectDefinition inst);

        //TList may be SetOfIfcObjectDefinition or list of converible elements
        template <typename TList> void get_RelatedObjects(TList& lst) { SetOfIfcObjectDefinitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedObjects"); }

        //TList may be SetOfIfcObjectDefinition or list of converible elements
        template <typename TList> void put_RelatedObjects(TList& lst) { SetOfIfcObjectDefinitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        //TArrayElem[] may be IfcObjectDefinition[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedObjects(TArrayElem arr[], size_t n) { SetOfIfcObjectDefinition lst; ArrayToList(arr, n, lst); put_RelatedObjects(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAggregates
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAggregates : public virtual IfcRelDecomposes
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAggregates
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAggregates(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAggregates")
        {}

                /// <summary>
                /// Create new instace of IfcRelAggregates and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAggregates Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAggregates"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssigns
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssigns : public virtual IfcRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssigns
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssigns(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssigns")
        {}


        //TList may be SetOfIfcObjectDefinition or list of converible elements
        template <typename TList> void get_RelatedObjects(TList& lst) { SetOfIfcObjectDefinitionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedObjects"); }

        //TList may be SetOfIfcObjectDefinition or list of converible elements
        template <typename TList> void put_RelatedObjects(TList& lst) { SetOfIfcObjectDefinitionSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        //TArrayElem[] may be IfcObjectDefinition[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedObjects(TArrayElem arr[], size_t n) { SetOfIfcObjectDefinition lst; ArrayToList(arr, n, lst); put_RelatedObjects(lst); }

        Nullable<IfcObjectTypeEnum> get_RelatedObjectsType() { int v = getENUM("RelatedObjectsType", IfcObjectTypeEnum_); if (v >= 0) return (IfcObjectTypeEnum) v; else return Nullable<IfcObjectTypeEnum>(); }
        void put_RelatedObjectsType(IfcObjectTypeEnum value) { TextValue val = IfcObjectTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "RelatedObjectsType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToControl
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToControl : public virtual IfcRelAssigns
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToControl(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToControl")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToControl and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToControl Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToControl"); assert(inst); return inst; }

        IfcControl get_RelatingControl();
        void put_RelatingControl(IfcControl inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsTasks
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsTasks : public virtual IfcRelAssignsToControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsTasks
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsTasks(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsTasks")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsTasks and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsTasks Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsTasks"); assert(inst); return inst; }

        IfcScheduleTimeControl get_TimeForTask();
        void put_TimeForTask(IfcScheduleTimeControl inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToActor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToActor : public virtual IfcRelAssigns
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToActor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToActor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToActor")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToActor and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToActor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToActor"); assert(inst); return inst; }

        IfcActor get_RelatingActor();
        void put_RelatingActor(IfcActor inst);

        IfcActorRole get_ActingRole();
        void put_ActingRole(IfcActorRole inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToGroup
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToGroup : public virtual IfcRelAssigns
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToGroup(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToGroup")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToGroup and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToGroup Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToGroup"); assert(inst); return inst; }

        IfcGroup get_RelatingGroup();
        void put_RelatingGroup(IfcGroup inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToProcess
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToProcess : public virtual IfcRelAssigns
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToProcess
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToProcess(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToProcess")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToProcess and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToProcess Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToProcess"); assert(inst); return inst; }

        IfcProcess get_RelatingProcess();
        void put_RelatingProcess(IfcProcess inst);

        IfcMeasureWithUnit get_QuantityInProcess();
        void put_QuantityInProcess(IfcMeasureWithUnit inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToProduct
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToProduct : public virtual IfcRelAssigns
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToProduct
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToProduct(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToProduct")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToProduct and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToProduct Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToProduct"); assert(inst); return inst; }

        IfcProduct get_RelatingProduct();
        void put_RelatingProduct(IfcProduct inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToProjectOrder
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToProjectOrder : public virtual IfcRelAssignsToControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToProjectOrder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToProjectOrder(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToProjectOrder")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToProjectOrder and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToProjectOrder Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToProjectOrder"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssignsToResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssignsToResource : public virtual IfcRelAssigns
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssignsToResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssignsToResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssignsToResource")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssignsToResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssignsToResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssignsToResource"); assert(inst); return inst; }

        IfcResource get_RelatingResource();
        void put_RelatingResource(IfcResource inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociates
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociates : public virtual IfcRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociates
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociates(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociates")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociates and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociates Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociates"); assert(inst); return inst; }

        //TList may be SetOfIfcRoot or list of converible elements
        template <typename TList> void get_RelatedObjects(TList& lst) { SetOfIfcRootSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedObjects"); }

        //TList may be SetOfIfcRoot or list of converible elements
        template <typename TList> void put_RelatedObjects(TList& lst) { SetOfIfcRootSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        //TArrayElem[] may be IfcRoot[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedObjects(TArrayElem arr[], size_t n) { SetOfIfcRoot lst; ArrayToList(arr, n, lst); put_RelatedObjects(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesAppliedValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesAppliedValue : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesAppliedValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesAppliedValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesAppliedValue")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesAppliedValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesAppliedValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesAppliedValue"); assert(inst); return inst; }

        IfcAppliedValue get_RelatingAppliedValue();
        void put_RelatingAppliedValue(IfcAppliedValue inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesApproval
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesApproval : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesApproval
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesApproval(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesApproval")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesApproval and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesApproval Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesApproval"); assert(inst); return inst; }

        IfcApproval get_RelatingApproval();
        void put_RelatingApproval(IfcApproval inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesClassification
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesClassification : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesClassification
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesClassification(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesClassification")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesClassification and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesClassification Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesClassification"); assert(inst); return inst; }

        IfcClassificationNotationSelect_get get_RelatingClassification() { return IfcClassificationNotationSelect_get(m_instance, "RelatingClassification", NULL); }
        IfcClassificationNotationSelect_put put_RelatingClassification() { return IfcClassificationNotationSelect_put(m_instance, "RelatingClassification", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesConstraint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesConstraint : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesConstraint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesConstraint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesConstraint")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesConstraint and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesConstraint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesConstraint"); assert(inst); return inst; }

        IfcLabel get_Intent() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Intent", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Intent(IfcLabel value) { sdaiPutAttrBN(m_instance, "Intent", sdaiSTRING, value); }

        IfcConstraint get_RelatingConstraint();
        void put_RelatingConstraint(IfcConstraint inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesDocument
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesDocument : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesDocument
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesDocument(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesDocument")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesDocument and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesDocument Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesDocument"); assert(inst); return inst; }

        IfcDocumentSelect_get get_RelatingDocument() { return IfcDocumentSelect_get(m_instance, "RelatingDocument", NULL); }
        IfcDocumentSelect_put put_RelatingDocument() { return IfcDocumentSelect_put(m_instance, "RelatingDocument", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesLibrary
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesLibrary : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesLibrary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesLibrary(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesLibrary")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesLibrary and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesLibrary Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesLibrary"); assert(inst); return inst; }

        IfcLibrarySelect_get get_RelatingLibrary() { return IfcLibrarySelect_get(m_instance, "RelatingLibrary", NULL); }
        IfcLibrarySelect_put put_RelatingLibrary() { return IfcLibrarySelect_put(m_instance, "RelatingLibrary", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesMaterial
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesMaterial : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesMaterial
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesMaterial(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesMaterial")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesMaterial and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesMaterial Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesMaterial"); assert(inst); return inst; }

        IfcMaterialSelect_get get_RelatingMaterial() { return IfcMaterialSelect_get(m_instance, "RelatingMaterial", NULL); }
        IfcMaterialSelect_put put_RelatingMaterial() { return IfcMaterialSelect_put(m_instance, "RelatingMaterial", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelAssociatesProfileProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelAssociatesProfileProperties : public virtual IfcRelAssociates
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelAssociatesProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelAssociatesProfileProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelAssociatesProfileProperties")
        {}

                /// <summary>
                /// Create new instace of IfcRelAssociatesProfileProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelAssociatesProfileProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelAssociatesProfileProperties"); assert(inst); return inst; }

        IfcProfileProperties get_RelatingProfileProperties();
        void put_RelatingProfileProperties(IfcProfileProperties inst);

        IfcShapeAspect get_ProfileSectionLocation();
        void put_ProfileSectionLocation(IfcShapeAspect inst);

        IfcOrientationSelect_get get_ProfileOrientation() { return IfcOrientationSelect_get(m_instance, "ProfileOrientation", NULL); }
        IfcOrientationSelect_put put_ProfileOrientation() { return IfcOrientationSelect_put(m_instance, "ProfileOrientation", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelaxation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelaxation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelaxation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelaxation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelaxation")
        {}

                /// <summary>
                /// Create new instace of IfcRelaxation and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelaxation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelaxation"); assert(inst); return inst; }

        Nullable<IfcNormalisedRatioMeasure> get_RelaxationValue() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "RelaxationValue", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_RelaxationValue(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "RelaxationValue", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_InitialStress() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "InitialStress", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_InitialStress(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "InitialStress", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnects
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnects : public virtual IfcRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnects
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnects(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnects")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsElements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsElements : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsElements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsElements")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsElements and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsElements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsElements"); assert(inst); return inst; }

        IfcConnectionGeometry get_ConnectionGeometry();
        void put_ConnectionGeometry(IfcConnectionGeometry inst);

        IfcElement get_RelatingElement();
        void put_RelatingElement(IfcElement inst);

        IfcElement get_RelatedElement();
        void put_RelatedElement(IfcElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsPathElements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsPathElements : public virtual IfcRelConnectsElements
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsPathElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsPathElements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsPathElements")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsPathElements and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsPathElements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsPathElements"); assert(inst); return inst; }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_RelatingPriorities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatingPriorities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_RelatingPriorities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatingPriorities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_RelatingPriorities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_RelatingPriorities(lst); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void get_RelatedPriorities(TList& lst) { ListOfIntValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedPriorities"); }

        //TList may be ListOfIntValue or list of converible elements
        template <typename TList> void put_RelatedPriorities(TList& lst) { ListOfIntValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedPriorities"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedPriorities(TArrayElem arr[], size_t n) { ListOfIntValue lst; ArrayToList(arr, n, lst); put_RelatedPriorities(lst); }

        Nullable<IfcConnectionTypeEnum> get_RelatedConnectionType() { int v = getENUM("RelatedConnectionType", IfcConnectionTypeEnum_); if (v >= 0) return (IfcConnectionTypeEnum) v; else return Nullable<IfcConnectionTypeEnum>(); }
        void put_RelatedConnectionType(IfcConnectionTypeEnum value) { TextValue val = IfcConnectionTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "RelatedConnectionType", sdaiENUM, val); }

        Nullable<IfcConnectionTypeEnum> get_RelatingConnectionType() { int v = getENUM("RelatingConnectionType", IfcConnectionTypeEnum_); if (v >= 0) return (IfcConnectionTypeEnum) v; else return Nullable<IfcConnectionTypeEnum>(); }
        void put_RelatingConnectionType(IfcConnectionTypeEnum value) { TextValue val = IfcConnectionTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "RelatingConnectionType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsPorts
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsPorts : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsPorts
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsPorts(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsPorts")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsPorts and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsPorts Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsPorts"); assert(inst); return inst; }

        IfcPort get_RelatingPort();
        void put_RelatingPort(IfcPort inst);

        IfcPort get_RelatedPort();
        void put_RelatedPort(IfcPort inst);

        IfcElement get_RealizingElement();
        void put_RealizingElement(IfcElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsPortToElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsPortToElement : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsPortToElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsPortToElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsPortToElement")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsPortToElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsPortToElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsPortToElement"); assert(inst); return inst; }

        IfcPort get_RelatingPort();
        void put_RelatingPort(IfcPort inst);

        IfcElement get_RelatedElement();
        void put_RelatedElement(IfcElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralActivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsStructuralActivity : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsStructuralActivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsStructuralActivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsStructuralActivity")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsStructuralActivity and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsStructuralActivity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralActivity"); assert(inst); return inst; }

        IfcStructuralActivityAssignmentSelect_get get_RelatingElement() { return IfcStructuralActivityAssignmentSelect_get(m_instance, "RelatingElement", NULL); }
        IfcStructuralActivityAssignmentSelect_put put_RelatingElement() { return IfcStructuralActivityAssignmentSelect_put(m_instance, "RelatingElement", NULL); }

        IfcStructuralActivity get_RelatedStructuralActivity();
        void put_RelatedStructuralActivity(IfcStructuralActivity inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsStructuralElement : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsStructuralElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsStructuralElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsStructuralElement")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsStructuralElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsStructuralElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralElement"); assert(inst); return inst; }

        IfcElement get_RelatingElement();
        void put_RelatingElement(IfcElement inst);

        IfcStructuralMember get_RelatedStructuralMember();
        void put_RelatedStructuralMember(IfcStructuralMember inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsStructuralMember
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsStructuralMember : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsStructuralMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsStructuralMember(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsStructuralMember")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsStructuralMember and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsStructuralMember Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsStructuralMember"); assert(inst); return inst; }

        IfcStructuralMember get_RelatingStructuralMember();
        void put_RelatingStructuralMember(IfcStructuralMember inst);

        IfcStructuralConnection get_RelatedStructuralConnection();
        void put_RelatedStructuralConnection(IfcStructuralConnection inst);

        IfcBoundaryCondition get_AppliedCondition();
        void put_AppliedCondition(IfcBoundaryCondition inst);

        IfcStructuralConnectionCondition get_AdditionalConditions();
        void put_AdditionalConditions(IfcStructuralConnectionCondition inst);

        Nullable<IfcLengthMeasure> get_SupportedLength() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SupportedLength", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_SupportedLength(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "SupportedLength", sdaiREAL, &value); }

        IfcAxis2Placement3D get_ConditionCoordinateSystem();
        void put_ConditionCoordinateSystem(IfcAxis2Placement3D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsWithEccentricity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsWithEccentricity : public virtual IfcRelConnectsStructuralMember
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsWithEccentricity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsWithEccentricity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsWithEccentricity")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsWithEccentricity and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsWithEccentricity Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsWithEccentricity"); assert(inst); return inst; }

        IfcConnectionGeometry get_ConnectionConstraint();
        void put_ConnectionConstraint(IfcConnectionGeometry inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelConnectsWithRealizingElements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelConnectsWithRealizingElements : public virtual IfcRelConnectsElements
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelConnectsWithRealizingElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelConnectsWithRealizingElements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelConnectsWithRealizingElements")
        {}

                /// <summary>
                /// Create new instace of IfcRelConnectsWithRealizingElements and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelConnectsWithRealizingElements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelConnectsWithRealizingElements"); assert(inst); return inst; }

        //TList may be SetOfIfcElement or list of converible elements
        template <typename TList> void get_RealizingElements(TList& lst) { SetOfIfcElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RealizingElements"); }

        //TList may be SetOfIfcElement or list of converible elements
        template <typename TList> void put_RealizingElements(TList& lst) { SetOfIfcElementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RealizingElements"); }

        //TArrayElem[] may be IfcElement[] or array of convertible elements
        template <typename TArrayElem> void put_RealizingElements(TArrayElem arr[], size_t n) { SetOfIfcElement lst; ArrayToList(arr, n, lst); put_RealizingElements(lst); }

        IfcLabel get_ConnectionType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "ConnectionType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_ConnectionType(IfcLabel value) { sdaiPutAttrBN(m_instance, "ConnectionType", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelContainedInSpatialStructure
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelContainedInSpatialStructure : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelContainedInSpatialStructure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelContainedInSpatialStructure(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelContainedInSpatialStructure")
        {}

                /// <summary>
                /// Create new instace of IfcRelContainedInSpatialStructure and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelContainedInSpatialStructure Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelContainedInSpatialStructure"); assert(inst); return inst; }

        //TList may be SetOfIfcProduct or list of converible elements
        template <typename TList> void get_RelatedElements(TList& lst) { SetOfIfcProductSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedElements"); }

        //TList may be SetOfIfcProduct or list of converible elements
        template <typename TList> void put_RelatedElements(TList& lst) { SetOfIfcProductSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedElements"); }

        //TArrayElem[] may be IfcProduct[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedElements(TArrayElem arr[], size_t n) { SetOfIfcProduct lst; ArrayToList(arr, n, lst); put_RelatedElements(lst); }

        IfcSpatialStructureElement get_RelatingStructure();
        void put_RelatingStructure(IfcSpatialStructureElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelCoversBldgElements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelCoversBldgElements : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelCoversBldgElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelCoversBldgElements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelCoversBldgElements")
        {}

                /// <summary>
                /// Create new instace of IfcRelCoversBldgElements and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelCoversBldgElements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelCoversBldgElements"); assert(inst); return inst; }

        IfcElement get_RelatingBuildingElement();
        void put_RelatingBuildingElement(IfcElement inst);

        //TList may be SetOfIfcCovering or list of converible elements
        template <typename TList> void get_RelatedCoverings(TList& lst) { SetOfIfcCoveringSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedCoverings"); }

        //TList may be SetOfIfcCovering or list of converible elements
        template <typename TList> void put_RelatedCoverings(TList& lst) { SetOfIfcCoveringSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }

        //TArrayElem[] may be IfcCovering[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedCoverings(TArrayElem arr[], size_t n) { SetOfIfcCovering lst; ArrayToList(arr, n, lst); put_RelatedCoverings(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelCoversSpaces
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelCoversSpaces : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelCoversSpaces
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelCoversSpaces(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelCoversSpaces")
        {}

                /// <summary>
                /// Create new instace of IfcRelCoversSpaces and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelCoversSpaces Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelCoversSpaces"); assert(inst); return inst; }

        IfcSpace get_RelatedSpace();
        void put_RelatedSpace(IfcSpace inst);

        //TList may be SetOfIfcCovering or list of converible elements
        template <typename TList> void get_RelatedCoverings(TList& lst) { SetOfIfcCoveringSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedCoverings"); }

        //TList may be SetOfIfcCovering or list of converible elements
        template <typename TList> void put_RelatedCoverings(TList& lst) { SetOfIfcCoveringSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedCoverings"); }

        //TArrayElem[] may be IfcCovering[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedCoverings(TArrayElem arr[], size_t n) { SetOfIfcCovering lst; ArrayToList(arr, n, lst); put_RelatedCoverings(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelDefines
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelDefines : public virtual IfcRelationship
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelDefines
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelDefines(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelDefines")
        {}


        //TList may be SetOfIfcObject or list of converible elements
        template <typename TList> void get_RelatedObjects(TList& lst) { SetOfIfcObjectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedObjects"); }

        //TList may be SetOfIfcObject or list of converible elements
        template <typename TList> void put_RelatedObjects(TList& lst) { SetOfIfcObjectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedObjects"); }

        //TArrayElem[] may be IfcObject[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedObjects(TArrayElem arr[], size_t n) { SetOfIfcObject lst; ArrayToList(arr, n, lst); put_RelatedObjects(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelDefinesByProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelDefinesByProperties : public virtual IfcRelDefines
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelDefinesByProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelDefinesByProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelDefinesByProperties")
        {}

                /// <summary>
                /// Create new instace of IfcRelDefinesByProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelDefinesByProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelDefinesByProperties"); assert(inst); return inst; }

        IfcPropertySetDefinition get_RelatingPropertyDefinition();
        void put_RelatingPropertyDefinition(IfcPropertySetDefinition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelDefinesByType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelDefinesByType : public virtual IfcRelDefines
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelDefinesByType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelDefinesByType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelDefinesByType")
        {}

                /// <summary>
                /// Create new instace of IfcRelDefinesByType and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelDefinesByType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelDefinesByType"); assert(inst); return inst; }

        IfcTypeObject get_RelatingType();
        void put_RelatingType(IfcTypeObject inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelFillsElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelFillsElement : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelFillsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelFillsElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelFillsElement")
        {}

                /// <summary>
                /// Create new instace of IfcRelFillsElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelFillsElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelFillsElement"); assert(inst); return inst; }

        IfcOpeningElement get_RelatingOpeningElement();
        void put_RelatingOpeningElement(IfcOpeningElement inst);

        IfcElement get_RelatedBuildingElement();
        void put_RelatedBuildingElement(IfcElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelFlowControlElements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelFlowControlElements : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelFlowControlElements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelFlowControlElements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelFlowControlElements")
        {}

                /// <summary>
                /// Create new instace of IfcRelFlowControlElements and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelFlowControlElements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelFlowControlElements"); assert(inst); return inst; }

        //TList may be SetOfIfcDistributionControlElement or list of converible elements
        template <typename TList> void get_RelatedControlElements(TList& lst) { SetOfIfcDistributionControlElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedControlElements"); }

        //TList may be SetOfIfcDistributionControlElement or list of converible elements
        template <typename TList> void put_RelatedControlElements(TList& lst) { SetOfIfcDistributionControlElementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedControlElements"); }

        //TArrayElem[] may be IfcDistributionControlElement[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedControlElements(TArrayElem arr[], size_t n) { SetOfIfcDistributionControlElement lst; ArrayToList(arr, n, lst); put_RelatedControlElements(lst); }

        IfcDistributionFlowElement get_RelatingFlowElement();
        void put_RelatingFlowElement(IfcDistributionFlowElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelInteractionRequirements
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelInteractionRequirements : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelInteractionRequirements
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelInteractionRequirements(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelInteractionRequirements")
        {}

                /// <summary>
                /// Create new instace of IfcRelInteractionRequirements and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelInteractionRequirements Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelInteractionRequirements"); assert(inst); return inst; }

        Nullable<IfcCountMeasure> get_DailyInteraction() { IfcCountMeasure val = (IfcCountMeasure) 0; if (sdaiGetAttrBN(m_instance, "DailyInteraction", sdaiREAL, &val)) return val; else return Nullable<IfcCountMeasure>(); }
        void put_DailyInteraction(IfcCountMeasure value) { sdaiPutAttrBN(m_instance, "DailyInteraction", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_ImportanceRating() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ImportanceRating", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_ImportanceRating(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "ImportanceRating", sdaiREAL, &value); }

        IfcSpatialStructureElement get_LocationOfInteraction();
        void put_LocationOfInteraction(IfcSpatialStructureElement inst);

        IfcSpaceProgram get_RelatedSpaceProgram();
        void put_RelatedSpaceProgram(IfcSpaceProgram inst);

        IfcSpaceProgram get_RelatingSpaceProgram();
        void put_RelatingSpaceProgram(IfcSpaceProgram inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelNests
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelNests : public virtual IfcRelDecomposes
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelNests
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelNests(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelNests")
        {}

                /// <summary>
                /// Create new instace of IfcRelNests and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelNests Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelNests"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelOccupiesSpaces
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelOccupiesSpaces : public virtual IfcRelAssignsToActor
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelOccupiesSpaces
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelOccupiesSpaces(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelOccupiesSpaces")
        {}

                /// <summary>
                /// Create new instace of IfcRelOccupiesSpaces and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelOccupiesSpaces Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelOccupiesSpaces"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelOverridesProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelOverridesProperties : public virtual IfcRelDefinesByProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelOverridesProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelOverridesProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelOverridesProperties")
        {}

                /// <summary>
                /// Create new instace of IfcRelOverridesProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelOverridesProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelOverridesProperties"); assert(inst); return inst; }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void get_OverridingProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr; sr.FromAttr(lst, m_instance, "OverridingProperties"); }

        //TList may be SetOfIfcProperty or list of converible elements
        template <typename TList> void put_OverridingProperties(TList& lst) { SetOfIfcPropertySerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "OverridingProperties"); }

        //TArrayElem[] may be IfcProperty[] or array of convertible elements
        template <typename TArrayElem> void put_OverridingProperties(TArrayElem arr[], size_t n) { SetOfIfcProperty lst; ArrayToList(arr, n, lst); put_OverridingProperties(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelProjectsElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelProjectsElement : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelProjectsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelProjectsElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelProjectsElement")
        {}

                /// <summary>
                /// Create new instace of IfcRelProjectsElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelProjectsElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelProjectsElement"); assert(inst); return inst; }

        IfcElement get_RelatingElement();
        void put_RelatingElement(IfcElement inst);

        IfcFeatureElementAddition get_RelatedFeatureElement();
        void put_RelatedFeatureElement(IfcFeatureElementAddition inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelReferencedInSpatialStructure
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelReferencedInSpatialStructure : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelReferencedInSpatialStructure
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelReferencedInSpatialStructure(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelReferencedInSpatialStructure")
        {}

                /// <summary>
                /// Create new instace of IfcRelReferencedInSpatialStructure and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelReferencedInSpatialStructure Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelReferencedInSpatialStructure"); assert(inst); return inst; }

        //TList may be SetOfIfcProduct or list of converible elements
        template <typename TList> void get_RelatedElements(TList& lst) { SetOfIfcProductSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedElements"); }

        //TList may be SetOfIfcProduct or list of converible elements
        template <typename TList> void put_RelatedElements(TList& lst) { SetOfIfcProductSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedElements"); }

        //TArrayElem[] may be IfcProduct[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedElements(TArrayElem arr[], size_t n) { SetOfIfcProduct lst; ArrayToList(arr, n, lst); put_RelatedElements(lst); }

        IfcSpatialStructureElement get_RelatingStructure();
        void put_RelatingStructure(IfcSpatialStructureElement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelSchedulesCostItems
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelSchedulesCostItems : public virtual IfcRelAssignsToControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelSchedulesCostItems
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelSchedulesCostItems(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelSchedulesCostItems")
        {}

                /// <summary>
                /// Create new instace of IfcRelSchedulesCostItems and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelSchedulesCostItems Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelSchedulesCostItems"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelSequence
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelSequence : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelSequence
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelSequence(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelSequence")
        {}

                /// <summary>
                /// Create new instace of IfcRelSequence and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelSequence Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelSequence"); assert(inst); return inst; }

        IfcProcess get_RelatingProcess();
        void put_RelatingProcess(IfcProcess inst);

        IfcProcess get_RelatedProcess();
        void put_RelatedProcess(IfcProcess inst);

        Nullable<IfcTimeMeasure> get_TimeLag() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "TimeLag", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_TimeLag(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "TimeLag", sdaiREAL, &value); }

        Nullable<IfcSequenceEnum> get_SequenceType() { int v = getENUM("SequenceType", IfcSequenceEnum_); if (v >= 0) return (IfcSequenceEnum) v; else return Nullable<IfcSequenceEnum>(); }
        void put_SequenceType(IfcSequenceEnum value) { TextValue val = IfcSequenceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "SequenceType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelServicesBuildings
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelServicesBuildings : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelServicesBuildings
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelServicesBuildings(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelServicesBuildings")
        {}

                /// <summary>
                /// Create new instace of IfcRelServicesBuildings and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelServicesBuildings Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelServicesBuildings"); assert(inst); return inst; }

        IfcSystem get_RelatingSystem();
        void put_RelatingSystem(IfcSystem inst);

        //TList may be SetOfIfcSpatialStructureElement or list of converible elements
        template <typename TList> void get_RelatedBuildings(TList& lst) { SetOfIfcSpatialStructureElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RelatedBuildings"); }

        //TList may be SetOfIfcSpatialStructureElement or list of converible elements
        template <typename TList> void put_RelatedBuildings(TList& lst) { SetOfIfcSpatialStructureElementSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RelatedBuildings"); }

        //TArrayElem[] may be IfcSpatialStructureElement[] or array of convertible elements
        template <typename TArrayElem> void put_RelatedBuildings(TArrayElem arr[], size_t n) { SetOfIfcSpatialStructureElement lst; ArrayToList(arr, n, lst); put_RelatedBuildings(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelSpaceBoundary
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelSpaceBoundary : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelSpaceBoundary
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelSpaceBoundary(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelSpaceBoundary")
        {}

                /// <summary>
                /// Create new instace of IfcRelSpaceBoundary and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelSpaceBoundary Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelSpaceBoundary"); assert(inst); return inst; }

        IfcSpace get_RelatingSpace();
        void put_RelatingSpace(IfcSpace inst);

        IfcElement get_RelatedBuildingElement();
        void put_RelatedBuildingElement(IfcElement inst);

        IfcConnectionGeometry get_ConnectionGeometry();
        void put_ConnectionGeometry(IfcConnectionGeometry inst);

        Nullable<IfcPhysicalOrVirtualEnum> get_PhysicalOrVirtualBoundary() { int v = getENUM("PhysicalOrVirtualBoundary", IfcPhysicalOrVirtualEnum_); if (v >= 0) return (IfcPhysicalOrVirtualEnum) v; else return Nullable<IfcPhysicalOrVirtualEnum>(); }
        void put_PhysicalOrVirtualBoundary(IfcPhysicalOrVirtualEnum value) { TextValue val = IfcPhysicalOrVirtualEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PhysicalOrVirtualBoundary", sdaiENUM, val); }

        Nullable<IfcInternalOrExternalEnum> get_InternalOrExternalBoundary() { int v = getENUM("InternalOrExternalBoundary", IfcInternalOrExternalEnum_); if (v >= 0) return (IfcInternalOrExternalEnum) v; else return Nullable<IfcInternalOrExternalEnum>(); }
        void put_InternalOrExternalBoundary(IfcInternalOrExternalEnum value) { TextValue val = IfcInternalOrExternalEnum_[(int) value]; sdaiPutAttrBN(m_instance, "InternalOrExternalBoundary", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRelVoidsElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRelVoidsElement : public virtual IfcRelConnects
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRelVoidsElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRelVoidsElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRelVoidsElement")
        {}

                /// <summary>
                /// Create new instace of IfcRelVoidsElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcRelVoidsElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRelVoidsElement"); assert(inst); return inst; }

        IfcElement get_RelatingBuildingElement();
        void put_RelatingBuildingElement(IfcElement inst);

        IfcFeatureElementSubtraction get_RelatedOpeningElement();
        void put_RelatedOpeningElement(IfcFeatureElementSubtraction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRepresentation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRepresentation : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRepresentation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRepresentation")
        {}

                /// <summary>
                /// Create new instace of IfcRepresentation and returns object of this C++ class to interact with
                /// </summary>
        static IfcRepresentation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRepresentation"); assert(inst); return inst; }

        IfcRepresentationContext get_ContextOfItems();
        void put_ContextOfItems(IfcRepresentationContext inst);

        IfcLabel get_RepresentationIdentifier() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "RepresentationIdentifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_RepresentationIdentifier(IfcLabel value) { sdaiPutAttrBN(m_instance, "RepresentationIdentifier", sdaiSTRING, value); }

        IfcLabel get_RepresentationType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "RepresentationType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_RepresentationType(IfcLabel value) { sdaiPutAttrBN(m_instance, "RepresentationType", sdaiSTRING, value); }

        //TList may be SetOfIfcRepresentationItem or list of converible elements
        template <typename TList> void get_Items(TList& lst) { SetOfIfcRepresentationItemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Items"); }

        //TList may be SetOfIfcRepresentationItem or list of converible elements
        template <typename TList> void put_Items(TList& lst) { SetOfIfcRepresentationItemSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Items"); }

        //TArrayElem[] may be IfcRepresentationItem[] or array of convertible elements
        template <typename TArrayElem> void put_Items(TArrayElem arr[], size_t n) { SetOfIfcRepresentationItem lst; ArrayToList(arr, n, lst); put_Items(lst); }

        //TList may be SetOfIfcRepresentationMap or list of converible elements
        template <typename TList> void get_RepresentationMap(TList& lst) { SetOfIfcRepresentationMapSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RepresentationMap"); }

        //TList may be SetOfIfcPresentationLayerAssignment or list of converible elements
        template <typename TList> void get_LayerAssignments(TList& lst) { SetOfIfcPresentationLayerAssignmentSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LayerAssignments"); }

        //TList may be SetOfIfcProductRepresentation or list of converible elements
        template <typename TList> void get_OfProductRepresentation(TList& lst) { SetOfIfcProductRepresentationSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OfProductRepresentation"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRepresentationMap
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRepresentationMap : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRepresentationMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRepresentationMap(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRepresentationMap")
        {}

                /// <summary>
                /// Create new instace of IfcRepresentationMap and returns object of this C++ class to interact with
                /// </summary>
        static IfcRepresentationMap Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRepresentationMap"); assert(inst); return inst; }

        IfcAxis2Placement_get get_MappingOrigin() { return IfcAxis2Placement_get(m_instance, "MappingOrigin", NULL); }
        IfcAxis2Placement_put put_MappingOrigin() { return IfcAxis2Placement_put(m_instance, "MappingOrigin", NULL); }

        IfcRepresentation get_MappedRepresentation();
        void put_MappedRepresentation(IfcRepresentation inst);

        //TList may be SetOfIfcMappedItem or list of converible elements
        template <typename TList> void get_MapUsage(TList& lst) { SetOfIfcMappedItemSerializer<TList> sr; sr.FromAttr(lst, m_instance, "MapUsage"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRevolvedAreaSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRevolvedAreaSolid : public virtual IfcSweptAreaSolid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRevolvedAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRevolvedAreaSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRevolvedAreaSolid")
        {}

                /// <summary>
                /// Create new instace of IfcRevolvedAreaSolid and returns object of this C++ class to interact with
                /// </summary>
        static IfcRevolvedAreaSolid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRevolvedAreaSolid"); assert(inst); return inst; }

        IfcAxis1Placement get_Axis();
        void put_Axis(IfcAxis1Placement inst);

        Nullable<IfcPlaneAngleMeasure> get_Angle() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "Angle", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_Angle(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "Angle", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRibPlateProfileProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRibPlateProfileProperties : public virtual IfcProfileProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRibPlateProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRibPlateProfileProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRibPlateProfileProperties")
        {}

                /// <summary>
                /// Create new instace of IfcRibPlateProfileProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcRibPlateProfileProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRibPlateProfileProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Thickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Thickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Thickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Thickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_RibHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "RibHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_RibHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "RibHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_RibWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "RibWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_RibWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "RibWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_RibSpacing() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "RibSpacing", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_RibSpacing(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "RibSpacing", sdaiREAL, &value); }

        Nullable<IfcRibPlateDirectionEnum> get_Direction() { int v = getENUM("Direction", IfcRibPlateDirectionEnum_); if (v >= 0) return (IfcRibPlateDirectionEnum) v; else return Nullable<IfcRibPlateDirectionEnum>(); }
        void put_Direction(IfcRibPlateDirectionEnum value) { TextValue val = IfcRibPlateDirectionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "Direction", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRightCircularCone
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRightCircularCone : public virtual IfcCsgPrimitive3D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRightCircularCone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRightCircularCone(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRightCircularCone")
        {}

                /// <summary>
                /// Create new instace of IfcRightCircularCone and returns object of this C++ class to interact with
                /// </summary>
        static IfcRightCircularCone Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRightCircularCone"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Height() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Height", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Height(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Height", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BottomRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BottomRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BottomRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BottomRadius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRightCircularCylinder
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRightCircularCylinder : public virtual IfcCsgPrimitive3D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRightCircularCylinder
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRightCircularCylinder(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRightCircularCylinder")
        {}

                /// <summary>
                /// Create new instace of IfcRightCircularCylinder and returns object of this C++ class to interact with
                /// </summary>
        static IfcRightCircularCylinder Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRightCircularCylinder"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Height() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Height", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Height(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Height", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRoof
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRoof : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRoof
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRoof(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRoof")
        {}

                /// <summary>
                /// Create new instace of IfcRoof and returns object of this C++ class to interact with
                /// </summary>
        static IfcRoof Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRoof"); assert(inst); return inst; }

        Nullable<IfcRoofTypeEnum> get_ShapeType() { int v = getENUM("ShapeType", IfcRoofTypeEnum_); if (v >= 0) return (IfcRoofTypeEnum) v; else return Nullable<IfcRoofTypeEnum>(); }
        void put_ShapeType(IfcRoofTypeEnum value) { TextValue val = IfcRoofTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ShapeType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRoundedEdgeFeature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRoundedEdgeFeature : public virtual IfcEdgeFeature
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRoundedEdgeFeature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRoundedEdgeFeature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRoundedEdgeFeature")
        {}

                /// <summary>
                /// Create new instace of IfcRoundedEdgeFeature and returns object of this C++ class to interact with
                /// </summary>
        static IfcRoundedEdgeFeature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRoundedEdgeFeature"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcRoundedRectangleProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcRoundedRectangleProfileDef : public virtual IfcRectangleProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcRoundedRectangleProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcRoundedRectangleProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcRoundedRectangleProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcRoundedRectangleProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcRoundedRectangleProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcRoundedRectangleProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_RoundingRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "RoundingRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_RoundingRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "RoundingRadius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSanitaryTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSanitaryTerminalType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSanitaryTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSanitaryTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSanitaryTerminalType")
        {}

                /// <summary>
                /// Create new instace of IfcSanitaryTerminalType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSanitaryTerminalType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSanitaryTerminalType"); assert(inst); return inst; }

        Nullable<IfcSanitaryTerminalTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSanitaryTerminalTypeEnum_); if (v >= 0) return (IfcSanitaryTerminalTypeEnum) v; else return Nullable<IfcSanitaryTerminalTypeEnum>(); }
        void put_PredefinedType(IfcSanitaryTerminalTypeEnum value) { TextValue val = IfcSanitaryTerminalTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcScheduleTimeControl
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcScheduleTimeControl : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcScheduleTimeControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcScheduleTimeControl(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcScheduleTimeControl")
        {}

                /// <summary>
                /// Create new instace of IfcScheduleTimeControl and returns object of this C++ class to interact with
                /// </summary>
        static IfcScheduleTimeControl Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcScheduleTimeControl"); assert(inst); return inst; }

        IfcDateTimeSelect_get get_ActualStart() { return IfcDateTimeSelect_get(m_instance, "ActualStart", NULL); }
        IfcDateTimeSelect_put put_ActualStart() { return IfcDateTimeSelect_put(m_instance, "ActualStart", NULL); }

        IfcDateTimeSelect_get get_EarlyStart() { return IfcDateTimeSelect_get(m_instance, "EarlyStart", NULL); }
        IfcDateTimeSelect_put put_EarlyStart() { return IfcDateTimeSelect_put(m_instance, "EarlyStart", NULL); }

        IfcDateTimeSelect_get get_LateStart() { return IfcDateTimeSelect_get(m_instance, "LateStart", NULL); }
        IfcDateTimeSelect_put put_LateStart() { return IfcDateTimeSelect_put(m_instance, "LateStart", NULL); }

        IfcDateTimeSelect_get get_ScheduleStart() { return IfcDateTimeSelect_get(m_instance, "ScheduleStart", NULL); }
        IfcDateTimeSelect_put put_ScheduleStart() { return IfcDateTimeSelect_put(m_instance, "ScheduleStart", NULL); }

        IfcDateTimeSelect_get get_ActualFinish() { return IfcDateTimeSelect_get(m_instance, "ActualFinish", NULL); }
        IfcDateTimeSelect_put put_ActualFinish() { return IfcDateTimeSelect_put(m_instance, "ActualFinish", NULL); }

        IfcDateTimeSelect_get get_EarlyFinish() { return IfcDateTimeSelect_get(m_instance, "EarlyFinish", NULL); }
        IfcDateTimeSelect_put put_EarlyFinish() { return IfcDateTimeSelect_put(m_instance, "EarlyFinish", NULL); }

        IfcDateTimeSelect_get get_LateFinish() { return IfcDateTimeSelect_get(m_instance, "LateFinish", NULL); }
        IfcDateTimeSelect_put put_LateFinish() { return IfcDateTimeSelect_put(m_instance, "LateFinish", NULL); }

        IfcDateTimeSelect_get get_ScheduleFinish() { return IfcDateTimeSelect_get(m_instance, "ScheduleFinish", NULL); }
        IfcDateTimeSelect_put put_ScheduleFinish() { return IfcDateTimeSelect_put(m_instance, "ScheduleFinish", NULL); }

        Nullable<IfcTimeMeasure> get_ScheduleDuration() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "ScheduleDuration", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_ScheduleDuration(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "ScheduleDuration", sdaiREAL, &value); }

        Nullable<IfcTimeMeasure> get_ActualDuration() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "ActualDuration", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_ActualDuration(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "ActualDuration", sdaiREAL, &value); }

        Nullable<IfcTimeMeasure> get_RemainingTime() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "RemainingTime", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_RemainingTime(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "RemainingTime", sdaiREAL, &value); }

        Nullable<IfcTimeMeasure> get_FreeFloat() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "FreeFloat", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_FreeFloat(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "FreeFloat", sdaiREAL, &value); }

        Nullable<IfcTimeMeasure> get_TotalFloat() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "TotalFloat", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_TotalFloat(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "TotalFloat", sdaiREAL, &value); }

        Nullable<bool> get_IsCritical() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "IsCritical", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_IsCritical(bool value) { sdaiPutAttrBN(m_instance, "IsCritical", sdaiBOOLEAN, &value); }

        IfcDateTimeSelect_get get_StatusTime() { return IfcDateTimeSelect_get(m_instance, "StatusTime", NULL); }
        IfcDateTimeSelect_put put_StatusTime() { return IfcDateTimeSelect_put(m_instance, "StatusTime", NULL); }

        Nullable<IfcTimeMeasure> get_StartFloat() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "StartFloat", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_StartFloat(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "StartFloat", sdaiREAL, &value); }

        Nullable<IfcTimeMeasure> get_FinishFloat() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "FinishFloat", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_FinishFloat(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "FinishFloat", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_Completion() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Completion", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_Completion(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "Completion", sdaiREAL, &value); }

        IfcRelAssignsTasks get_ScheduleTimeControlAssigned();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSectionedSpine
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSectionedSpine : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSectionedSpine
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSectionedSpine(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSectionedSpine")
        {}

                /// <summary>
                /// Create new instace of IfcSectionedSpine and returns object of this C++ class to interact with
                /// </summary>
        static IfcSectionedSpine Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSectionedSpine"); assert(inst); return inst; }

        IfcCompositeCurve get_SpineCurve();
        void put_SpineCurve(IfcCompositeCurve inst);

        //TList may be ListOfIfcProfileDef or list of converible elements
        template <typename TList> void get_CrossSections(TList& lst) { ListOfIfcProfileDefSerializer<TList> sr; sr.FromAttr(lst, m_instance, "CrossSections"); }

        //TList may be ListOfIfcProfileDef or list of converible elements
        template <typename TList> void put_CrossSections(TList& lst) { ListOfIfcProfileDefSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "CrossSections"); }

        //TArrayElem[] may be IfcProfileDef[] or array of convertible elements
        template <typename TArrayElem> void put_CrossSections(TArrayElem arr[], size_t n) { ListOfIfcProfileDef lst; ArrayToList(arr, n, lst); put_CrossSections(lst); }

        //TList may be ListOfIfcAxis2Placement3D or list of converible elements
        template <typename TList> void get_CrossSectionPositions(TList& lst) { ListOfIfcAxis2Placement3DSerializer<TList> sr; sr.FromAttr(lst, m_instance, "CrossSectionPositions"); }

        //TList may be ListOfIfcAxis2Placement3D or list of converible elements
        template <typename TList> void put_CrossSectionPositions(TList& lst) { ListOfIfcAxis2Placement3DSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "CrossSectionPositions"); }

        //TArrayElem[] may be IfcAxis2Placement3D[] or array of convertible elements
        template <typename TArrayElem> void put_CrossSectionPositions(TArrayElem arr[], size_t n) { ListOfIfcAxis2Placement3D lst; ArrayToList(arr, n, lst); put_CrossSectionPositions(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSectionProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSectionProperties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSectionProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSectionProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSectionProperties")
        {}

                /// <summary>
                /// Create new instace of IfcSectionProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcSectionProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSectionProperties"); assert(inst); return inst; }

        Nullable<IfcSectionTypeEnum> get_SectionType() { int v = getENUM("SectionType", IfcSectionTypeEnum_); if (v >= 0) return (IfcSectionTypeEnum) v; else return Nullable<IfcSectionTypeEnum>(); }
        void put_SectionType(IfcSectionTypeEnum value) { TextValue val = IfcSectionTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "SectionType", sdaiENUM, val); }

        IfcProfileDef get_StartProfile();
        void put_StartProfile(IfcProfileDef inst);

        IfcProfileDef get_EndProfile();
        void put_EndProfile(IfcProfileDef inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSectionReinforcementProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSectionReinforcementProperties : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSectionReinforcementProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSectionReinforcementProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSectionReinforcementProperties")
        {}

                /// <summary>
                /// Create new instace of IfcSectionReinforcementProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcSectionReinforcementProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSectionReinforcementProperties"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_LongitudinalStartPosition() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LongitudinalStartPosition", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_LongitudinalStartPosition(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "LongitudinalStartPosition", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_LongitudinalEndPosition() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LongitudinalEndPosition", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_LongitudinalEndPosition(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "LongitudinalEndPosition", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_TransversePosition() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransversePosition", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_TransversePosition(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "TransversePosition", sdaiREAL, &value); }

        Nullable<IfcReinforcingBarRoleEnum> get_ReinforcementRole() { int v = getENUM("ReinforcementRole", IfcReinforcingBarRoleEnum_); if (v >= 0) return (IfcReinforcingBarRoleEnum) v; else return Nullable<IfcReinforcingBarRoleEnum>(); }
        void put_ReinforcementRole(IfcReinforcingBarRoleEnum value) { TextValue val = IfcReinforcingBarRoleEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ReinforcementRole", sdaiENUM, val); }

        IfcSectionProperties get_SectionDefinition();
        void put_SectionDefinition(IfcSectionProperties inst);

        //TList may be SetOfIfcReinforcementBarProperties or list of converible elements
        template <typename TList> void get_CrossSectionReinforcementDefinitions(TList& lst) { SetOfIfcReinforcementBarPropertiesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "CrossSectionReinforcementDefinitions"); }

        //TList may be SetOfIfcReinforcementBarProperties or list of converible elements
        template <typename TList> void put_CrossSectionReinforcementDefinitions(TList& lst) { SetOfIfcReinforcementBarPropertiesSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "CrossSectionReinforcementDefinitions"); }

        //TArrayElem[] may be IfcReinforcementBarProperties[] or array of convertible elements
        template <typename TArrayElem> void put_CrossSectionReinforcementDefinitions(TArrayElem arr[], size_t n) { SetOfIfcReinforcementBarProperties lst; ArrayToList(arr, n, lst); put_CrossSectionReinforcementDefinitions(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSensorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSensorType : public virtual IfcDistributionControlElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSensorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSensorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSensorType")
        {}

                /// <summary>
                /// Create new instace of IfcSensorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSensorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSensorType"); assert(inst); return inst; }

        Nullable<IfcSensorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSensorTypeEnum_); if (v >= 0) return (IfcSensorTypeEnum) v; else return Nullable<IfcSensorTypeEnum>(); }
        void put_PredefinedType(IfcSensorTypeEnum value) { TextValue val = IfcSensorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcServiceLife
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcServiceLife : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcServiceLife
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcServiceLife(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcServiceLife")
        {}

                /// <summary>
                /// Create new instace of IfcServiceLife and returns object of this C++ class to interact with
                /// </summary>
        static IfcServiceLife Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcServiceLife"); assert(inst); return inst; }

        Nullable<IfcServiceLifeTypeEnum> get_ServiceLifeType() { int v = getENUM("ServiceLifeType", IfcServiceLifeTypeEnum_); if (v >= 0) return (IfcServiceLifeTypeEnum) v; else return Nullable<IfcServiceLifeTypeEnum>(); }
        void put_ServiceLifeType(IfcServiceLifeTypeEnum value) { TextValue val = IfcServiceLifeTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ServiceLifeType", sdaiENUM, val); }

        Nullable<IfcTimeMeasure> get_ServiceLifeDuration() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "ServiceLifeDuration", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_ServiceLifeDuration(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "ServiceLifeDuration", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcServiceLifeFactor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcServiceLifeFactor : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcServiceLifeFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcServiceLifeFactor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcServiceLifeFactor")
        {}

                /// <summary>
                /// Create new instace of IfcServiceLifeFactor and returns object of this C++ class to interact with
                /// </summary>
        static IfcServiceLifeFactor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcServiceLifeFactor"); assert(inst); return inst; }

        Nullable<IfcServiceLifeFactorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcServiceLifeFactorTypeEnum_); if (v >= 0) return (IfcServiceLifeFactorTypeEnum) v; else return Nullable<IfcServiceLifeFactorTypeEnum>(); }
        void put_PredefinedType(IfcServiceLifeFactorTypeEnum value) { TextValue val = IfcServiceLifeFactorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        IfcMeasureValue_get get_UpperValue() { return IfcMeasureValue_get(m_instance, "UpperValue", NULL); }
        IfcMeasureValue_put put_UpperValue() { return IfcMeasureValue_put(m_instance, "UpperValue", NULL); }

        IfcMeasureValue_get get_MostUsedValue() { return IfcMeasureValue_get(m_instance, "MostUsedValue", NULL); }
        IfcMeasureValue_put put_MostUsedValue() { return IfcMeasureValue_put(m_instance, "MostUsedValue", NULL); }

        IfcMeasureValue_get get_LowerValue() { return IfcMeasureValue_get(m_instance, "LowerValue", NULL); }
        IfcMeasureValue_put put_LowerValue() { return IfcMeasureValue_put(m_instance, "LowerValue", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcShapeAspect
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcShapeAspect : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcShapeAspect
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcShapeAspect(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcShapeAspect")
        {}

                /// <summary>
                /// Create new instace of IfcShapeAspect and returns object of this C++ class to interact with
                /// </summary>
        static IfcShapeAspect Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcShapeAspect"); assert(inst); return inst; }

        //TList may be ListOfIfcShapeModel or list of converible elements
        template <typename TList> void get_ShapeRepresentations(TList& lst) { ListOfIfcShapeModelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ShapeRepresentations"); }

        //TList may be ListOfIfcShapeModel or list of converible elements
        template <typename TList> void put_ShapeRepresentations(TList& lst) { ListOfIfcShapeModelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ShapeRepresentations"); }

        //TArrayElem[] may be IfcShapeModel[] or array of convertible elements
        template <typename TArrayElem> void put_ShapeRepresentations(TArrayElem arr[], size_t n) { ListOfIfcShapeModel lst; ArrayToList(arr, n, lst); put_ShapeRepresentations(lst); }

        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        IfcText get_Description() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "Description", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Description(IfcText value) { sdaiPutAttrBN(m_instance, "Description", sdaiSTRING, value); }

        Nullable<LOGICAL_VALUE> get_ProductDefinitional() { int v = getENUM("ProductDefinitional", LOGICAL_VALUE_); if (v >= 0) return (LOGICAL_VALUE) v; else return Nullable<LOGICAL_VALUE>(); }
        void put_ProductDefinitional(LOGICAL_VALUE value) { TextValue val = LOGICAL_VALUE_[(int) value]; sdaiPutAttrBN(m_instance, "ProductDefinitional", sdaiENUM, val); }

        IfcProductDefinitionShape get_PartOfProductDefinitionShape();
        void put_PartOfProductDefinitionShape(IfcProductDefinitionShape inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcShapeModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcShapeModel : public virtual IfcRepresentation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcShapeModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcShapeModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcShapeModel")
        {}


        //TList may be SetOfIfcShapeAspect or list of converible elements
        template <typename TList> void get_OfShapeAspect(TList& lst) { SetOfIfcShapeAspectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OfShapeAspect"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcShapeRepresentation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcShapeRepresentation : public virtual IfcShapeModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcShapeRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcShapeRepresentation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcShapeRepresentation")
        {}

                /// <summary>
                /// Create new instace of IfcShapeRepresentation and returns object of this C++ class to interact with
                /// </summary>
        static IfcShapeRepresentation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcShapeRepresentation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcShellBasedSurfaceModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcShellBasedSurfaceModel : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcShellBasedSurfaceModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcShellBasedSurfaceModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcShellBasedSurfaceModel")
        {}

                /// <summary>
                /// Create new instace of IfcShellBasedSurfaceModel and returns object of this C++ class to interact with
                /// </summary>
        static IfcShellBasedSurfaceModel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcShellBasedSurfaceModel"); assert(inst); return inst; }

        //TList may be SetOfIfcShell or list of converible elements
        template <typename TList> void get_SbsmBoundary(TList& lst) { SetOfIfcShellSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SbsmBoundary"); }

        //TList may be SetOfIfcShell or list of converible elements
        template <typename TList> void put_SbsmBoundary(TList& lst) { SetOfIfcShellSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SbsmBoundary"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSite
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSite : public virtual IfcSpatialStructureElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSite
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSite(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSite")
        {}

                /// <summary>
                /// Create new instace of IfcSite and returns object of this C++ class to interact with
                /// </summary>
        static IfcSite Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSite"); assert(inst); return inst; }

        //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void get_RefLatitude(TList& lst) { IfcCompoundPlaneAngleMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RefLatitude"); }

        //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void put_RefLatitude(TList& lst) { IfcCompoundPlaneAngleMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RefLatitude"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_RefLatitude(TArrayElem arr[], size_t n) { IfcCompoundPlaneAngleMeasure lst; ArrayToList(arr, n, lst); put_RefLatitude(lst); }

        //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void get_RefLongitude(TList& lst) { IfcCompoundPlaneAngleMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RefLongitude"); }

        //TList may be IfcCompoundPlaneAngleMeasure or list of converible elements
        template <typename TList> void put_RefLongitude(TList& lst) { IfcCompoundPlaneAngleMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RefLongitude"); }

        //TArrayElem[] may be IntValue[] or array of convertible elements
        template <typename TArrayElem> void put_RefLongitude(TArrayElem arr[], size_t n) { IfcCompoundPlaneAngleMeasure lst; ArrayToList(arr, n, lst); put_RefLongitude(lst); }

        Nullable<IfcLengthMeasure> get_RefElevation() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "RefElevation", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_RefElevation(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "RefElevation", sdaiREAL, &value); }

        IfcLabel get_LandTitleNumber() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "LandTitleNumber", sdaiSTRING, &val)) return val; else return NULL; }
        void put_LandTitleNumber(IfcLabel value) { sdaiPutAttrBN(m_instance, "LandTitleNumber", sdaiSTRING, value); }

        IfcPostalAddress get_SiteAddress();
        void put_SiteAddress(IfcPostalAddress inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSIUnit
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSIUnit : public virtual IfcNamedUnit
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSIUnit
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSIUnit(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSIUnit")
        {}

                /// <summary>
                /// Create new instace of IfcSIUnit and returns object of this C++ class to interact with
                /// </summary>
        static IfcSIUnit Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSIUnit"); assert(inst); return inst; }

        Nullable<IfcSIPrefix> get_Prefix() { int v = getENUM("Prefix", IfcSIPrefix_); if (v >= 0) return (IfcSIPrefix) v; else return Nullable<IfcSIPrefix>(); }
        void put_Prefix(IfcSIPrefix value) { TextValue val = IfcSIPrefix_[(int) value]; sdaiPutAttrBN(m_instance, "Prefix", sdaiENUM, val); }

        Nullable<IfcSIUnitName> get_Name() { int v = getENUM("Name", IfcSIUnitName_); if (v >= 0) return (IfcSIUnitName) v; else return Nullable<IfcSIUnitName>(); }
        void put_Name(IfcSIUnitName value) { TextValue val = IfcSIUnitName_[(int) value]; sdaiPutAttrBN(m_instance, "Name", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSlab
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSlab : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSlab
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSlab(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSlab")
        {}

                /// <summary>
                /// Create new instace of IfcSlab and returns object of this C++ class to interact with
                /// </summary>
        static IfcSlab Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSlab"); assert(inst); return inst; }

        Nullable<IfcSlabTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSlabTypeEnum_); if (v >= 0) return (IfcSlabTypeEnum) v; else return Nullable<IfcSlabTypeEnum>(); }
        void put_PredefinedType(IfcSlabTypeEnum value) { TextValue val = IfcSlabTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSlabType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSlabType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSlabType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSlabType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSlabType")
        {}

                /// <summary>
                /// Create new instace of IfcSlabType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSlabType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSlabType"); assert(inst); return inst; }

        Nullable<IfcSlabTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSlabTypeEnum_); if (v >= 0) return (IfcSlabTypeEnum) v; else return Nullable<IfcSlabTypeEnum>(); }
        void put_PredefinedType(IfcSlabTypeEnum value) { TextValue val = IfcSlabTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSlippageConnectionCondition
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSlippageConnectionCondition : public virtual IfcStructuralConnectionCondition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSlippageConnectionCondition
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSlippageConnectionCondition(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSlippageConnectionCondition")
        {}

                /// <summary>
                /// Create new instace of IfcSlippageConnectionCondition and returns object of this C++ class to interact with
                /// </summary>
        static IfcSlippageConnectionCondition Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSlippageConnectionCondition"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_SlippageX() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SlippageX", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_SlippageX(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "SlippageX", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_SlippageY() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SlippageY", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_SlippageY(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "SlippageY", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_SlippageZ() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "SlippageZ", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_SlippageZ(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "SlippageZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSoundProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSoundProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSoundProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSoundProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSoundProperties")
        {}

                /// <summary>
                /// Create new instace of IfcSoundProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcSoundProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSoundProperties"); assert(inst); return inst; }

        Nullable<IfcBoolean> get_IsAttenuating() { IfcBoolean val = (IfcBoolean) 0; if (sdaiGetAttrBN(m_instance, "IsAttenuating", sdaiBOOLEAN, &val)) return val; else return Nullable<IfcBoolean>(); }
        void put_IsAttenuating(IfcBoolean value) { sdaiPutAttrBN(m_instance, "IsAttenuating", sdaiBOOLEAN, &value); }

        Nullable<IfcSoundScaleEnum> get_SoundScale() { int v = getENUM("SoundScale", IfcSoundScaleEnum_); if (v >= 0) return (IfcSoundScaleEnum) v; else return Nullable<IfcSoundScaleEnum>(); }
        void put_SoundScale(IfcSoundScaleEnum value) { TextValue val = IfcSoundScaleEnum_[(int) value]; sdaiPutAttrBN(m_instance, "SoundScale", sdaiENUM, val); }

        //TList may be ListOfIfcSoundValue or list of converible elements
        template <typename TList> void get_SoundValues(TList& lst) { ListOfIfcSoundValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SoundValues"); }

        //TList may be ListOfIfcSoundValue or list of converible elements
        template <typename TList> void put_SoundValues(TList& lst) { ListOfIfcSoundValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SoundValues"); }

        //TArrayElem[] may be IfcSoundValue[] or array of convertible elements
        template <typename TArrayElem> void put_SoundValues(TArrayElem arr[], size_t n) { ListOfIfcSoundValue lst; ArrayToList(arr, n, lst); put_SoundValues(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSoundValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSoundValue : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSoundValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSoundValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSoundValue")
        {}

                /// <summary>
                /// Create new instace of IfcSoundValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcSoundValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSoundValue"); assert(inst); return inst; }

        IfcTimeSeries get_SoundLevelTimeSeries();
        void put_SoundLevelTimeSeries(IfcTimeSeries inst);

        Nullable<IfcFrequencyMeasure> get_Frequency() { IfcFrequencyMeasure val = (IfcFrequencyMeasure) 0; if (sdaiGetAttrBN(m_instance, "Frequency", sdaiREAL, &val)) return val; else return Nullable<IfcFrequencyMeasure>(); }
        void put_Frequency(IfcFrequencyMeasure value) { sdaiPutAttrBN(m_instance, "Frequency", sdaiREAL, &value); }

        IfcDerivedMeasureValue_get get_SoundLevelSingleValue() { return IfcDerivedMeasureValue_get(m_instance, "SoundLevelSingleValue", NULL); }
        IfcDerivedMeasureValue_put put_SoundLevelSingleValue() { return IfcDerivedMeasureValue_put(m_instance, "SoundLevelSingleValue", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpace
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpace : public virtual IfcSpatialStructureElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpace
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpace(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpace")
        {}

                /// <summary>
                /// Create new instace of IfcSpace and returns object of this C++ class to interact with
                /// </summary>
        static IfcSpace Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSpace"); assert(inst); return inst; }

        Nullable<IfcInternalOrExternalEnum> get_InteriorOrExteriorSpace() { int v = getENUM("InteriorOrExteriorSpace", IfcInternalOrExternalEnum_); if (v >= 0) return (IfcInternalOrExternalEnum) v; else return Nullable<IfcInternalOrExternalEnum>(); }
        void put_InteriorOrExteriorSpace(IfcInternalOrExternalEnum value) { TextValue val = IfcInternalOrExternalEnum_[(int) value]; sdaiPutAttrBN(m_instance, "InteriorOrExteriorSpace", sdaiENUM, val); }

        Nullable<IfcLengthMeasure> get_ElevationWithFlooring() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ElevationWithFlooring", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_ElevationWithFlooring(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "ElevationWithFlooring", sdaiREAL, &value); }

        //TList may be SetOfIfcRelCoversSpaces or list of converible elements
        template <typename TList> void get_HasCoverings(TList& lst) { SetOfIfcRelCoversSpacesSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasCoverings"); }

        //TList may be SetOfIfcRelSpaceBoundary or list of converible elements
        template <typename TList> void get_BoundedBy(TList& lst) { SetOfIfcRelSpaceBoundarySerializer<TList> sr; sr.FromAttr(lst, m_instance, "BoundedBy"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpaceHeaterType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpaceHeaterType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpaceHeaterType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpaceHeaterType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpaceHeaterType")
        {}

                /// <summary>
                /// Create new instace of IfcSpaceHeaterType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSpaceHeaterType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSpaceHeaterType"); assert(inst); return inst; }

        Nullable<IfcSpaceHeaterTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSpaceHeaterTypeEnum_); if (v >= 0) return (IfcSpaceHeaterTypeEnum) v; else return Nullable<IfcSpaceHeaterTypeEnum>(); }
        void put_PredefinedType(IfcSpaceHeaterTypeEnum value) { TextValue val = IfcSpaceHeaterTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpaceProgram
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpaceProgram : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpaceProgram
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpaceProgram(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpaceProgram")
        {}

                /// <summary>
                /// Create new instace of IfcSpaceProgram and returns object of this C++ class to interact with
                /// </summary>
        static IfcSpaceProgram Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSpaceProgram"); assert(inst); return inst; }

        IfcIdentifier get_SpaceProgramIdentifier() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "SpaceProgramIdentifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_SpaceProgramIdentifier(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "SpaceProgramIdentifier", sdaiSTRING, value); }

        Nullable<IfcAreaMeasure> get_MaxRequiredArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaxRequiredArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_MaxRequiredArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "MaxRequiredArea", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_MinRequiredArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinRequiredArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_MinRequiredArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "MinRequiredArea", sdaiREAL, &value); }

        IfcSpatialStructureElement get_RequestedLocation();
        void put_RequestedLocation(IfcSpatialStructureElement inst);

        Nullable<IfcAreaMeasure> get_StandardRequiredArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "StandardRequiredArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_StandardRequiredArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "StandardRequiredArea", sdaiREAL, &value); }

        //TList may be SetOfIfcRelInteractionRequirements or list of converible elements
        template <typename TList> void get_HasInteractionReqsFrom(TList& lst) { SetOfIfcRelInteractionRequirementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasInteractionReqsFrom"); }

        //TList may be SetOfIfcRelInteractionRequirements or list of converible elements
        template <typename TList> void get_HasInteractionReqsTo(TList& lst) { SetOfIfcRelInteractionRequirementsSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasInteractionReqsTo"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpaceThermalLoadProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpaceThermalLoadProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpaceThermalLoadProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpaceThermalLoadProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpaceThermalLoadProperties")
        {}

                /// <summary>
                /// Create new instace of IfcSpaceThermalLoadProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcSpaceThermalLoadProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSpaceThermalLoadProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveRatioMeasure> get_ApplicableValueRatio() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ApplicableValueRatio", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_ApplicableValueRatio(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "ApplicableValueRatio", sdaiREAL, &value); }

        Nullable<IfcThermalLoadSourceEnum> get_ThermalLoadSource() { int v = getENUM("ThermalLoadSource", IfcThermalLoadSourceEnum_); if (v >= 0) return (IfcThermalLoadSourceEnum) v; else return Nullable<IfcThermalLoadSourceEnum>(); }
        void put_ThermalLoadSource(IfcThermalLoadSourceEnum value) { TextValue val = IfcThermalLoadSourceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ThermalLoadSource", sdaiENUM, val); }

        Nullable<IfcPropertySourceEnum> get_PropertySource() { int v = getENUM("PropertySource", IfcPropertySourceEnum_); if (v >= 0) return (IfcPropertySourceEnum) v; else return Nullable<IfcPropertySourceEnum>(); }
        void put_PropertySource(IfcPropertySourceEnum value) { TextValue val = IfcPropertySourceEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PropertySource", sdaiENUM, val); }

        IfcText get_SourceDescription() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "SourceDescription", sdaiSTRING, &val)) return val; else return NULL; }
        void put_SourceDescription(IfcText value) { sdaiPutAttrBN(m_instance, "SourceDescription", sdaiSTRING, value); }

        Nullable<IfcPowerMeasure> get_MaximumValue() { IfcPowerMeasure val = (IfcPowerMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaximumValue", sdaiREAL, &val)) return val; else return Nullable<IfcPowerMeasure>(); }
        void put_MaximumValue(IfcPowerMeasure value) { sdaiPutAttrBN(m_instance, "MaximumValue", sdaiREAL, &value); }

        Nullable<IfcPowerMeasure> get_MinimumValue() { IfcPowerMeasure val = (IfcPowerMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinimumValue", sdaiREAL, &val)) return val; else return Nullable<IfcPowerMeasure>(); }
        void put_MinimumValue(IfcPowerMeasure value) { sdaiPutAttrBN(m_instance, "MinimumValue", sdaiREAL, &value); }

        IfcTimeSeries get_ThermalLoadTimeSeriesValues();
        void put_ThermalLoadTimeSeriesValues(IfcTimeSeries inst);

        IfcLabel get_UserDefinedThermalLoadSource() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedThermalLoadSource", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedThermalLoadSource(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedThermalLoadSource", sdaiSTRING, value); }

        IfcLabel get_UserDefinedPropertySource() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedPropertySource", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedPropertySource(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedPropertySource", sdaiSTRING, value); }

        Nullable<IfcThermalLoadTypeEnum> get_ThermalLoadType() { int v = getENUM("ThermalLoadType", IfcThermalLoadTypeEnum_); if (v >= 0) return (IfcThermalLoadTypeEnum) v; else return Nullable<IfcThermalLoadTypeEnum>(); }
        void put_ThermalLoadType(IfcThermalLoadTypeEnum value) { TextValue val = IfcThermalLoadTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ThermalLoadType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpatialStructureElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpatialStructureElementType : public virtual IfcElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpatialStructureElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpatialStructureElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpatialStructureElementType")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSpaceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSpaceType : public virtual IfcSpatialStructureElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSpaceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSpaceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSpaceType")
        {}

                /// <summary>
                /// Create new instace of IfcSpaceType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSpaceType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSpaceType"); assert(inst); return inst; }

        Nullable<IfcSpaceTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSpaceTypeEnum_); if (v >= 0) return (IfcSpaceTypeEnum) v; else return Nullable<IfcSpaceTypeEnum>(); }
        void put_PredefinedType(IfcSpaceTypeEnum value) { TextValue val = IfcSpaceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSphere
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSphere : public virtual IfcCsgPrimitive3D
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSphere
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSphere(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSphere")
        {}

                /// <summary>
                /// Create new instace of IfcSphere and returns object of this C++ class to interact with
                /// </summary>
        static IfcSphere Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSphere"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStackTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStackTerminalType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStackTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStackTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStackTerminalType")
        {}

                /// <summary>
                /// Create new instace of IfcStackTerminalType and returns object of this C++ class to interact with
                /// </summary>
        static IfcStackTerminalType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStackTerminalType"); assert(inst); return inst; }

        Nullable<IfcStackTerminalTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcStackTerminalTypeEnum_); if (v >= 0) return (IfcStackTerminalTypeEnum) v; else return Nullable<IfcStackTerminalTypeEnum>(); }
        void put_PredefinedType(IfcStackTerminalTypeEnum value) { TextValue val = IfcStackTerminalTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStair
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStair : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStair
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStair(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStair")
        {}

                /// <summary>
                /// Create new instace of IfcStair and returns object of this C++ class to interact with
                /// </summary>
        static IfcStair Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStair"); assert(inst); return inst; }

        Nullable<IfcStairTypeEnum> get_ShapeType() { int v = getENUM("ShapeType", IfcStairTypeEnum_); if (v >= 0) return (IfcStairTypeEnum) v; else return Nullable<IfcStairTypeEnum>(); }
        void put_ShapeType(IfcStairTypeEnum value) { TextValue val = IfcStairTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ShapeType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStairFlight
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStairFlight : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStairFlight
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStairFlight(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStairFlight")
        {}

                /// <summary>
                /// Create new instace of IfcStairFlight and returns object of this C++ class to interact with
                /// </summary>
        static IfcStairFlight Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStairFlight"); assert(inst); return inst; }

        Nullable<IntValue> get_NumberOfRiser() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "NumberOfRiser", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_NumberOfRiser(IntValue value) { sdaiPutAttrBN(m_instance, "NumberOfRiser", sdaiINTEGER, &value); }

        Nullable<IntValue> get_NumberOfTreads() { IntValue val = (IntValue) 0; if (sdaiGetAttrBN(m_instance, "NumberOfTreads", sdaiINTEGER, &val)) return val; else return Nullable<IntValue>(); }
        void put_NumberOfTreads(IntValue value) { sdaiPutAttrBN(m_instance, "NumberOfTreads", sdaiINTEGER, &value); }

        Nullable<IfcPositiveLengthMeasure> get_RiserHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "RiserHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_RiserHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "RiserHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TreadLength() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TreadLength", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TreadLength(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TreadLength", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStairFlightType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStairFlightType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStairFlightType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStairFlightType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStairFlightType")
        {}

                /// <summary>
                /// Create new instace of IfcStairFlightType and returns object of this C++ class to interact with
                /// </summary>
        static IfcStairFlightType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStairFlightType"); assert(inst); return inst; }

        Nullable<IfcStairFlightTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcStairFlightTypeEnum_); if (v >= 0) return (IfcStairFlightTypeEnum) v; else return Nullable<IfcStairFlightTypeEnum>(); }
        void put_PredefinedType(IfcStairFlightTypeEnum value) { TextValue val = IfcStairFlightTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralActivity
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralActivity : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralActivity
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralActivity(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralActivity")
        {}


        IfcStructuralLoad get_AppliedLoad();
        void put_AppliedLoad(IfcStructuralLoad inst);

        Nullable<IfcGlobalOrLocalEnum> get_GlobalOrLocal() { int v = getENUM("GlobalOrLocal", IfcGlobalOrLocalEnum_); if (v >= 0) return (IfcGlobalOrLocalEnum) v; else return Nullable<IfcGlobalOrLocalEnum>(); }
        void put_GlobalOrLocal(IfcGlobalOrLocalEnum value) { TextValue val = IfcGlobalOrLocalEnum_[(int) value]; sdaiPutAttrBN(m_instance, "GlobalOrLocal", sdaiENUM, val); }

        IfcRelConnectsStructuralActivity get_AssignedToStructuralItem();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralAction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralAction : public virtual IfcStructuralActivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralAction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralAction")
        {}


        Nullable<bool> get_DestabilizingLoad() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "DestabilizingLoad", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_DestabilizingLoad(bool value) { sdaiPutAttrBN(m_instance, "DestabilizingLoad", sdaiBOOLEAN, &value); }

        IfcStructuralReaction get_CausedBy();
        void put_CausedBy(IfcStructuralReaction inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralAnalysisModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralAnalysisModel : public virtual IfcSystem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralAnalysisModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralAnalysisModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralAnalysisModel")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralAnalysisModel and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralAnalysisModel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralAnalysisModel"); assert(inst); return inst; }

        Nullable<IfcAnalysisModelTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcAnalysisModelTypeEnum_); if (v >= 0) return (IfcAnalysisModelTypeEnum) v; else return Nullable<IfcAnalysisModelTypeEnum>(); }
        void put_PredefinedType(IfcAnalysisModelTypeEnum value) { TextValue val = IfcAnalysisModelTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        IfcAxis2Placement3D get_OrientationOf2DPlane();
        void put_OrientationOf2DPlane(IfcAxis2Placement3D inst);

        //TList may be SetOfIfcStructuralLoadGroup or list of converible elements
        template <typename TList> void get_LoadedBy(TList& lst) { SetOfIfcStructuralLoadGroupSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LoadedBy"); }

        //TList may be SetOfIfcStructuralLoadGroup or list of converible elements
        template <typename TList> void put_LoadedBy(TList& lst) { SetOfIfcStructuralLoadGroupSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "LoadedBy"); }

        //TArrayElem[] may be IfcStructuralLoadGroup[] or array of convertible elements
        template <typename TArrayElem> void put_LoadedBy(TArrayElem arr[], size_t n) { SetOfIfcStructuralLoadGroup lst; ArrayToList(arr, n, lst); put_LoadedBy(lst); }

        //TList may be SetOfIfcStructuralResultGroup or list of converible elements
        template <typename TList> void get_HasResults(TList& lst) { SetOfIfcStructuralResultGroupSerializer<TList> sr; sr.FromAttr(lst, m_instance, "HasResults"); }

        //TList may be SetOfIfcStructuralResultGroup or list of converible elements
        template <typename TList> void put_HasResults(TList& lst) { SetOfIfcStructuralResultGroupSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "HasResults"); }

        //TArrayElem[] may be IfcStructuralResultGroup[] or array of convertible elements
        template <typename TArrayElem> void put_HasResults(TArrayElem arr[], size_t n) { SetOfIfcStructuralResultGroup lst; ArrayToList(arr, n, lst); put_HasResults(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralItem
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralItem : public virtual IfcProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralItem
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralItem(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralItem")
        {}


        //TList may be SetOfIfcRelConnectsStructuralActivity or list of converible elements
        template <typename TList> void get_AssignedStructuralActivity(TList& lst) { SetOfIfcRelConnectsStructuralActivitySerializer<TList> sr; sr.FromAttr(lst, m_instance, "AssignedStructuralActivity"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralConnection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralConnection : public virtual IfcStructuralItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralConnection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralConnection")
        {}


        IfcBoundaryCondition get_AppliedCondition();
        void put_AppliedCondition(IfcBoundaryCondition inst);

        //TList may be SetOfIfcRelConnectsStructuralMember or list of converible elements
        template <typename TList> void get_ConnectsStructuralMembers(TList& lst) { SetOfIfcRelConnectsStructuralMemberSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ConnectsStructuralMembers"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralCurveConnection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralCurveConnection : public virtual IfcStructuralConnection
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralCurveConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralCurveConnection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralCurveConnection")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralCurveConnection and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralCurveConnection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralCurveConnection"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralMember
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralMember : public virtual IfcStructuralItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralMember(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralMember")
        {}


        //TList may be SetOfIfcRelConnectsStructuralElement or list of converible elements
        template <typename TList> void get_ReferencesElement(TList& lst) { SetOfIfcRelConnectsStructuralElementSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ReferencesElement"); }

        //TList may be SetOfIfcRelConnectsStructuralMember or list of converible elements
        template <typename TList> void get_ConnectedBy(TList& lst) { SetOfIfcRelConnectsStructuralMemberSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ConnectedBy"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralCurveMember
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralCurveMember : public virtual IfcStructuralMember
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralCurveMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralCurveMember(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralCurveMember")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralCurveMember and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralCurveMember Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralCurveMember"); assert(inst); return inst; }

        Nullable<IfcStructuralCurveTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcStructuralCurveTypeEnum_); if (v >= 0) return (IfcStructuralCurveTypeEnum) v; else return Nullable<IfcStructuralCurveTypeEnum>(); }
        void put_PredefinedType(IfcStructuralCurveTypeEnum value) { TextValue val = IfcStructuralCurveTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralCurveMemberVarying
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralCurveMemberVarying : public virtual IfcStructuralCurveMember
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralCurveMemberVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralCurveMemberVarying(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralCurveMemberVarying")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralCurveMemberVarying and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralCurveMemberVarying Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralCurveMemberVarying"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLinearAction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLinearAction : public virtual IfcStructuralAction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLinearAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLinearAction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLinearAction")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLinearAction and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLinearAction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLinearAction"); assert(inst); return inst; }

        Nullable<IfcProjectedOrTrueLengthEnum> get_ProjectedOrTrue() { int v = getENUM("ProjectedOrTrue", IfcProjectedOrTrueLengthEnum_); if (v >= 0) return (IfcProjectedOrTrueLengthEnum) v; else return Nullable<IfcProjectedOrTrueLengthEnum>(); }
        void put_ProjectedOrTrue(IfcProjectedOrTrueLengthEnum value) { TextValue val = IfcProjectedOrTrueLengthEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ProjectedOrTrue", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLinearActionVarying
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLinearActionVarying : public virtual IfcStructuralLinearAction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLinearActionVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLinearActionVarying(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLinearActionVarying")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLinearActionVarying and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLinearActionVarying Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLinearActionVarying"); assert(inst); return inst; }

        IfcShapeAspect get_VaryingAppliedLoadLocation();
        void put_VaryingAppliedLoadLocation(IfcShapeAspect inst);

        //TList may be ListOfIfcStructuralLoad or list of converible elements
        template <typename TList> void get_SubsequentAppliedLoads(TList& lst) { ListOfIfcStructuralLoadSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SubsequentAppliedLoads"); }

        //TList may be ListOfIfcStructuralLoad or list of converible elements
        template <typename TList> void put_SubsequentAppliedLoads(TList& lst) { ListOfIfcStructuralLoadSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SubsequentAppliedLoads"); }

        //TArrayElem[] may be IfcStructuralLoad[] or array of convertible elements
        template <typename TArrayElem> void put_SubsequentAppliedLoads(TArrayElem arr[], size_t n) { ListOfIfcStructuralLoad lst; ArrayToList(arr, n, lst); put_SubsequentAppliedLoads(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoad
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoad : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoad
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoad(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoad")
        {}


        IfcLabel get_Name() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(IfcLabel value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadGroup
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadGroup : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadGroup(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadGroup")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadGroup and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadGroup Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadGroup"); assert(inst); return inst; }

        Nullable<IfcLoadGroupTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcLoadGroupTypeEnum_); if (v >= 0) return (IfcLoadGroupTypeEnum) v; else return Nullable<IfcLoadGroupTypeEnum>(); }
        void put_PredefinedType(IfcLoadGroupTypeEnum value) { TextValue val = IfcLoadGroupTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        Nullable<IfcActionTypeEnum> get_ActionType() { int v = getENUM("ActionType", IfcActionTypeEnum_); if (v >= 0) return (IfcActionTypeEnum) v; else return Nullable<IfcActionTypeEnum>(); }
        void put_ActionType(IfcActionTypeEnum value) { TextValue val = IfcActionTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ActionType", sdaiENUM, val); }

        Nullable<IfcActionSourceTypeEnum> get_ActionSource() { int v = getENUM("ActionSource", IfcActionSourceTypeEnum_); if (v >= 0) return (IfcActionSourceTypeEnum) v; else return Nullable<IfcActionSourceTypeEnum>(); }
        void put_ActionSource(IfcActionSourceTypeEnum value) { TextValue val = IfcActionSourceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ActionSource", sdaiENUM, val); }

        Nullable<IfcRatioMeasure> get_Coefficient() { IfcRatioMeasure val = (IfcRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Coefficient", sdaiREAL, &val)) return val; else return Nullable<IfcRatioMeasure>(); }
        void put_Coefficient(IfcRatioMeasure value) { sdaiPutAttrBN(m_instance, "Coefficient", sdaiREAL, &value); }

        IfcLabel get_Purpose() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Purpose(IfcLabel value) { sdaiPutAttrBN(m_instance, "Purpose", sdaiSTRING, value); }

        //TList may be SetOfIfcStructuralResultGroup or list of converible elements
        template <typename TList> void get_SourceOfResultGroup(TList& lst) { SetOfIfcStructuralResultGroupSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SourceOfResultGroup"); }

        //TList may be SetOfIfcStructuralAnalysisModel or list of converible elements
        template <typename TList> void get_LoadGroupFor(TList& lst) { SetOfIfcStructuralAnalysisModelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "LoadGroupFor"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadStatic
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadStatic : public virtual IfcStructuralLoad
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadStatic
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadStatic(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadStatic")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadLinearForce
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadLinearForce : public virtual IfcStructuralLoadStatic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadLinearForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadLinearForce(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadLinearForce")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadLinearForce and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadLinearForce Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadLinearForce"); assert(inst); return inst; }

        Nullable<IfcLinearForceMeasure> get_LinearForceX() { IfcLinearForceMeasure val = (IfcLinearForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearForceX", sdaiREAL, &val)) return val; else return Nullable<IfcLinearForceMeasure>(); }
        void put_LinearForceX(IfcLinearForceMeasure value) { sdaiPutAttrBN(m_instance, "LinearForceX", sdaiREAL, &value); }

        Nullable<IfcLinearForceMeasure> get_LinearForceY() { IfcLinearForceMeasure val = (IfcLinearForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearForceY", sdaiREAL, &val)) return val; else return Nullable<IfcLinearForceMeasure>(); }
        void put_LinearForceY(IfcLinearForceMeasure value) { sdaiPutAttrBN(m_instance, "LinearForceY", sdaiREAL, &value); }

        Nullable<IfcLinearForceMeasure> get_LinearForceZ() { IfcLinearForceMeasure val = (IfcLinearForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearForceZ", sdaiREAL, &val)) return val; else return Nullable<IfcLinearForceMeasure>(); }
        void put_LinearForceZ(IfcLinearForceMeasure value) { sdaiPutAttrBN(m_instance, "LinearForceZ", sdaiREAL, &value); }

        Nullable<IfcLinearMomentMeasure> get_LinearMomentX() { IfcLinearMomentMeasure val = (IfcLinearMomentMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearMomentX", sdaiREAL, &val)) return val; else return Nullable<IfcLinearMomentMeasure>(); }
        void put_LinearMomentX(IfcLinearMomentMeasure value) { sdaiPutAttrBN(m_instance, "LinearMomentX", sdaiREAL, &value); }

        Nullable<IfcLinearMomentMeasure> get_LinearMomentY() { IfcLinearMomentMeasure val = (IfcLinearMomentMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearMomentY", sdaiREAL, &val)) return val; else return Nullable<IfcLinearMomentMeasure>(); }
        void put_LinearMomentY(IfcLinearMomentMeasure value) { sdaiPutAttrBN(m_instance, "LinearMomentY", sdaiREAL, &value); }

        Nullable<IfcLinearMomentMeasure> get_LinearMomentZ() { IfcLinearMomentMeasure val = (IfcLinearMomentMeasure) 0; if (sdaiGetAttrBN(m_instance, "LinearMomentZ", sdaiREAL, &val)) return val; else return Nullable<IfcLinearMomentMeasure>(); }
        void put_LinearMomentZ(IfcLinearMomentMeasure value) { sdaiPutAttrBN(m_instance, "LinearMomentZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadPlanarForce
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadPlanarForce : public virtual IfcStructuralLoadStatic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadPlanarForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadPlanarForce(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadPlanarForce")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadPlanarForce and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadPlanarForce Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadPlanarForce"); assert(inst); return inst; }

        Nullable<IfcPlanarForceMeasure> get_PlanarForceX() { IfcPlanarForceMeasure val = (IfcPlanarForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "PlanarForceX", sdaiREAL, &val)) return val; else return Nullable<IfcPlanarForceMeasure>(); }
        void put_PlanarForceX(IfcPlanarForceMeasure value) { sdaiPutAttrBN(m_instance, "PlanarForceX", sdaiREAL, &value); }

        Nullable<IfcPlanarForceMeasure> get_PlanarForceY() { IfcPlanarForceMeasure val = (IfcPlanarForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "PlanarForceY", sdaiREAL, &val)) return val; else return Nullable<IfcPlanarForceMeasure>(); }
        void put_PlanarForceY(IfcPlanarForceMeasure value) { sdaiPutAttrBN(m_instance, "PlanarForceY", sdaiREAL, &value); }

        Nullable<IfcPlanarForceMeasure> get_PlanarForceZ() { IfcPlanarForceMeasure val = (IfcPlanarForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "PlanarForceZ", sdaiREAL, &val)) return val; else return Nullable<IfcPlanarForceMeasure>(); }
        void put_PlanarForceZ(IfcPlanarForceMeasure value) { sdaiPutAttrBN(m_instance, "PlanarForceZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleDisplacement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadSingleDisplacement : public virtual IfcStructuralLoadStatic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadSingleDisplacement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadSingleDisplacement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadSingleDisplacement")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadSingleDisplacement and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadSingleDisplacement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleDisplacement"); assert(inst); return inst; }

        Nullable<IfcLengthMeasure> get_DisplacementX() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "DisplacementX", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_DisplacementX(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "DisplacementX", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_DisplacementY() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "DisplacementY", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_DisplacementY(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "DisplacementY", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_DisplacementZ() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "DisplacementZ", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_DisplacementZ(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "DisplacementZ", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_RotationalDisplacementRX() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalDisplacementRX", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_RotationalDisplacementRX(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "RotationalDisplacementRX", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_RotationalDisplacementRY() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalDisplacementRY", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_RotationalDisplacementRY(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "RotationalDisplacementRY", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_RotationalDisplacementRZ() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "RotationalDisplacementRZ", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_RotationalDisplacementRZ(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "RotationalDisplacementRZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleDisplacementDistortion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadSingleDisplacementDistortion : public virtual IfcStructuralLoadSingleDisplacement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadSingleDisplacementDistortion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadSingleDisplacementDistortion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadSingleDisplacementDistortion")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadSingleDisplacementDistortion and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadSingleDisplacementDistortion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleDisplacementDistortion"); assert(inst); return inst; }

        Nullable<IfcCurvatureMeasure> get_Distortion() { IfcCurvatureMeasure val = (IfcCurvatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "Distortion", sdaiREAL, &val)) return val; else return Nullable<IfcCurvatureMeasure>(); }
        void put_Distortion(IfcCurvatureMeasure value) { sdaiPutAttrBN(m_instance, "Distortion", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleForce
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadSingleForce : public virtual IfcStructuralLoadStatic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadSingleForce
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadSingleForce(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadSingleForce")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadSingleForce and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadSingleForce Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleForce"); assert(inst); return inst; }

        Nullable<IfcForceMeasure> get_ForceX() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "ForceX", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_ForceX(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "ForceX", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_ForceY() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "ForceY", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_ForceY(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "ForceY", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_ForceZ() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "ForceZ", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_ForceZ(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "ForceZ", sdaiREAL, &value); }

        Nullable<IfcTorqueMeasure> get_MomentX() { IfcTorqueMeasure val = (IfcTorqueMeasure) 0; if (sdaiGetAttrBN(m_instance, "MomentX", sdaiREAL, &val)) return val; else return Nullable<IfcTorqueMeasure>(); }
        void put_MomentX(IfcTorqueMeasure value) { sdaiPutAttrBN(m_instance, "MomentX", sdaiREAL, &value); }

        Nullable<IfcTorqueMeasure> get_MomentY() { IfcTorqueMeasure val = (IfcTorqueMeasure) 0; if (sdaiGetAttrBN(m_instance, "MomentY", sdaiREAL, &val)) return val; else return Nullable<IfcTorqueMeasure>(); }
        void put_MomentY(IfcTorqueMeasure value) { sdaiPutAttrBN(m_instance, "MomentY", sdaiREAL, &value); }

        Nullable<IfcTorqueMeasure> get_MomentZ() { IfcTorqueMeasure val = (IfcTorqueMeasure) 0; if (sdaiGetAttrBN(m_instance, "MomentZ", sdaiREAL, &val)) return val; else return Nullable<IfcTorqueMeasure>(); }
        void put_MomentZ(IfcTorqueMeasure value) { sdaiPutAttrBN(m_instance, "MomentZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadSingleForceWarping
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadSingleForceWarping : public virtual IfcStructuralLoadSingleForce
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadSingleForceWarping
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadSingleForceWarping(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadSingleForceWarping")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadSingleForceWarping and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadSingleForceWarping Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadSingleForceWarping"); assert(inst); return inst; }

        Nullable<IfcWarpingMomentMeasure> get_WarpingMoment() { IfcWarpingMomentMeasure val = (IfcWarpingMomentMeasure) 0; if (sdaiGetAttrBN(m_instance, "WarpingMoment", sdaiREAL, &val)) return val; else return Nullable<IfcWarpingMomentMeasure>(); }
        void put_WarpingMoment(IfcWarpingMomentMeasure value) { sdaiPutAttrBN(m_instance, "WarpingMoment", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralLoadTemperature
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralLoadTemperature : public virtual IfcStructuralLoadStatic
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralLoadTemperature
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralLoadTemperature(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralLoadTemperature")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralLoadTemperature and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralLoadTemperature Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralLoadTemperature"); assert(inst); return inst; }

        Nullable<IfcThermodynamicTemperatureMeasure> get_DeltaT_Constant() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "DeltaT_Constant", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_DeltaT_Constant(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "DeltaT_Constant", sdaiREAL, &value); }

        Nullable<IfcThermodynamicTemperatureMeasure> get_DeltaT_Y() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "DeltaT_Y", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_DeltaT_Y(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "DeltaT_Y", sdaiREAL, &value); }

        Nullable<IfcThermodynamicTemperatureMeasure> get_DeltaT_Z() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "DeltaT_Z", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_DeltaT_Z(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "DeltaT_Z", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralPlanarAction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralPlanarAction : public virtual IfcStructuralAction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralPlanarAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralPlanarAction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralPlanarAction")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralPlanarAction and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralPlanarAction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralPlanarAction"); assert(inst); return inst; }

        Nullable<IfcProjectedOrTrueLengthEnum> get_ProjectedOrTrue() { int v = getENUM("ProjectedOrTrue", IfcProjectedOrTrueLengthEnum_); if (v >= 0) return (IfcProjectedOrTrueLengthEnum) v; else return Nullable<IfcProjectedOrTrueLengthEnum>(); }
        void put_ProjectedOrTrue(IfcProjectedOrTrueLengthEnum value) { TextValue val = IfcProjectedOrTrueLengthEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ProjectedOrTrue", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralPlanarActionVarying
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralPlanarActionVarying : public virtual IfcStructuralPlanarAction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralPlanarActionVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralPlanarActionVarying(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralPlanarActionVarying")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralPlanarActionVarying and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralPlanarActionVarying Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralPlanarActionVarying"); assert(inst); return inst; }

        IfcShapeAspect get_VaryingAppliedLoadLocation();
        void put_VaryingAppliedLoadLocation(IfcShapeAspect inst);

        //TList may be ListOfIfcStructuralLoad or list of converible elements
        template <typename TList> void get_SubsequentAppliedLoads(TList& lst) { ListOfIfcStructuralLoadSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SubsequentAppliedLoads"); }

        //TList may be ListOfIfcStructuralLoad or list of converible elements
        template <typename TList> void put_SubsequentAppliedLoads(TList& lst) { ListOfIfcStructuralLoadSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SubsequentAppliedLoads"); }

        //TArrayElem[] may be IfcStructuralLoad[] or array of convertible elements
        template <typename TArrayElem> void put_SubsequentAppliedLoads(TArrayElem arr[], size_t n) { ListOfIfcStructuralLoad lst; ArrayToList(arr, n, lst); put_SubsequentAppliedLoads(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralPointAction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralPointAction : public virtual IfcStructuralAction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralPointAction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralPointAction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralPointAction")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralPointAction and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralPointAction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralPointAction"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralPointConnection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralPointConnection : public virtual IfcStructuralConnection
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralPointConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralPointConnection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralPointConnection")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralPointConnection and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralPointConnection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralPointConnection"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralReaction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralReaction : public virtual IfcStructuralActivity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralReaction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralReaction")
        {}


        //TList may be SetOfIfcStructuralAction or list of converible elements
        template <typename TList> void get_Causes(TList& lst) { SetOfIfcStructuralActionSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Causes"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralPointReaction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralPointReaction : public virtual IfcStructuralReaction
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralPointReaction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralPointReaction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralPointReaction")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralPointReaction and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralPointReaction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralPointReaction"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralProfileProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralProfileProperties : public virtual IfcGeneralProfileProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralProfileProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralProfileProperties")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralProfileProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralProfileProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralProfileProperties"); assert(inst); return inst; }

        Nullable<IfcMomentOfInertiaMeasure> get_TorsionalConstantX() { IfcMomentOfInertiaMeasure val = (IfcMomentOfInertiaMeasure) 0; if (sdaiGetAttrBN(m_instance, "TorsionalConstantX", sdaiREAL, &val)) return val; else return Nullable<IfcMomentOfInertiaMeasure>(); }
        void put_TorsionalConstantX(IfcMomentOfInertiaMeasure value) { sdaiPutAttrBN(m_instance, "TorsionalConstantX", sdaiREAL, &value); }

        Nullable<IfcMomentOfInertiaMeasure> get_MomentOfInertiaYZ() { IfcMomentOfInertiaMeasure val = (IfcMomentOfInertiaMeasure) 0; if (sdaiGetAttrBN(m_instance, "MomentOfInertiaYZ", sdaiREAL, &val)) return val; else return Nullable<IfcMomentOfInertiaMeasure>(); }
        void put_MomentOfInertiaYZ(IfcMomentOfInertiaMeasure value) { sdaiPutAttrBN(m_instance, "MomentOfInertiaYZ", sdaiREAL, &value); }

        Nullable<IfcMomentOfInertiaMeasure> get_MomentOfInertiaY() { IfcMomentOfInertiaMeasure val = (IfcMomentOfInertiaMeasure) 0; if (sdaiGetAttrBN(m_instance, "MomentOfInertiaY", sdaiREAL, &val)) return val; else return Nullable<IfcMomentOfInertiaMeasure>(); }
        void put_MomentOfInertiaY(IfcMomentOfInertiaMeasure value) { sdaiPutAttrBN(m_instance, "MomentOfInertiaY", sdaiREAL, &value); }

        Nullable<IfcMomentOfInertiaMeasure> get_MomentOfInertiaZ() { IfcMomentOfInertiaMeasure val = (IfcMomentOfInertiaMeasure) 0; if (sdaiGetAttrBN(m_instance, "MomentOfInertiaZ", sdaiREAL, &val)) return val; else return Nullable<IfcMomentOfInertiaMeasure>(); }
        void put_MomentOfInertiaZ(IfcMomentOfInertiaMeasure value) { sdaiPutAttrBN(m_instance, "MomentOfInertiaZ", sdaiREAL, &value); }

        Nullable<IfcWarpingConstantMeasure> get_WarpingConstant() { IfcWarpingConstantMeasure val = (IfcWarpingConstantMeasure) 0; if (sdaiGetAttrBN(m_instance, "WarpingConstant", sdaiREAL, &val)) return val; else return Nullable<IfcWarpingConstantMeasure>(); }
        void put_WarpingConstant(IfcWarpingConstantMeasure value) { sdaiPutAttrBN(m_instance, "WarpingConstant", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_ShearCentreZ() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearCentreZ", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_ShearCentreZ(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "ShearCentreZ", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_ShearCentreY() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearCentreY", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_ShearCentreY(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "ShearCentreY", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_ShearDeformationAreaZ() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearDeformationAreaZ", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_ShearDeformationAreaZ(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "ShearDeformationAreaZ", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_ShearDeformationAreaY() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearDeformationAreaY", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_ShearDeformationAreaY(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "ShearDeformationAreaY", sdaiREAL, &value); }

        Nullable<IfcSectionModulusMeasure> get_MaximumSectionModulusY() { IfcSectionModulusMeasure val = (IfcSectionModulusMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaximumSectionModulusY", sdaiREAL, &val)) return val; else return Nullable<IfcSectionModulusMeasure>(); }
        void put_MaximumSectionModulusY(IfcSectionModulusMeasure value) { sdaiPutAttrBN(m_instance, "MaximumSectionModulusY", sdaiREAL, &value); }

        Nullable<IfcSectionModulusMeasure> get_MinimumSectionModulusY() { IfcSectionModulusMeasure val = (IfcSectionModulusMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinimumSectionModulusY", sdaiREAL, &val)) return val; else return Nullable<IfcSectionModulusMeasure>(); }
        void put_MinimumSectionModulusY(IfcSectionModulusMeasure value) { sdaiPutAttrBN(m_instance, "MinimumSectionModulusY", sdaiREAL, &value); }

        Nullable<IfcSectionModulusMeasure> get_MaximumSectionModulusZ() { IfcSectionModulusMeasure val = (IfcSectionModulusMeasure) 0; if (sdaiGetAttrBN(m_instance, "MaximumSectionModulusZ", sdaiREAL, &val)) return val; else return Nullable<IfcSectionModulusMeasure>(); }
        void put_MaximumSectionModulusZ(IfcSectionModulusMeasure value) { sdaiPutAttrBN(m_instance, "MaximumSectionModulusZ", sdaiREAL, &value); }

        Nullable<IfcSectionModulusMeasure> get_MinimumSectionModulusZ() { IfcSectionModulusMeasure val = (IfcSectionModulusMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinimumSectionModulusZ", sdaiREAL, &val)) return val; else return Nullable<IfcSectionModulusMeasure>(); }
        void put_MinimumSectionModulusZ(IfcSectionModulusMeasure value) { sdaiPutAttrBN(m_instance, "MinimumSectionModulusZ", sdaiREAL, &value); }

        Nullable<IfcSectionModulusMeasure> get_TorsionalSectionModulus() { IfcSectionModulusMeasure val = (IfcSectionModulusMeasure) 0; if (sdaiGetAttrBN(m_instance, "TorsionalSectionModulus", sdaiREAL, &val)) return val; else return Nullable<IfcSectionModulusMeasure>(); }
        void put_TorsionalSectionModulus(IfcSectionModulusMeasure value) { sdaiPutAttrBN(m_instance, "TorsionalSectionModulus", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_CentreOfGravityInX() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_CentreOfGravityInX(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_CentreOfGravityInY() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_CentreOfGravityInY(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralResultGroup
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralResultGroup : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralResultGroup
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralResultGroup(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralResultGroup")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralResultGroup and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralResultGroup Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralResultGroup"); assert(inst); return inst; }

        Nullable<IfcAnalysisTheoryTypeEnum> get_TheoryType() { int v = getENUM("TheoryType", IfcAnalysisTheoryTypeEnum_); if (v >= 0) return (IfcAnalysisTheoryTypeEnum) v; else return Nullable<IfcAnalysisTheoryTypeEnum>(); }
        void put_TheoryType(IfcAnalysisTheoryTypeEnum value) { TextValue val = IfcAnalysisTheoryTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "TheoryType", sdaiENUM, val); }

        IfcStructuralLoadGroup get_ResultForLoadGroup();
        void put_ResultForLoadGroup(IfcStructuralLoadGroup inst);

        Nullable<bool> get_IsLinear() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "IsLinear", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_IsLinear(bool value) { sdaiPutAttrBN(m_instance, "IsLinear", sdaiBOOLEAN, &value); }

        //TList may be SetOfIfcStructuralAnalysisModel or list of converible elements
        template <typename TList> void get_ResultGroupFor(TList& lst) { SetOfIfcStructuralAnalysisModelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ResultGroupFor"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralSteelProfileProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralSteelProfileProperties : public virtual IfcStructuralProfileProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralSteelProfileProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralSteelProfileProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralSteelProfileProperties")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralSteelProfileProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralSteelProfileProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralSteelProfileProperties"); assert(inst); return inst; }

        Nullable<IfcAreaMeasure> get_ShearAreaZ() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearAreaZ", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_ShearAreaZ(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "ShearAreaZ", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_ShearAreaY() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "ShearAreaY", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_ShearAreaY(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "ShearAreaY", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_PlasticShapeFactorY() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "PlasticShapeFactorY", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_PlasticShapeFactorY(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "PlasticShapeFactorY", sdaiREAL, &value); }

        Nullable<IfcPositiveRatioMeasure> get_PlasticShapeFactorZ() { IfcPositiveRatioMeasure val = (IfcPositiveRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "PlasticShapeFactorZ", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveRatioMeasure>(); }
        void put_PlasticShapeFactorZ(IfcPositiveRatioMeasure value) { sdaiPutAttrBN(m_instance, "PlasticShapeFactorZ", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceConnection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralSurfaceConnection : public virtual IfcStructuralConnection
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralSurfaceConnection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralSurfaceConnection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralSurfaceConnection")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralSurfaceConnection and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralSurfaceConnection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralSurfaceConnection"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceMember
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralSurfaceMember : public virtual IfcStructuralMember
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralSurfaceMember
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralSurfaceMember(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralSurfaceMember")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralSurfaceMember and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralSurfaceMember Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralSurfaceMember"); assert(inst); return inst; }

        Nullable<IfcStructuralSurfaceTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcStructuralSurfaceTypeEnum_); if (v >= 0) return (IfcStructuralSurfaceTypeEnum) v; else return Nullable<IfcStructuralSurfaceTypeEnum>(); }
        void put_PredefinedType(IfcStructuralSurfaceTypeEnum value) { TextValue val = IfcStructuralSurfaceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        Nullable<IfcPositiveLengthMeasure> get_Thickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Thickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Thickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Thickness", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuralSurfaceMemberVarying
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuralSurfaceMemberVarying : public virtual IfcStructuralSurfaceMember
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuralSurfaceMemberVarying
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuralSurfaceMemberVarying(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuralSurfaceMemberVarying")
        {}

                /// <summary>
                /// Create new instace of IfcStructuralSurfaceMemberVarying and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuralSurfaceMemberVarying Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuralSurfaceMemberVarying"); assert(inst); return inst; }

        //TList may be ListOfIfcPositiveLengthMeasure or list of converible elements
        template <typename TList> void get_SubsequentThickness(TList& lst) { ListOfIfcPositiveLengthMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "SubsequentThickness"); }

        //TList may be ListOfIfcPositiveLengthMeasure or list of converible elements
        template <typename TList> void put_SubsequentThickness(TList& lst) { ListOfIfcPositiveLengthMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "SubsequentThickness"); }

        //TArrayElem[] may be IfcPositiveLengthMeasure[] or array of convertible elements
        template <typename TArrayElem> void put_SubsequentThickness(TArrayElem arr[], size_t n) { ListOfIfcPositiveLengthMeasure lst; ArrayToList(arr, n, lst); put_SubsequentThickness(lst); }

        IfcShapeAspect get_VaryingThicknessLocation();
        void put_VaryingThicknessLocation(IfcShapeAspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStructuredDimensionCallout
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStructuredDimensionCallout : public virtual IfcDraughtingCallout
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStructuredDimensionCallout
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStructuredDimensionCallout(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStructuredDimensionCallout")
        {}

                /// <summary>
                /// Create new instace of IfcStructuredDimensionCallout and returns object of this C++ class to interact with
                /// </summary>
        static IfcStructuredDimensionCallout Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStructuredDimensionCallout"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStyleModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStyleModel : public virtual IfcRepresentation
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStyleModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStyleModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStyleModel")
        {}

    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcStyledRepresentation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcStyledRepresentation : public virtual IfcStyleModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcStyledRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcStyledRepresentation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcStyledRepresentation")
        {}

                /// <summary>
                /// Create new instace of IfcStyledRepresentation and returns object of this C++ class to interact with
                /// </summary>
        static IfcStyledRepresentation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcStyledRepresentation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSubContractResource
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSubContractResource : public virtual IfcConstructionResource
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSubContractResource
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSubContractResource(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSubContractResource")
        {}

                /// <summary>
                /// Create new instace of IfcSubContractResource and returns object of this C++ class to interact with
                /// </summary>
        static IfcSubContractResource Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSubContractResource"); assert(inst); return inst; }

        IfcActorSelect_get get_SubContractor() { return IfcActorSelect_get(m_instance, "SubContractor", NULL); }
        IfcActorSelect_put put_SubContractor() { return IfcActorSelect_put(m_instance, "SubContractor", NULL); }

        IfcText get_JobDescription() { IfcText val = NULL; if (sdaiGetAttrBN(m_instance, "JobDescription", sdaiSTRING, &val)) return val; else return NULL; }
        void put_JobDescription(IfcText value) { sdaiPutAttrBN(m_instance, "JobDescription", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSubedge
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSubedge : public virtual IfcEdge
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSubedge
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSubedge(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSubedge")
        {}

                /// <summary>
                /// Create new instace of IfcSubedge and returns object of this C++ class to interact with
                /// </summary>
        static IfcSubedge Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSubedge"); assert(inst); return inst; }

        IfcEdge get_ParentEdge();
        void put_ParentEdge(IfcEdge inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceCurveSweptAreaSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceCurveSweptAreaSolid : public virtual IfcSweptAreaSolid
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceCurveSweptAreaSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceCurveSweptAreaSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceCurveSweptAreaSolid")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceCurveSweptAreaSolid and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceCurveSweptAreaSolid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceCurveSweptAreaSolid"); assert(inst); return inst; }

        IfcCurve get_Directrix();
        void put_Directrix(IfcCurve inst);

        Nullable<IfcParameterValue> get_StartParam() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "StartParam", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_StartParam(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "StartParam", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_EndParam() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "EndParam", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_EndParam(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "EndParam", sdaiREAL, &value); }

        IfcSurface get_ReferenceSurface();
        void put_ReferenceSurface(IfcSurface inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSweptSurface
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSweptSurface : public virtual IfcSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSweptSurface
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSweptSurface(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSweptSurface")
        {}


        IfcProfileDef get_SweptCurve();
        void put_SweptCurve(IfcProfileDef inst);

        IfcAxis2Placement3D get_Position();
        void put_Position(IfcAxis2Placement3D inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceOfLinearExtrusion
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceOfLinearExtrusion : public virtual IfcSweptSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceOfLinearExtrusion
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceOfLinearExtrusion(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceOfLinearExtrusion")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceOfLinearExtrusion and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceOfLinearExtrusion Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceOfLinearExtrusion"); assert(inst); return inst; }

        IfcDirection get_ExtrudedDirection();
        void put_ExtrudedDirection(IfcDirection inst);

        Nullable<IfcLengthMeasure> get_Depth() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_Depth(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceOfRevolution
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceOfRevolution : public virtual IfcSweptSurface
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceOfRevolution
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceOfRevolution(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceOfRevolution")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceOfRevolution and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceOfRevolution Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceOfRevolution"); assert(inst); return inst; }

        IfcAxis1Placement get_AxisPosition();
        void put_AxisPosition(IfcAxis1Placement inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceStyle : public virtual IfcPresentationStyle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceStyle")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceStyle"); assert(inst); return inst; }

        Nullable<IfcSurfaceSide> get_Side() { int v = getENUM("Side", IfcSurfaceSide_); if (v >= 0) return (IfcSurfaceSide) v; else return Nullable<IfcSurfaceSide>(); }
        void put_Side(IfcSurfaceSide value) { TextValue val = IfcSurfaceSide_[(int) value]; sdaiPutAttrBN(m_instance, "Side", sdaiENUM, val); }

        //TList may be SetOfIfcSurfaceStyleElementSelect or list of converible elements
        template <typename TList> void get_Styles(TList& lst) { SetOfIfcSurfaceStyleElementSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Styles"); }

        //TList may be SetOfIfcSurfaceStyleElementSelect or list of converible elements
        template <typename TList> void put_Styles(TList& lst) { SetOfIfcSurfaceStyleElementSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Styles"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceStyleLighting
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceStyleLighting : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceStyleLighting
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceStyleLighting(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceStyleLighting")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceStyleLighting and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceStyleLighting Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceStyleLighting"); assert(inst); return inst; }

        IfcColourRgb get_DiffuseTransmissionColour();
        void put_DiffuseTransmissionColour(IfcColourRgb inst);

        IfcColourRgb get_DiffuseReflectionColour();
        void put_DiffuseReflectionColour(IfcColourRgb inst);

        IfcColourRgb get_TransmissionColour();
        void put_TransmissionColour(IfcColourRgb inst);

        IfcColourRgb get_ReflectanceColour();
        void put_ReflectanceColour(IfcColourRgb inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceStyleRefraction
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceStyleRefraction : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceStyleRefraction
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceStyleRefraction(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceStyleRefraction")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceStyleRefraction and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceStyleRefraction Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceStyleRefraction"); assert(inst); return inst; }

        Nullable<IfcReal> get_RefractionIndex() { IfcReal val = (IfcReal) 0; if (sdaiGetAttrBN(m_instance, "RefractionIndex", sdaiREAL, &val)) return val; else return Nullable<IfcReal>(); }
        void put_RefractionIndex(IfcReal value) { sdaiPutAttrBN(m_instance, "RefractionIndex", sdaiREAL, &value); }

        Nullable<IfcReal> get_DispersionFactor() { IfcReal val = (IfcReal) 0; if (sdaiGetAttrBN(m_instance, "DispersionFactor", sdaiREAL, &val)) return val; else return Nullable<IfcReal>(); }
        void put_DispersionFactor(IfcReal value) { sdaiPutAttrBN(m_instance, "DispersionFactor", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceStyleShading
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceStyleShading : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceStyleShading
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceStyleShading(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceStyleShading")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceStyleShading and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceStyleShading Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceStyleShading"); assert(inst); return inst; }

        IfcColourRgb get_SurfaceColour();
        void put_SurfaceColour(IfcColourRgb inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceStyleRendering
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceStyleRendering : public virtual IfcSurfaceStyleShading
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceStyleRendering
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceStyleRendering(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceStyleRendering")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceStyleRendering and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceStyleRendering Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceStyleRendering"); assert(inst); return inst; }

        Nullable<IfcNormalisedRatioMeasure> get_Transparency() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "Transparency", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_Transparency(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "Transparency", sdaiREAL, &value); }

        IfcColourOrFactor_get get_DiffuseColour() { return IfcColourOrFactor_get(m_instance, "DiffuseColour", NULL); }
        IfcColourOrFactor_put put_DiffuseColour() { return IfcColourOrFactor_put(m_instance, "DiffuseColour", NULL); }

        IfcColourOrFactor_get get_TransmissionColour() { return IfcColourOrFactor_get(m_instance, "TransmissionColour", NULL); }
        IfcColourOrFactor_put put_TransmissionColour() { return IfcColourOrFactor_put(m_instance, "TransmissionColour", NULL); }

        IfcColourOrFactor_get get_DiffuseTransmissionColour() { return IfcColourOrFactor_get(m_instance, "DiffuseTransmissionColour", NULL); }
        IfcColourOrFactor_put put_DiffuseTransmissionColour() { return IfcColourOrFactor_put(m_instance, "DiffuseTransmissionColour", NULL); }

        IfcColourOrFactor_get get_ReflectionColour() { return IfcColourOrFactor_get(m_instance, "ReflectionColour", NULL); }
        IfcColourOrFactor_put put_ReflectionColour() { return IfcColourOrFactor_put(m_instance, "ReflectionColour", NULL); }

        IfcColourOrFactor_get get_SpecularColour() { return IfcColourOrFactor_get(m_instance, "SpecularColour", NULL); }
        IfcColourOrFactor_put put_SpecularColour() { return IfcColourOrFactor_put(m_instance, "SpecularColour", NULL); }

        IfcSpecularHighlightSelect_get get_SpecularHighlight() { return IfcSpecularHighlightSelect_get(m_instance, "SpecularHighlight", NULL); }
        IfcSpecularHighlightSelect_put put_SpecularHighlight() { return IfcSpecularHighlightSelect_put(m_instance, "SpecularHighlight", NULL); }

        Nullable<IfcReflectanceMethodEnum> get_ReflectanceMethod() { int v = getENUM("ReflectanceMethod", IfcReflectanceMethodEnum_); if (v >= 0) return (IfcReflectanceMethodEnum) v; else return Nullable<IfcReflectanceMethodEnum>(); }
        void put_ReflectanceMethod(IfcReflectanceMethodEnum value) { TextValue val = IfcReflectanceMethodEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ReflectanceMethod", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSurfaceStyleWithTextures
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSurfaceStyleWithTextures : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSurfaceStyleWithTextures
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSurfaceStyleWithTextures(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSurfaceStyleWithTextures")
        {}

                /// <summary>
                /// Create new instace of IfcSurfaceStyleWithTextures and returns object of this C++ class to interact with
                /// </summary>
        static IfcSurfaceStyleWithTextures Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSurfaceStyleWithTextures"); assert(inst); return inst; }

        //TList may be ListOfIfcSurfaceTexture or list of converible elements
        template <typename TList> void get_Textures(TList& lst) { ListOfIfcSurfaceTextureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Textures"); }

        //TList may be ListOfIfcSurfaceTexture or list of converible elements
        template <typename TList> void put_Textures(TList& lst) { ListOfIfcSurfaceTextureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Textures"); }

        //TArrayElem[] may be IfcSurfaceTexture[] or array of convertible elements
        template <typename TArrayElem> void put_Textures(TArrayElem arr[], size_t n) { ListOfIfcSurfaceTexture lst; ArrayToList(arr, n, lst); put_Textures(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSweptDiskSolid
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSweptDiskSolid : public virtual IfcSolidModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSweptDiskSolid
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSweptDiskSolid(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSweptDiskSolid")
        {}

                /// <summary>
                /// Create new instace of IfcSweptDiskSolid and returns object of this C++ class to interact with
                /// </summary>
        static IfcSweptDiskSolid Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSweptDiskSolid"); assert(inst); return inst; }

        IfcCurve get_Directrix();
        void put_Directrix(IfcCurve inst);

        Nullable<IfcPositiveLengthMeasure> get_Radius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Radius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Radius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Radius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_InnerRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "InnerRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_InnerRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "InnerRadius", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_StartParam() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "StartParam", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_StartParam(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "StartParam", sdaiREAL, &value); }

        Nullable<IfcParameterValue> get_EndParam() { IfcParameterValue val = (IfcParameterValue) 0; if (sdaiGetAttrBN(m_instance, "EndParam", sdaiREAL, &val)) return val; else return Nullable<IfcParameterValue>(); }
        void put_EndParam(IfcParameterValue value) { sdaiPutAttrBN(m_instance, "EndParam", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSwitchingDeviceType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSwitchingDeviceType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSwitchingDeviceType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSwitchingDeviceType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSwitchingDeviceType")
        {}

                /// <summary>
                /// Create new instace of IfcSwitchingDeviceType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSwitchingDeviceType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSwitchingDeviceType"); assert(inst); return inst; }

        Nullable<IfcSwitchingDeviceTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcSwitchingDeviceTypeEnum_); if (v >= 0) return (IfcSwitchingDeviceTypeEnum) v; else return Nullable<IfcSwitchingDeviceTypeEnum>(); }
        void put_PredefinedType(IfcSwitchingDeviceTypeEnum value) { TextValue val = IfcSwitchingDeviceTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSymbolStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSymbolStyle : public virtual IfcPresentationStyle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSymbolStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSymbolStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSymbolStyle")
        {}

                /// <summary>
                /// Create new instace of IfcSymbolStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcSymbolStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSymbolStyle"); assert(inst); return inst; }

        IfcSymbolStyleSelect_get get_StyleOfSymbol() { return IfcSymbolStyleSelect_get(m_instance, "StyleOfSymbol", NULL); }
        IfcSymbolStyleSelect_put put_StyleOfSymbol() { return IfcSymbolStyleSelect_put(m_instance, "StyleOfSymbol", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcSystemFurnitureElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcSystemFurnitureElementType : public virtual IfcFurnishingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcSystemFurnitureElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcSystemFurnitureElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcSystemFurnitureElementType")
        {}

                /// <summary>
                /// Create new instace of IfcSystemFurnitureElementType and returns object of this C++ class to interact with
                /// </summary>
        static IfcSystemFurnitureElementType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcSystemFurnitureElementType"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTable
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTable : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTable
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTable(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTable")
        {}

                /// <summary>
                /// Create new instace of IfcTable and returns object of this C++ class to interact with
                /// </summary>
        static IfcTable Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTable"); assert(inst); return inst; }

        TextValue get_Name() { TextValue val = NULL; if (sdaiGetAttrBN(m_instance, "Name", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Name(TextValue value) { sdaiPutAttrBN(m_instance, "Name", sdaiSTRING, value); }

        //TList may be ListOfIfcTableRow or list of converible elements
        template <typename TList> void get_Rows(TList& lst) { ListOfIfcTableRowSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Rows"); }

        //TList may be ListOfIfcTableRow or list of converible elements
        template <typename TList> void put_Rows(TList& lst) { ListOfIfcTableRowSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Rows"); }

        //TArrayElem[] may be IfcTableRow[] or array of convertible elements
        template <typename TArrayElem> void put_Rows(TArrayElem arr[], size_t n) { ListOfIfcTableRow lst; ArrayToList(arr, n, lst); put_Rows(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTableRow
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTableRow : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTableRow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTableRow(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTableRow")
        {}

                /// <summary>
                /// Create new instace of IfcTableRow and returns object of this C++ class to interact with
                /// </summary>
        static IfcTableRow Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTableRow"); assert(inst); return inst; }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_RowCells(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "RowCells"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_RowCells(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "RowCells"); }

        Nullable<bool> get_IsHeading() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "IsHeading", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_IsHeading(bool value) { sdaiPutAttrBN(m_instance, "IsHeading", sdaiBOOLEAN, &value); }

        IfcTable get_OfTable();
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTankType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTankType : public virtual IfcFlowStorageDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTankType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTankType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTankType")
        {}

                /// <summary>
                /// Create new instace of IfcTankType and returns object of this C++ class to interact with
                /// </summary>
        static IfcTankType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTankType"); assert(inst); return inst; }

        Nullable<IfcTankTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcTankTypeEnum_); if (v >= 0) return (IfcTankTypeEnum) v; else return Nullable<IfcTankTypeEnum>(); }
        void put_PredefinedType(IfcTankTypeEnum value) { TextValue val = IfcTankTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTelecomAddress
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTelecomAddress : public virtual IfcAddress
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTelecomAddress
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTelecomAddress(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTelecomAddress")
        {}

                /// <summary>
                /// Create new instace of IfcTelecomAddress and returns object of this C++ class to interact with
                /// </summary>
        static IfcTelecomAddress Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTelecomAddress"); assert(inst); return inst; }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_TelephoneNumbers(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "TelephoneNumbers"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_TelephoneNumbers(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "TelephoneNumbers"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_TelephoneNumbers(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_TelephoneNumbers(lst); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_FacsimileNumbers(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "FacsimileNumbers"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_FacsimileNumbers(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "FacsimileNumbers"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_FacsimileNumbers(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_FacsimileNumbers(lst); }

        IfcLabel get_PagerNumber() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "PagerNumber", sdaiSTRING, &val)) return val; else return NULL; }
        void put_PagerNumber(IfcLabel value) { sdaiPutAttrBN(m_instance, "PagerNumber", sdaiSTRING, value); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void get_ElectronicMailAddresses(TList& lst) { ListOfIfcLabelSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ElectronicMailAddresses"); }

        //TList may be ListOfIfcLabel or list of converible elements
        template <typename TList> void put_ElectronicMailAddresses(TList& lst) { ListOfIfcLabelSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ElectronicMailAddresses"); }

        //TArrayElem[] may be IfcLabel[] or array of convertible elements
        template <typename TArrayElem> void put_ElectronicMailAddresses(TArrayElem arr[], size_t n) { ListOfIfcLabel lst; ArrayToList(arr, n, lst); put_ElectronicMailAddresses(lst); }

        IfcLabel get_WWWHomePageURL() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "WWWHomePageURL", sdaiSTRING, &val)) return val; else return NULL; }
        void put_WWWHomePageURL(IfcLabel value) { sdaiPutAttrBN(m_instance, "WWWHomePageURL", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTendon
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTendon : public virtual IfcReinforcingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTendon
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTendon(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTendon")
        {}

                /// <summary>
                /// Create new instace of IfcTendon and returns object of this C++ class to interact with
                /// </summary>
        static IfcTendon Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTendon"); assert(inst); return inst; }

        Nullable<IfcTendonTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcTendonTypeEnum_); if (v >= 0) return (IfcTendonTypeEnum) v; else return Nullable<IfcTendonTypeEnum>(); }
        void put_PredefinedType(IfcTendonTypeEnum value) { TextValue val = IfcTendonTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }

        Nullable<IfcPositiveLengthMeasure> get_NominalDiameter() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "NominalDiameter", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_NominalDiameter(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "NominalDiameter", sdaiREAL, &value); }

        Nullable<IfcAreaMeasure> get_CrossSectionArea() { IfcAreaMeasure val = (IfcAreaMeasure) 0; if (sdaiGetAttrBN(m_instance, "CrossSectionArea", sdaiREAL, &val)) return val; else return Nullable<IfcAreaMeasure>(); }
        void put_CrossSectionArea(IfcAreaMeasure value) { sdaiPutAttrBN(m_instance, "CrossSectionArea", sdaiREAL, &value); }

        Nullable<IfcForceMeasure> get_TensionForce() { IfcForceMeasure val = (IfcForceMeasure) 0; if (sdaiGetAttrBN(m_instance, "TensionForce", sdaiREAL, &val)) return val; else return Nullable<IfcForceMeasure>(); }
        void put_TensionForce(IfcForceMeasure value) { sdaiPutAttrBN(m_instance, "TensionForce", sdaiREAL, &value); }

        Nullable<IfcPressureMeasure> get_PreStress() { IfcPressureMeasure val = (IfcPressureMeasure) 0; if (sdaiGetAttrBN(m_instance, "PreStress", sdaiREAL, &val)) return val; else return Nullable<IfcPressureMeasure>(); }
        void put_PreStress(IfcPressureMeasure value) { sdaiPutAttrBN(m_instance, "PreStress", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_FrictionCoefficient() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "FrictionCoefficient", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_FrictionCoefficient(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "FrictionCoefficient", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_AnchorageSlip() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "AnchorageSlip", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_AnchorageSlip(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "AnchorageSlip", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_MinCurvatureRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MinCurvatureRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MinCurvatureRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MinCurvatureRadius", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTendonAnchor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTendonAnchor : public virtual IfcReinforcingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTendonAnchor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTendonAnchor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTendonAnchor")
        {}

                /// <summary>
                /// Create new instace of IfcTendonAnchor and returns object of this C++ class to interact with
                /// </summary>
        static IfcTendonAnchor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTendonAnchor"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextLiteral
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextLiteral : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextLiteral
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextLiteral(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextLiteral")
        {}

                /// <summary>
                /// Create new instace of IfcTextLiteral and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextLiteral Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextLiteral"); assert(inst); return inst; }

        IfcPresentableText get_Literal() { IfcPresentableText val = NULL; if (sdaiGetAttrBN(m_instance, "Literal", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Literal(IfcPresentableText value) { sdaiPutAttrBN(m_instance, "Literal", sdaiSTRING, value); }

        IfcAxis2Placement_get get_Placement() { return IfcAxis2Placement_get(m_instance, "Placement", NULL); }
        IfcAxis2Placement_put put_Placement() { return IfcAxis2Placement_put(m_instance, "Placement", NULL); }

        Nullable<IfcTextPath> get_Path() { int v = getENUM("Path", IfcTextPath_); if (v >= 0) return (IfcTextPath) v; else return Nullable<IfcTextPath>(); }
        void put_Path(IfcTextPath value) { TextValue val = IfcTextPath_[(int) value]; sdaiPutAttrBN(m_instance, "Path", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextLiteralWithExtent
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextLiteralWithExtent : public virtual IfcTextLiteral
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextLiteralWithExtent
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextLiteralWithExtent(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextLiteralWithExtent")
        {}

                /// <summary>
                /// Create new instace of IfcTextLiteralWithExtent and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextLiteralWithExtent Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextLiteralWithExtent"); assert(inst); return inst; }

        IfcPlanarExtent get_Extent();
        void put_Extent(IfcPlanarExtent inst);

        IfcBoxAlignment get_BoxAlignment() { IfcBoxAlignment val = NULL; if (sdaiGetAttrBN(m_instance, "BoxAlignment", sdaiSTRING, &val)) return val; else return NULL; }
        void put_BoxAlignment(IfcBoxAlignment value) { sdaiPutAttrBN(m_instance, "BoxAlignment", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextStyle : public virtual IfcPresentationStyle
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextStyle")
        {}

                /// <summary>
                /// Create new instace of IfcTextStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextStyle"); assert(inst); return inst; }

        IfcCharacterStyleSelect_get get_TextCharacterAppearance() { return IfcCharacterStyleSelect_get(m_instance, "TextCharacterAppearance", NULL); }
        IfcCharacterStyleSelect_put put_TextCharacterAppearance() { return IfcCharacterStyleSelect_put(m_instance, "TextCharacterAppearance", NULL); }

        IfcTextStyleSelect_get get_TextStyle() { return IfcTextStyleSelect_get(m_instance, "TextStyle", NULL); }
        IfcTextStyleSelect_put put_TextStyle() { return IfcTextStyleSelect_put(m_instance, "TextStyle", NULL); }

        IfcTextFontSelect_get get_TextFontStyle() { return IfcTextFontSelect_get(m_instance, "TextFontStyle", NULL); }
        IfcTextFontSelect_put put_TextFontStyle() { return IfcTextFontSelect_put(m_instance, "TextFontStyle", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextStyleFontModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextStyleFontModel : public virtual IfcPreDefinedTextFont
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextStyleFontModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextStyleFontModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextStyleFontModel")
        {}

                /// <summary>
                /// Create new instace of IfcTextStyleFontModel and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextStyleFontModel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextStyleFontModel"); assert(inst); return inst; }

        //TList may be ListOfIfcTextFontName or list of converible elements
        template <typename TList> void get_FontFamily(TList& lst) { ListOfIfcTextFontNameSerializer<TList> sr; sr.FromAttr(lst, m_instance, "FontFamily"); }

        //TList may be ListOfIfcTextFontName or list of converible elements
        template <typename TList> void put_FontFamily(TList& lst) { ListOfIfcTextFontNameSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "FontFamily"); }

        //TArrayElem[] may be IfcTextFontName[] or array of convertible elements
        template <typename TArrayElem> void put_FontFamily(TArrayElem arr[], size_t n) { ListOfIfcTextFontName lst; ArrayToList(arr, n, lst); put_FontFamily(lst); }

        IfcFontStyle get_FontStyle() { IfcFontStyle val = NULL; if (sdaiGetAttrBN(m_instance, "FontStyle", sdaiSTRING, &val)) return val; else return NULL; }
        void put_FontStyle(IfcFontStyle value) { sdaiPutAttrBN(m_instance, "FontStyle", sdaiSTRING, value); }

        IfcFontVariant get_FontVariant() { IfcFontVariant val = NULL; if (sdaiGetAttrBN(m_instance, "FontVariant", sdaiSTRING, &val)) return val; else return NULL; }
        void put_FontVariant(IfcFontVariant value) { sdaiPutAttrBN(m_instance, "FontVariant", sdaiSTRING, value); }

        IfcFontWeight get_FontWeight() { IfcFontWeight val = NULL; if (sdaiGetAttrBN(m_instance, "FontWeight", sdaiSTRING, &val)) return val; else return NULL; }
        void put_FontWeight(IfcFontWeight value) { sdaiPutAttrBN(m_instance, "FontWeight", sdaiSTRING, value); }

        IfcSizeSelect_get get_FontSize() { return IfcSizeSelect_get(m_instance, "FontSize", NULL); }
        IfcSizeSelect_put put_FontSize() { return IfcSizeSelect_put(m_instance, "FontSize", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextStyleForDefinedFont
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextStyleForDefinedFont : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextStyleForDefinedFont
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextStyleForDefinedFont(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextStyleForDefinedFont")
        {}

                /// <summary>
                /// Create new instace of IfcTextStyleForDefinedFont and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextStyleForDefinedFont Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextStyleForDefinedFont"); assert(inst); return inst; }

        IfcColour_get get_Colour() { return IfcColour_get(m_instance, "Colour", NULL); }
        IfcColour_put put_Colour() { return IfcColour_put(m_instance, "Colour", NULL); }

        IfcColour_get get_BackgroundColour() { return IfcColour_get(m_instance, "BackgroundColour", NULL); }
        IfcColour_put put_BackgroundColour() { return IfcColour_put(m_instance, "BackgroundColour", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextStyleTextModel
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextStyleTextModel : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextStyleTextModel
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextStyleTextModel(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextStyleTextModel")
        {}

                /// <summary>
                /// Create new instace of IfcTextStyleTextModel and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextStyleTextModel Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextStyleTextModel"); assert(inst); return inst; }

        IfcSizeSelect_get get_TextIndent() { return IfcSizeSelect_get(m_instance, "TextIndent", NULL); }
        IfcSizeSelect_put put_TextIndent() { return IfcSizeSelect_put(m_instance, "TextIndent", NULL); }

        IfcTextAlignment get_TextAlign() { IfcTextAlignment val = NULL; if (sdaiGetAttrBN(m_instance, "TextAlign", sdaiSTRING, &val)) return val; else return NULL; }
        void put_TextAlign(IfcTextAlignment value) { sdaiPutAttrBN(m_instance, "TextAlign", sdaiSTRING, value); }

        IfcTextDecoration get_TextDecoration() { IfcTextDecoration val = NULL; if (sdaiGetAttrBN(m_instance, "TextDecoration", sdaiSTRING, &val)) return val; else return NULL; }
        void put_TextDecoration(IfcTextDecoration value) { sdaiPutAttrBN(m_instance, "TextDecoration", sdaiSTRING, value); }

        IfcSizeSelect_get get_LetterSpacing() { return IfcSizeSelect_get(m_instance, "LetterSpacing", NULL); }
        IfcSizeSelect_put put_LetterSpacing() { return IfcSizeSelect_put(m_instance, "LetterSpacing", NULL); }

        IfcSizeSelect_get get_WordSpacing() { return IfcSizeSelect_get(m_instance, "WordSpacing", NULL); }
        IfcSizeSelect_put put_WordSpacing() { return IfcSizeSelect_put(m_instance, "WordSpacing", NULL); }

        IfcTextTransformation get_TextTransform() { IfcTextTransformation val = NULL; if (sdaiGetAttrBN(m_instance, "TextTransform", sdaiSTRING, &val)) return val; else return NULL; }
        void put_TextTransform(IfcTextTransformation value) { sdaiPutAttrBN(m_instance, "TextTransform", sdaiSTRING, value); }

        IfcSizeSelect_get get_LineHeight() { return IfcSizeSelect_get(m_instance, "LineHeight", NULL); }
        IfcSizeSelect_put put_LineHeight() { return IfcSizeSelect_put(m_instance, "LineHeight", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextStyleWithBoxCharacteristics
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextStyleWithBoxCharacteristics : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextStyleWithBoxCharacteristics
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextStyleWithBoxCharacteristics(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextStyleWithBoxCharacteristics")
        {}

                /// <summary>
                /// Create new instace of IfcTextStyleWithBoxCharacteristics and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextStyleWithBoxCharacteristics Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextStyleWithBoxCharacteristics"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_BoxHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BoxHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BoxHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BoxHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_BoxWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BoxWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BoxWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BoxWidth", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_BoxSlantAngle() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "BoxSlantAngle", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_BoxSlantAngle(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "BoxSlantAngle", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_BoxRotateAngle() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "BoxRotateAngle", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_BoxRotateAngle(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "BoxRotateAngle", sdaiREAL, &value); }

        IfcSizeSelect_get get_CharacterSpacing() { return IfcSizeSelect_get(m_instance, "CharacterSpacing", NULL); }
        IfcSizeSelect_put put_CharacterSpacing() { return IfcSizeSelect_put(m_instance, "CharacterSpacing", NULL); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextureCoordinate
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextureCoordinate : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextureCoordinate
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextureCoordinate(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextureCoordinate")
        {}


        //TList may be SetOfIfcAnnotationSurface or list of converible elements
        template <typename TList> void get_AnnotatedSurface(TList& lst) { SetOfIfcAnnotationSurfaceSerializer<TList> sr; sr.FromAttr(lst, m_instance, "AnnotatedSurface"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextureCoordinateGenerator
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextureCoordinateGenerator : public virtual IfcTextureCoordinate
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextureCoordinateGenerator
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextureCoordinateGenerator(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextureCoordinateGenerator")
        {}

                /// <summary>
                /// Create new instace of IfcTextureCoordinateGenerator and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextureCoordinateGenerator Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextureCoordinateGenerator"); assert(inst); return inst; }

        IfcLabel get_Mode() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Mode", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Mode(IfcLabel value) { sdaiPutAttrBN(m_instance, "Mode", sdaiSTRING, value); }

        //TList may be ListOfIfcSimpleValue or list of converible elements
        template <typename TList> void get_Parameter(TList& lst) { ListOfIfcSimpleValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Parameter"); }

        //TList may be ListOfIfcSimpleValue or list of converible elements
        template <typename TList> void put_Parameter(TList& lst) { ListOfIfcSimpleValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Parameter"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextureMap
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextureMap : public virtual IfcTextureCoordinate
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextureMap(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextureMap")
        {}

                /// <summary>
                /// Create new instace of IfcTextureMap and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextureMap Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextureMap"); assert(inst); return inst; }

        //TList may be SetOfIfcVertexBasedTextureMap or list of converible elements
        template <typename TList> void get_TextureMaps(TList& lst) { SetOfIfcVertexBasedTextureMapSerializer<TList> sr; sr.FromAttr(lst, m_instance, "TextureMaps"); }

        //TList may be SetOfIfcVertexBasedTextureMap or list of converible elements
        template <typename TList> void put_TextureMaps(TList& lst) { SetOfIfcVertexBasedTextureMapSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "TextureMaps"); }

        //TArrayElem[] may be IfcVertexBasedTextureMap[] or array of convertible elements
        template <typename TArrayElem> void put_TextureMaps(TArrayElem arr[], size_t n) { SetOfIfcVertexBasedTextureMap lst; ArrayToList(arr, n, lst); put_TextureMaps(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTextureVertex
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTextureVertex : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTextureVertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTextureVertex(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTextureVertex")
        {}

                /// <summary>
                /// Create new instace of IfcTextureVertex and returns object of this C++ class to interact with
                /// </summary>
        static IfcTextureVertex Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTextureVertex"); assert(inst); return inst; }

        //TList may be ListOfIfcParameterValue or list of converible elements
        template <typename TList> void get_Coordinates(TList& lst) { ListOfIfcParameterValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Coordinates"); }

        //TList may be ListOfIfcParameterValue or list of converible elements
        template <typename TList> void put_Coordinates(TList& lst) { ListOfIfcParameterValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Coordinates"); }

        //TArrayElem[] may be IfcParameterValue[] or array of convertible elements
        template <typename TArrayElem> void put_Coordinates(TArrayElem arr[], size_t n) { ListOfIfcParameterValue lst; ArrayToList(arr, n, lst); put_Coordinates(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcThermalMaterialProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcThermalMaterialProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcThermalMaterialProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcThermalMaterialProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcThermalMaterialProperties")
        {}

                /// <summary>
                /// Create new instace of IfcThermalMaterialProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcThermalMaterialProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcThermalMaterialProperties"); assert(inst); return inst; }

        Nullable<IfcSpecificHeatCapacityMeasure> get_SpecificHeatCapacity() { IfcSpecificHeatCapacityMeasure val = (IfcSpecificHeatCapacityMeasure) 0; if (sdaiGetAttrBN(m_instance, "SpecificHeatCapacity", sdaiREAL, &val)) return val; else return Nullable<IfcSpecificHeatCapacityMeasure>(); }
        void put_SpecificHeatCapacity(IfcSpecificHeatCapacityMeasure value) { sdaiPutAttrBN(m_instance, "SpecificHeatCapacity", sdaiREAL, &value); }

        Nullable<IfcThermodynamicTemperatureMeasure> get_BoilingPoint() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "BoilingPoint", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_BoilingPoint(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "BoilingPoint", sdaiREAL, &value); }

        Nullable<IfcThermodynamicTemperatureMeasure> get_FreezingPoint() { IfcThermodynamicTemperatureMeasure val = (IfcThermodynamicTemperatureMeasure) 0; if (sdaiGetAttrBN(m_instance, "FreezingPoint", sdaiREAL, &val)) return val; else return Nullable<IfcThermodynamicTemperatureMeasure>(); }
        void put_FreezingPoint(IfcThermodynamicTemperatureMeasure value) { sdaiPutAttrBN(m_instance, "FreezingPoint", sdaiREAL, &value); }

        Nullable<IfcThermalConductivityMeasure> get_ThermalConductivity() { IfcThermalConductivityMeasure val = (IfcThermalConductivityMeasure) 0; if (sdaiGetAttrBN(m_instance, "ThermalConductivity", sdaiREAL, &val)) return val; else return Nullable<IfcThermalConductivityMeasure>(); }
        void put_ThermalConductivity(IfcThermalConductivityMeasure value) { sdaiPutAttrBN(m_instance, "ThermalConductivity", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTimeSeriesReferenceRelationship
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTimeSeriesReferenceRelationship : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTimeSeriesReferenceRelationship
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTimeSeriesReferenceRelationship(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTimeSeriesReferenceRelationship")
        {}

                /// <summary>
                /// Create new instace of IfcTimeSeriesReferenceRelationship and returns object of this C++ class to interact with
                /// </summary>
        static IfcTimeSeriesReferenceRelationship Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTimeSeriesReferenceRelationship"); assert(inst); return inst; }

        IfcTimeSeries get_ReferencedTimeSeries();
        void put_ReferencedTimeSeries(IfcTimeSeries inst);

        //TList may be SetOfIfcDocumentSelect or list of converible elements
        template <typename TList> void get_TimeSeriesReferences(TList& lst) { SetOfIfcDocumentSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "TimeSeriesReferences"); }

        //TList may be SetOfIfcDocumentSelect or list of converible elements
        template <typename TList> void put_TimeSeriesReferences(TList& lst) { SetOfIfcDocumentSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "TimeSeriesReferences"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTimeSeriesSchedule
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTimeSeriesSchedule : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTimeSeriesSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTimeSeriesSchedule(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTimeSeriesSchedule")
        {}

                /// <summary>
                /// Create new instace of IfcTimeSeriesSchedule and returns object of this C++ class to interact with
                /// </summary>
        static IfcTimeSeriesSchedule Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTimeSeriesSchedule"); assert(inst); return inst; }

        //TList may be ListOfIfcDateTimeSelect or list of converible elements
        template <typename TList> void get_ApplicableDates(TList& lst) { ListOfIfcDateTimeSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ApplicableDates"); }

        //TList may be ListOfIfcDateTimeSelect or list of converible elements
        template <typename TList> void put_ApplicableDates(TList& lst) { ListOfIfcDateTimeSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ApplicableDates"); }

        Nullable<IfcTimeSeriesScheduleTypeEnum> get_TimeSeriesScheduleType() { int v = getENUM("TimeSeriesScheduleType", IfcTimeSeriesScheduleTypeEnum_); if (v >= 0) return (IfcTimeSeriesScheduleTypeEnum) v; else return Nullable<IfcTimeSeriesScheduleTypeEnum>(); }
        void put_TimeSeriesScheduleType(IfcTimeSeriesScheduleTypeEnum value) { TextValue val = IfcTimeSeriesScheduleTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "TimeSeriesScheduleType", sdaiENUM, val); }

        IfcTimeSeries get_TimeSeries();
        void put_TimeSeries(IfcTimeSeries inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTimeSeriesValue
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTimeSeriesValue : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTimeSeriesValue
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTimeSeriesValue(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTimeSeriesValue")
        {}

                /// <summary>
                /// Create new instace of IfcTimeSeriesValue and returns object of this C++ class to interact with
                /// </summary>
        static IfcTimeSeriesValue Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTimeSeriesValue"); assert(inst); return inst; }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void get_ListValues(TList& lst) { ListOfIfcValueSerializer<TList> sr; sr.FromAttr(lst, m_instance, "ListValues"); }

        //TList may be ListOfIfcValue or list of converible elements
        template <typename TList> void put_ListValues(TList& lst) { ListOfIfcValueSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "ListValues"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTopologyRepresentation
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTopologyRepresentation : public virtual IfcShapeModel
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTopologyRepresentation
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTopologyRepresentation(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTopologyRepresentation")
        {}

                /// <summary>
                /// Create new instace of IfcTopologyRepresentation and returns object of this C++ class to interact with
                /// </summary>
        static IfcTopologyRepresentation Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTopologyRepresentation"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTransformerType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTransformerType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTransformerType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTransformerType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTransformerType")
        {}

                /// <summary>
                /// Create new instace of IfcTransformerType and returns object of this C++ class to interact with
                /// </summary>
        static IfcTransformerType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTransformerType"); assert(inst); return inst; }

        Nullable<IfcTransformerTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcTransformerTypeEnum_); if (v >= 0) return (IfcTransformerTypeEnum) v; else return Nullable<IfcTransformerTypeEnum>(); }
        void put_PredefinedType(IfcTransformerTypeEnum value) { TextValue val = IfcTransformerTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTransportElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTransportElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTransportElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTransportElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTransportElement")
        {}

                /// <summary>
                /// Create new instace of IfcTransportElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcTransportElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTransportElement"); assert(inst); return inst; }

        Nullable<IfcTransportElementTypeEnum> get_OperationType() { int v = getENUM("OperationType", IfcTransportElementTypeEnum_); if (v >= 0) return (IfcTransportElementTypeEnum) v; else return Nullable<IfcTransportElementTypeEnum>(); }
        void put_OperationType(IfcTransportElementTypeEnum value) { TextValue val = IfcTransportElementTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "OperationType", sdaiENUM, val); }

        Nullable<IfcMassMeasure> get_CapacityByWeight() { IfcMassMeasure val = (IfcMassMeasure) 0; if (sdaiGetAttrBN(m_instance, "CapacityByWeight", sdaiREAL, &val)) return val; else return Nullable<IfcMassMeasure>(); }
        void put_CapacityByWeight(IfcMassMeasure value) { sdaiPutAttrBN(m_instance, "CapacityByWeight", sdaiREAL, &value); }

        Nullable<IfcCountMeasure> get_CapacityByNumber() { IfcCountMeasure val = (IfcCountMeasure) 0; if (sdaiGetAttrBN(m_instance, "CapacityByNumber", sdaiREAL, &val)) return val; else return Nullable<IfcCountMeasure>(); }
        void put_CapacityByNumber(IfcCountMeasure value) { sdaiPutAttrBN(m_instance, "CapacityByNumber", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTransportElementType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTransportElementType : public virtual IfcElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTransportElementType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTransportElementType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTransportElementType")
        {}

                /// <summary>
                /// Create new instace of IfcTransportElementType and returns object of this C++ class to interact with
                /// </summary>
        static IfcTransportElementType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTransportElementType"); assert(inst); return inst; }

        Nullable<IfcTransportElementTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcTransportElementTypeEnum_); if (v >= 0) return (IfcTransportElementTypeEnum) v; else return Nullable<IfcTransportElementTypeEnum>(); }
        void put_PredefinedType(IfcTransportElementTypeEnum value) { TextValue val = IfcTransportElementTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTrapeziumProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTrapeziumProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTrapeziumProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTrapeziumProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTrapeziumProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcTrapeziumProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcTrapeziumProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTrapeziumProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_BottomXDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "BottomXDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_BottomXDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "BottomXDim", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TopXDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TopXDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TopXDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TopXDim", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_YDim() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "YDim", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_YDim(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "YDim", sdaiREAL, &value); }

        Nullable<IfcLengthMeasure> get_TopXOffset() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TopXOffset", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_TopXOffset(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "TopXOffset", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTrimmedCurve
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTrimmedCurve : public virtual IfcBoundedCurve
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTrimmedCurve
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTrimmedCurve(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTrimmedCurve")
        {}

                /// <summary>
                /// Create new instace of IfcTrimmedCurve and returns object of this C++ class to interact with
                /// </summary>
        static IfcTrimmedCurve Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTrimmedCurve"); assert(inst); return inst; }

        IfcCurve get_BasisCurve();
        void put_BasisCurve(IfcCurve inst);

        //TList may be SetOfIfcTrimmingSelect or list of converible elements
        template <typename TList> void get_Trim1(TList& lst) { SetOfIfcTrimmingSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Trim1"); }

        //TList may be SetOfIfcTrimmingSelect or list of converible elements
        template <typename TList> void put_Trim1(TList& lst) { SetOfIfcTrimmingSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Trim1"); }

        //TList may be SetOfIfcTrimmingSelect or list of converible elements
        template <typename TList> void get_Trim2(TList& lst) { SetOfIfcTrimmingSelectSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Trim2"); }

        //TList may be SetOfIfcTrimmingSelect or list of converible elements
        template <typename TList> void put_Trim2(TList& lst) { SetOfIfcTrimmingSelectSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Trim2"); }

        Nullable<bool> get_SenseAgreement() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "SenseAgreement", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_SenseAgreement(bool value) { sdaiPutAttrBN(m_instance, "SenseAgreement", sdaiBOOLEAN, &value); }

        Nullable<IfcTrimmingPreference> get_MasterRepresentation() { int v = getENUM("MasterRepresentation", IfcTrimmingPreference_); if (v >= 0) return (IfcTrimmingPreference) v; else return Nullable<IfcTrimmingPreference>(); }
        void put_MasterRepresentation(IfcTrimmingPreference value) { TextValue val = IfcTrimmingPreference_[(int) value]; sdaiPutAttrBN(m_instance, "MasterRepresentation", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcTShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcTShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Depth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Depth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeEdgeRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeEdgeRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeEdgeRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeEdgeRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebEdgeRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebEdgeRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebEdgeRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebEdgeRadius", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_WebSlope() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebSlope", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_WebSlope(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "WebSlope", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_FlangeSlope() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeSlope", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_FlangeSlope(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "FlangeSlope", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInY() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInY(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInY", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTubeBundleType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTubeBundleType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTubeBundleType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTubeBundleType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTubeBundleType")
        {}

                /// <summary>
                /// Create new instace of IfcTubeBundleType and returns object of this C++ class to interact with
                /// </summary>
        static IfcTubeBundleType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTubeBundleType"); assert(inst); return inst; }

        Nullable<IfcTubeBundleTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcTubeBundleTypeEnum_); if (v >= 0) return (IfcTubeBundleTypeEnum) v; else return Nullable<IfcTubeBundleTypeEnum>(); }
        void put_PredefinedType(IfcTubeBundleTypeEnum value) { TextValue val = IfcTubeBundleTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcTwoDirectionRepeatFactor
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcTwoDirectionRepeatFactor : public virtual IfcOneDirectionRepeatFactor
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcTwoDirectionRepeatFactor
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcTwoDirectionRepeatFactor(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcTwoDirectionRepeatFactor")
        {}

                /// <summary>
                /// Create new instace of IfcTwoDirectionRepeatFactor and returns object of this C++ class to interact with
                /// </summary>
        static IfcTwoDirectionRepeatFactor Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcTwoDirectionRepeatFactor"); assert(inst); return inst; }

        IfcVector get_SecondRepeatFactor();
        void put_SecondRepeatFactor(IfcVector inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcUnitaryEquipmentType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcUnitaryEquipmentType : public virtual IfcEnergyConversionDeviceType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcUnitaryEquipmentType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcUnitaryEquipmentType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcUnitaryEquipmentType")
        {}

                /// <summary>
                /// Create new instace of IfcUnitaryEquipmentType and returns object of this C++ class to interact with
                /// </summary>
        static IfcUnitaryEquipmentType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcUnitaryEquipmentType"); assert(inst); return inst; }

        Nullable<IfcUnitaryEquipmentTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcUnitaryEquipmentTypeEnum_); if (v >= 0) return (IfcUnitaryEquipmentTypeEnum) v; else return Nullable<IfcUnitaryEquipmentTypeEnum>(); }
        void put_PredefinedType(IfcUnitaryEquipmentTypeEnum value) { TextValue val = IfcUnitaryEquipmentTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcUnitAssignment
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcUnitAssignment : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcUnitAssignment
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcUnitAssignment(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcUnitAssignment")
        {}

                /// <summary>
                /// Create new instace of IfcUnitAssignment and returns object of this C++ class to interact with
                /// </summary>
        static IfcUnitAssignment Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcUnitAssignment"); assert(inst); return inst; }

        //TList may be SetOfIfcUnit or list of converible elements
        template <typename TList> void get_Units(TList& lst) { SetOfIfcUnitSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Units"); }

        //TList may be SetOfIfcUnit or list of converible elements
        template <typename TList> void put_Units(TList& lst) { SetOfIfcUnitSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Units"); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcUShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcUShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcUShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcUShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcUShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcUShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcUShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcUShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Depth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Depth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_EdgeRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EdgeRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_EdgeRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "EdgeRadius", sdaiREAL, &value); }

        Nullable<IfcPlaneAngleMeasure> get_FlangeSlope() { IfcPlaneAngleMeasure val = (IfcPlaneAngleMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeSlope", sdaiREAL, &val)) return val; else return Nullable<IfcPlaneAngleMeasure>(); }
        void put_FlangeSlope(IfcPlaneAngleMeasure value) { sdaiPutAttrBN(m_instance, "FlangeSlope", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_CentreOfGravityInX() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_CentreOfGravityInX(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "CentreOfGravityInX", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcValveType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcValveType : public virtual IfcFlowControllerType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcValveType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcValveType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcValveType")
        {}

                /// <summary>
                /// Create new instace of IfcValveType and returns object of this C++ class to interact with
                /// </summary>
        static IfcValveType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcValveType"); assert(inst); return inst; }

        Nullable<IfcValveTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcValveTypeEnum_); if (v >= 0) return (IfcValveTypeEnum) v; else return Nullable<IfcValveTypeEnum>(); }
        void put_PredefinedType(IfcValveTypeEnum value) { TextValue val = IfcValveTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVector
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVector : public virtual IfcGeometricRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVector
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVector(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVector")
        {}

                /// <summary>
                /// Create new instace of IfcVector and returns object of this C++ class to interact with
                /// </summary>
        static IfcVector Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVector"); assert(inst); return inst; }

        IfcDirection get_Orientation();
        void put_Orientation(IfcDirection inst);

        Nullable<IfcLengthMeasure> get_Magnitude() { IfcLengthMeasure val = (IfcLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Magnitude", sdaiREAL, &val)) return val; else return Nullable<IfcLengthMeasure>(); }
        void put_Magnitude(IfcLengthMeasure value) { sdaiPutAttrBN(m_instance, "Magnitude", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVertex
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVertex : public virtual IfcTopologicalRepresentationItem
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVertex
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVertex(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVertex")
        {}

                /// <summary>
                /// Create new instace of IfcVertex and returns object of this C++ class to interact with
                /// </summary>
        static IfcVertex Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVertex"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVertexBasedTextureMap
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVertexBasedTextureMap : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVertexBasedTextureMap
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVertexBasedTextureMap(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVertexBasedTextureMap")
        {}

                /// <summary>
                /// Create new instace of IfcVertexBasedTextureMap and returns object of this C++ class to interact with
                /// </summary>
        static IfcVertexBasedTextureMap Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVertexBasedTextureMap"); assert(inst); return inst; }

        //TList may be ListOfIfcTextureVertex or list of converible elements
        template <typename TList> void get_TextureVertices(TList& lst) { ListOfIfcTextureVertexSerializer<TList> sr; sr.FromAttr(lst, m_instance, "TextureVertices"); }

        //TList may be ListOfIfcTextureVertex or list of converible elements
        template <typename TList> void put_TextureVertices(TList& lst) { ListOfIfcTextureVertexSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "TextureVertices"); }

        //TArrayElem[] may be IfcTextureVertex[] or array of convertible elements
        template <typename TArrayElem> void put_TextureVertices(TArrayElem arr[], size_t n) { ListOfIfcTextureVertex lst; ArrayToList(arr, n, lst); put_TextureVertices(lst); }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void get_TexturePoints(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr; sr.FromAttr(lst, m_instance, "TexturePoints"); }

        //TList may be ListOfIfcCartesianPoint or list of converible elements
        template <typename TList> void put_TexturePoints(TList& lst) { ListOfIfcCartesianPointSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "TexturePoints"); }

        //TArrayElem[] may be IfcCartesianPoint[] or array of convertible elements
        template <typename TArrayElem> void put_TexturePoints(TArrayElem arr[], size_t n) { ListOfIfcCartesianPoint lst; ArrayToList(arr, n, lst); put_TexturePoints(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVertexLoop
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVertexLoop : public virtual IfcLoop
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVertexLoop
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVertexLoop(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVertexLoop")
        {}

                /// <summary>
                /// Create new instace of IfcVertexLoop and returns object of this C++ class to interact with
                /// </summary>
        static IfcVertexLoop Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVertexLoop"); assert(inst); return inst; }

        IfcVertex get_LoopVertex();
        void put_LoopVertex(IfcVertex inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVertexPoint
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVertexPoint : public virtual IfcVertex
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVertexPoint
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVertexPoint(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVertexPoint")
        {}

                /// <summary>
                /// Create new instace of IfcVertexPoint and returns object of this C++ class to interact with
                /// </summary>
        static IfcVertexPoint Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVertexPoint"); assert(inst); return inst; }

        IfcPoint get_VertexGeometry();
        void put_VertexGeometry(IfcPoint inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVibrationIsolatorType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVibrationIsolatorType : public virtual IfcDiscreteAccessoryType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVibrationIsolatorType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVibrationIsolatorType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVibrationIsolatorType")
        {}

                /// <summary>
                /// Create new instace of IfcVibrationIsolatorType and returns object of this C++ class to interact with
                /// </summary>
        static IfcVibrationIsolatorType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVibrationIsolatorType"); assert(inst); return inst; }

        Nullable<IfcVibrationIsolatorTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcVibrationIsolatorTypeEnum_); if (v >= 0) return (IfcVibrationIsolatorTypeEnum) v; else return Nullable<IfcVibrationIsolatorTypeEnum>(); }
        void put_PredefinedType(IfcVibrationIsolatorTypeEnum value) { TextValue val = IfcVibrationIsolatorTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVirtualElement
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVirtualElement : public virtual IfcElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVirtualElement
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVirtualElement(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVirtualElement")
        {}

                /// <summary>
                /// Create new instace of IfcVirtualElement and returns object of this C++ class to interact with
                /// </summary>
        static IfcVirtualElement Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVirtualElement"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcVirtualGridIntersection
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcVirtualGridIntersection : public virtual Entity
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcVirtualGridIntersection
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcVirtualGridIntersection(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcVirtualGridIntersection")
        {}

                /// <summary>
                /// Create new instace of IfcVirtualGridIntersection and returns object of this C++ class to interact with
                /// </summary>
        static IfcVirtualGridIntersection Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcVirtualGridIntersection"); assert(inst); return inst; }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void get_IntersectingAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr; sr.FromAttr(lst, m_instance, "IntersectingAxes"); }

        //TList may be ListOfIfcGridAxis or list of converible elements
        template <typename TList> void put_IntersectingAxes(TList& lst) { ListOfIfcGridAxisSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "IntersectingAxes"); }

        //TArrayElem[] may be IfcGridAxis[] or array of convertible elements
        template <typename TArrayElem> void put_IntersectingAxes(TArrayElem arr[], size_t n) { ListOfIfcGridAxis lst; ArrayToList(arr, n, lst); put_IntersectingAxes(lst); }

        //TList may be ListOfIfcLengthMeasure or list of converible elements
        template <typename TList> void get_OffsetDistances(TList& lst) { ListOfIfcLengthMeasureSerializer<TList> sr; sr.FromAttr(lst, m_instance, "OffsetDistances"); }

        //TList may be ListOfIfcLengthMeasure or list of converible elements
        template <typename TList> void put_OffsetDistances(TList& lst) { ListOfIfcLengthMeasureSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "OffsetDistances"); }

        //TArrayElem[] may be IfcLengthMeasure[] or array of convertible elements
        template <typename TArrayElem> void put_OffsetDistances(TArrayElem arr[], size_t n) { ListOfIfcLengthMeasure lst; ArrayToList(arr, n, lst); put_OffsetDistances(lst); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWall
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWall : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWall
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWall(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWall")
        {}

                /// <summary>
                /// Create new instace of IfcWall and returns object of this C++ class to interact with
                /// </summary>
        static IfcWall Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWall"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWallStandardCase
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWallStandardCase : public virtual IfcWall
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWallStandardCase
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWallStandardCase(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWallStandardCase")
        {}

                /// <summary>
                /// Create new instace of IfcWallStandardCase and returns object of this C++ class to interact with
                /// </summary>
        static IfcWallStandardCase Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWallStandardCase"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWallType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWallType : public virtual IfcBuildingElementType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWallType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWallType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWallType")
        {}

                /// <summary>
                /// Create new instace of IfcWallType and returns object of this C++ class to interact with
                /// </summary>
        static IfcWallType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWallType"); assert(inst); return inst; }

        Nullable<IfcWallTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcWallTypeEnum_); if (v >= 0) return (IfcWallTypeEnum) v; else return Nullable<IfcWallTypeEnum>(); }
        void put_PredefinedType(IfcWallTypeEnum value) { TextValue val = IfcWallTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWasteTerminalType
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWasteTerminalType : public virtual IfcFlowTerminalType
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWasteTerminalType
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWasteTerminalType(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWasteTerminalType")
        {}

                /// <summary>
                /// Create new instace of IfcWasteTerminalType and returns object of this C++ class to interact with
                /// </summary>
        static IfcWasteTerminalType Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWasteTerminalType"); assert(inst); return inst; }

        Nullable<IfcWasteTerminalTypeEnum> get_PredefinedType() { int v = getENUM("PredefinedType", IfcWasteTerminalTypeEnum_); if (v >= 0) return (IfcWasteTerminalTypeEnum) v; else return Nullable<IfcWasteTerminalTypeEnum>(); }
        void put_PredefinedType(IfcWasteTerminalTypeEnum value) { TextValue val = IfcWasteTerminalTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PredefinedType", sdaiENUM, val); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWaterProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWaterProperties : public virtual IfcMaterialProperties
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWaterProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWaterProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWaterProperties")
        {}

                /// <summary>
                /// Create new instace of IfcWaterProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcWaterProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWaterProperties"); assert(inst); return inst; }

        Nullable<bool> get_IsPotable() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "IsPotable", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_IsPotable(bool value) { sdaiPutAttrBN(m_instance, "IsPotable", sdaiBOOLEAN, &value); }

        Nullable<IfcIonConcentrationMeasure> get_Hardness() { IfcIonConcentrationMeasure val = (IfcIonConcentrationMeasure) 0; if (sdaiGetAttrBN(m_instance, "Hardness", sdaiREAL, &val)) return val; else return Nullable<IfcIonConcentrationMeasure>(); }
        void put_Hardness(IfcIonConcentrationMeasure value) { sdaiPutAttrBN(m_instance, "Hardness", sdaiREAL, &value); }

        Nullable<IfcIonConcentrationMeasure> get_AlkalinityConcentration() { IfcIonConcentrationMeasure val = (IfcIonConcentrationMeasure) 0; if (sdaiGetAttrBN(m_instance, "AlkalinityConcentration", sdaiREAL, &val)) return val; else return Nullable<IfcIonConcentrationMeasure>(); }
        void put_AlkalinityConcentration(IfcIonConcentrationMeasure value) { sdaiPutAttrBN(m_instance, "AlkalinityConcentration", sdaiREAL, &value); }

        Nullable<IfcIonConcentrationMeasure> get_AcidityConcentration() { IfcIonConcentrationMeasure val = (IfcIonConcentrationMeasure) 0; if (sdaiGetAttrBN(m_instance, "AcidityConcentration", sdaiREAL, &val)) return val; else return Nullable<IfcIonConcentrationMeasure>(); }
        void put_AcidityConcentration(IfcIonConcentrationMeasure value) { sdaiPutAttrBN(m_instance, "AcidityConcentration", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_ImpuritiesContent() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "ImpuritiesContent", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_ImpuritiesContent(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "ImpuritiesContent", sdaiREAL, &value); }

        Nullable<IfcPHMeasure> get_PHLevel() { IfcPHMeasure val = (IfcPHMeasure) 0; if (sdaiGetAttrBN(m_instance, "PHLevel", sdaiREAL, &val)) return val; else return Nullable<IfcPHMeasure>(); }
        void put_PHLevel(IfcPHMeasure value) { sdaiPutAttrBN(m_instance, "PHLevel", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_DissolvedSolidsContent() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "DissolvedSolidsContent", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_DissolvedSolidsContent(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "DissolvedSolidsContent", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWindow
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWindow : public virtual IfcBuildingElement
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWindow
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWindow(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWindow")
        {}

                /// <summary>
                /// Create new instace of IfcWindow and returns object of this C++ class to interact with
                /// </summary>
        static IfcWindow Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWindow"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_OverallHeight() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallHeight", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallHeight(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallHeight", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_OverallWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "OverallWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_OverallWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "OverallWidth", sdaiREAL, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWindowLiningProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWindowLiningProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWindowLiningProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWindowLiningProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWindowLiningProperties")
        {}

                /// <summary>
                /// Create new instace of IfcWindowLiningProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcWindowLiningProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWindowLiningProperties"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_LiningDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LiningDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LiningDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LiningDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_LiningThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "LiningThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_LiningThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "LiningThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_TransomThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "TransomThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_TransomThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "TransomThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_MullionThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "MullionThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_MullionThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "MullionThickness", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_FirstTransomOffset() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "FirstTransomOffset", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_FirstTransomOffset(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "FirstTransomOffset", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_SecondTransomOffset() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "SecondTransomOffset", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_SecondTransomOffset(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "SecondTransomOffset", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_FirstMullionOffset() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "FirstMullionOffset", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_FirstMullionOffset(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "FirstMullionOffset", sdaiREAL, &value); }

        Nullable<IfcNormalisedRatioMeasure> get_SecondMullionOffset() { IfcNormalisedRatioMeasure val = (IfcNormalisedRatioMeasure) 0; if (sdaiGetAttrBN(m_instance, "SecondMullionOffset", sdaiREAL, &val)) return val; else return Nullable<IfcNormalisedRatioMeasure>(); }
        void put_SecondMullionOffset(IfcNormalisedRatioMeasure value) { sdaiPutAttrBN(m_instance, "SecondMullionOffset", sdaiREAL, &value); }

        IfcShapeAspect get_ShapeAspectStyle();
        void put_ShapeAspectStyle(IfcShapeAspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWindowPanelProperties
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWindowPanelProperties : public virtual IfcPropertySetDefinition
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWindowPanelProperties
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWindowPanelProperties(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWindowPanelProperties")
        {}

                /// <summary>
                /// Create new instace of IfcWindowPanelProperties and returns object of this C++ class to interact with
                /// </summary>
        static IfcWindowPanelProperties Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWindowPanelProperties"); assert(inst); return inst; }

        Nullable<IfcWindowPanelOperationEnum> get_OperationType() { int v = getENUM("OperationType", IfcWindowPanelOperationEnum_); if (v >= 0) return (IfcWindowPanelOperationEnum) v; else return Nullable<IfcWindowPanelOperationEnum>(); }
        void put_OperationType(IfcWindowPanelOperationEnum value) { TextValue val = IfcWindowPanelOperationEnum_[(int) value]; sdaiPutAttrBN(m_instance, "OperationType", sdaiENUM, val); }

        Nullable<IfcWindowPanelPositionEnum> get_PanelPosition() { int v = getENUM("PanelPosition", IfcWindowPanelPositionEnum_); if (v >= 0) return (IfcWindowPanelPositionEnum) v; else return Nullable<IfcWindowPanelPositionEnum>(); }
        void put_PanelPosition(IfcWindowPanelPositionEnum value) { TextValue val = IfcWindowPanelPositionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "PanelPosition", sdaiENUM, val); }

        Nullable<IfcPositiveLengthMeasure> get_FrameDepth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FrameDepth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FrameDepth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FrameDepth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FrameThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FrameThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FrameThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FrameThickness", sdaiREAL, &value); }

        IfcShapeAspect get_ShapeAspectStyle();
        void put_ShapeAspectStyle(IfcShapeAspect inst);
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWindowStyle
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWindowStyle : public virtual IfcTypeProduct
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWindowStyle
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWindowStyle(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWindowStyle")
        {}

                /// <summary>
                /// Create new instace of IfcWindowStyle and returns object of this C++ class to interact with
                /// </summary>
        static IfcWindowStyle Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWindowStyle"); assert(inst); return inst; }

        Nullable<IfcWindowStyleConstructionEnum> get_ConstructionType() { int v = getENUM("ConstructionType", IfcWindowStyleConstructionEnum_); if (v >= 0) return (IfcWindowStyleConstructionEnum) v; else return Nullable<IfcWindowStyleConstructionEnum>(); }
        void put_ConstructionType(IfcWindowStyleConstructionEnum value) { TextValue val = IfcWindowStyleConstructionEnum_[(int) value]; sdaiPutAttrBN(m_instance, "ConstructionType", sdaiENUM, val); }

        Nullable<IfcWindowStyleOperationEnum> get_OperationType() { int v = getENUM("OperationType", IfcWindowStyleOperationEnum_); if (v >= 0) return (IfcWindowStyleOperationEnum) v; else return Nullable<IfcWindowStyleOperationEnum>(); }
        void put_OperationType(IfcWindowStyleOperationEnum value) { TextValue val = IfcWindowStyleOperationEnum_[(int) value]; sdaiPutAttrBN(m_instance, "OperationType", sdaiENUM, val); }

        Nullable<bool> get_ParameterTakesPrecedence() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "ParameterTakesPrecedence", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_ParameterTakesPrecedence(bool value) { sdaiPutAttrBN(m_instance, "ParameterTakesPrecedence", sdaiBOOLEAN, &value); }

        Nullable<bool> get_Sizeable() { bool val = (bool) 0; if (sdaiGetAttrBN(m_instance, "Sizeable", sdaiBOOLEAN, &val)) return val; else return Nullable<bool>(); }
        void put_Sizeable(bool value) { sdaiPutAttrBN(m_instance, "Sizeable", sdaiBOOLEAN, &value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWorkControl
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWorkControl : public virtual IfcControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWorkControl
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWorkControl(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWorkControl")
        {}


        IfcIdentifier get_Identifier() { IfcIdentifier val = NULL; if (sdaiGetAttrBN(m_instance, "Identifier", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Identifier(IfcIdentifier value) { sdaiPutAttrBN(m_instance, "Identifier", sdaiSTRING, value); }

        IfcDateTimeSelect_get get_CreationDate() { return IfcDateTimeSelect_get(m_instance, "CreationDate", NULL); }
        IfcDateTimeSelect_put put_CreationDate() { return IfcDateTimeSelect_put(m_instance, "CreationDate", NULL); }

        //TList may be SetOfIfcPerson or list of converible elements
        template <typename TList> void get_Creators(TList& lst) { SetOfIfcPersonSerializer<TList> sr; sr.FromAttr(lst, m_instance, "Creators"); }

        //TList may be SetOfIfcPerson or list of converible elements
        template <typename TList> void put_Creators(TList& lst) { SetOfIfcPersonSerializer<TList> sr;  sr.ToSdaiAggr(lst, m_instance, "Creators"); }

        //TArrayElem[] may be IfcPerson[] or array of convertible elements
        template <typename TArrayElem> void put_Creators(TArrayElem arr[], size_t n) { SetOfIfcPerson lst; ArrayToList(arr, n, lst); put_Creators(lst); }

        IfcLabel get_Purpose() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "Purpose", sdaiSTRING, &val)) return val; else return NULL; }
        void put_Purpose(IfcLabel value) { sdaiPutAttrBN(m_instance, "Purpose", sdaiSTRING, value); }

        Nullable<IfcTimeMeasure> get_Duration() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "Duration", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_Duration(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "Duration", sdaiREAL, &value); }

        Nullable<IfcTimeMeasure> get_TotalFloat() { IfcTimeMeasure val = (IfcTimeMeasure) 0; if (sdaiGetAttrBN(m_instance, "TotalFloat", sdaiREAL, &val)) return val; else return Nullable<IfcTimeMeasure>(); }
        void put_TotalFloat(IfcTimeMeasure value) { sdaiPutAttrBN(m_instance, "TotalFloat", sdaiREAL, &value); }

        IfcDateTimeSelect_get get_StartTime() { return IfcDateTimeSelect_get(m_instance, "StartTime", NULL); }
        IfcDateTimeSelect_put put_StartTime() { return IfcDateTimeSelect_put(m_instance, "StartTime", NULL); }

        IfcDateTimeSelect_get get_FinishTime() { return IfcDateTimeSelect_get(m_instance, "FinishTime", NULL); }
        IfcDateTimeSelect_put put_FinishTime() { return IfcDateTimeSelect_put(m_instance, "FinishTime", NULL); }

        Nullable<IfcWorkControlTypeEnum> get_WorkControlType() { int v = getENUM("WorkControlType", IfcWorkControlTypeEnum_); if (v >= 0) return (IfcWorkControlTypeEnum) v; else return Nullable<IfcWorkControlTypeEnum>(); }
        void put_WorkControlType(IfcWorkControlTypeEnum value) { TextValue val = IfcWorkControlTypeEnum_[(int) value]; sdaiPutAttrBN(m_instance, "WorkControlType", sdaiENUM, val); }

        IfcLabel get_UserDefinedControlType() { IfcLabel val = NULL; if (sdaiGetAttrBN(m_instance, "UserDefinedControlType", sdaiSTRING, &val)) return val; else return NULL; }
        void put_UserDefinedControlType(IfcLabel value) { sdaiPutAttrBN(m_instance, "UserDefinedControlType", sdaiSTRING, value); }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWorkPlan
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWorkPlan : public virtual IfcWorkControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWorkPlan
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWorkPlan(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWorkPlan")
        {}

                /// <summary>
                /// Create new instace of IfcWorkPlan and returns object of this C++ class to interact with
                /// </summary>
        static IfcWorkPlan Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWorkPlan"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcWorkSchedule
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcWorkSchedule : public virtual IfcWorkControl
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcWorkSchedule
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcWorkSchedule(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcWorkSchedule")
        {}

                /// <summary>
                /// Create new instace of IfcWorkSchedule and returns object of this C++ class to interact with
                /// </summary>
        static IfcWorkSchedule Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcWorkSchedule"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcZone
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcZone : public virtual IfcGroup
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcZone
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcZone(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcZone")
        {}

                /// <summary>
                /// Create new instace of IfcZone and returns object of this C++ class to interact with
                /// </summary>
        static IfcZone Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcZone"); assert(inst); return inst; }
    };


        /// <summary>
        /// Provides utility methods to interact with an instnace of IfcZShapeProfileDef
        /// You also can use object of this C++ class instead of IntValue handle of the OWL instance in any place where the handle is required
        /// </summary>
    class IfcZShapeProfileDef : public virtual IfcParameterizedProfileDef
    {
    public:
        /// <summary>
        /// Constructs object of this C++ class that wraps existing SdaiInstance of IfcZShapeProfileDef
        /// </summary>
        /// <param name="instance">An instance to interact with</param>
        IfcZShapeProfileDef(SdaiInstance instance = NULL, TextValue entityName = NULL)
            : Entity(instance, entityName ? entityName : "IfcZShapeProfileDef")
        {}

                /// <summary>
                /// Create new instace of IfcZShapeProfileDef and returns object of this C++ class to interact with
                /// </summary>
        static IfcZShapeProfileDef Create(SdaiModel model) { SdaiInstance inst = sdaiCreateInstanceBN(model, "IfcZShapeProfileDef"); assert(inst); return inst; }

        Nullable<IfcPositiveLengthMeasure> get_Depth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "Depth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_Depth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "Depth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeWidth() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeWidth", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeWidth(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeWidth", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_WebThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "WebThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_WebThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "WebThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FlangeThickness() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FlangeThickness", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FlangeThickness(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FlangeThickness", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_FilletRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "FilletRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_FilletRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "FilletRadius", sdaiREAL, &value); }

        Nullable<IfcPositiveLengthMeasure> get_EdgeRadius() { IfcPositiveLengthMeasure val = (IfcPositiveLengthMeasure) 0; if (sdaiGetAttrBN(m_instance, "EdgeRadius", sdaiREAL, &val)) return val; else return Nullable<IfcPositiveLengthMeasure>(); }
        void put_EdgeRadius(IfcPositiveLengthMeasure value) { sdaiPutAttrBN(m_instance, "EdgeRadius", sdaiREAL, &value); }
    };

    inline IfcOrganization IfcActorSelect::get_IfcOrganization() { return getEntityInstance("IFCORGANIZATION"); }
    inline void IfcActorSelect::put_IfcOrganization(IfcOrganization inst) { putEntityInstance("IFCORGANIZATION", inst); }
    inline IfcPerson IfcActorSelect::get_IfcPerson() { return getEntityInstance("IFCPERSON"); }
    inline void IfcActorSelect::put_IfcPerson(IfcPerson inst) { putEntityInstance("IFCPERSON", inst); }
    inline IfcPersonAndOrganization IfcActorSelect::get_IfcPersonAndOrganization() { return getEntityInstance("IFCPERSONANDORGANIZATION"); }
    inline void IfcActorSelect::put_IfcPersonAndOrganization(IfcPersonAndOrganization inst) { putEntityInstance("IFCPERSONANDORGANIZATION", inst); }
    inline IfcOrganization IfcActorSelect_get::get_IfcOrganization() { return getEntityInstance("IFCORGANIZATION"); }
    inline IfcPerson IfcActorSelect_get::get_IfcPerson() { return getEntityInstance("IFCPERSON"); }
    inline IfcPersonAndOrganization IfcActorSelect_get::get_IfcPersonAndOrganization() { return getEntityInstance("IFCPERSONANDORGANIZATION"); }
    inline void IfcActorSelect_put::put_IfcOrganization(IfcOrganization inst) { putEntityInstance("IFCORGANIZATION", inst); }
    inline void IfcActorSelect_put::put_IfcPerson(IfcPerson inst) { putEntityInstance("IFCPERSON", inst); }
    inline void IfcActorSelect_put::put_IfcPersonAndOrganization(IfcPersonAndOrganization inst) { putEntityInstance("IFCPERSONANDORGANIZATION", inst); }
    inline IfcMeasureWithUnit IfcAppliedValueSelect::get_IfcMeasureWithUnit() { return getEntityInstance("IFCMEASUREWITHUNIT"); }
    inline void IfcAppliedValueSelect::put_IfcMeasureWithUnit(IfcMeasureWithUnit inst) { putEntityInstance("IFCMEASUREWITHUNIT", inst); }
    inline IfcMeasureWithUnit IfcAppliedValueSelect_get::get_IfcMeasureWithUnit() { return getEntityInstance("IFCMEASUREWITHUNIT"); }
    inline void IfcAppliedValueSelect_put::put_IfcMeasureWithUnit(IfcMeasureWithUnit inst) { putEntityInstance("IFCMEASUREWITHUNIT", inst); }
    inline IfcAxis2Placement2D IfcAxis2Placement::get_IfcAxis2Placement2D() { return getEntityInstance("IFCAXIS2PLACEMENT2D"); }
    inline void IfcAxis2Placement::put_IfcAxis2Placement2D(IfcAxis2Placement2D inst) { putEntityInstance("IFCAXIS2PLACEMENT2D", inst); }
    inline IfcAxis2Placement3D IfcAxis2Placement::get_IfcAxis2Placement3D() { return getEntityInstance("IFCAXIS2PLACEMENT3D"); }
    inline void IfcAxis2Placement::put_IfcAxis2Placement3D(IfcAxis2Placement3D inst) { putEntityInstance("IFCAXIS2PLACEMENT3D", inst); }
    inline IfcAxis2Placement2D IfcAxis2Placement_get::get_IfcAxis2Placement2D() { return getEntityInstance("IFCAXIS2PLACEMENT2D"); }
    inline IfcAxis2Placement3D IfcAxis2Placement_get::get_IfcAxis2Placement3D() { return getEntityInstance("IFCAXIS2PLACEMENT3D"); }
    inline void IfcAxis2Placement_put::put_IfcAxis2Placement2D(IfcAxis2Placement2D inst) { putEntityInstance("IFCAXIS2PLACEMENT2D", inst); }
    inline void IfcAxis2Placement_put::put_IfcAxis2Placement3D(IfcAxis2Placement3D inst) { putEntityInstance("IFCAXIS2PLACEMENT3D", inst); }
    inline IfcSolidModel IfcBooleanOperand::get_IfcSolidModel() { return getEntityInstance("IFCSOLIDMODEL"); }
    inline void IfcBooleanOperand::put_IfcSolidModel(IfcSolidModel inst) { putEntityInstance("IFCSOLIDMODEL", inst); }
    inline IfcHalfSpaceSolid IfcBooleanOperand::get_IfcHalfSpaceSolid() { return getEntityInstance("IFCHALFSPACESOLID"); }
    inline void IfcBooleanOperand::put_IfcHalfSpaceSolid(IfcHalfSpaceSolid inst) { putEntityInstance("IFCHALFSPACESOLID", inst); }
    inline IfcBooleanResult IfcBooleanOperand::get_IfcBooleanResult() { return getEntityInstance("IFCBOOLEANRESULT"); }
    inline void IfcBooleanOperand::put_IfcBooleanResult(IfcBooleanResult inst) { putEntityInstance("IFCBOOLEANRESULT", inst); }
    inline IfcCsgPrimitive3D IfcBooleanOperand::get_IfcCsgPrimitive3D() { return getEntityInstance("IFCCSGPRIMITIVE3D"); }
    inline void IfcBooleanOperand::put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst) { putEntityInstance("IFCCSGPRIMITIVE3D", inst); }
    inline IfcSolidModel IfcBooleanOperand_get::get_IfcSolidModel() { return getEntityInstance("IFCSOLIDMODEL"); }
    inline IfcHalfSpaceSolid IfcBooleanOperand_get::get_IfcHalfSpaceSolid() { return getEntityInstance("IFCHALFSPACESOLID"); }
    inline IfcBooleanResult IfcBooleanOperand_get::get_IfcBooleanResult() { return getEntityInstance("IFCBOOLEANRESULT"); }
    inline IfcCsgPrimitive3D IfcBooleanOperand_get::get_IfcCsgPrimitive3D() { return getEntityInstance("IFCCSGPRIMITIVE3D"); }
    inline void IfcBooleanOperand_put::put_IfcSolidModel(IfcSolidModel inst) { putEntityInstance("IFCSOLIDMODEL", inst); }
    inline void IfcBooleanOperand_put::put_IfcHalfSpaceSolid(IfcHalfSpaceSolid inst) { putEntityInstance("IFCHALFSPACESOLID", inst); }
    inline void IfcBooleanOperand_put::put_IfcBooleanResult(IfcBooleanResult inst) { putEntityInstance("IFCBOOLEANRESULT", inst); }
    inline void IfcBooleanOperand_put::put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst) { putEntityInstance("IFCCSGPRIMITIVE3D", inst); }
    inline IfcTextStyleForDefinedFont IfcCharacterStyleSelect::get_IfcTextStyleForDefinedFont() { return getEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT"); }
    inline void IfcCharacterStyleSelect::put_IfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont inst) { putEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT", inst); }
    inline IfcTextStyleForDefinedFont IfcCharacterStyleSelect_get::get_IfcTextStyleForDefinedFont() { return getEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT"); }
    inline void IfcCharacterStyleSelect_put::put_IfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont inst) { putEntityInstance("IFCTEXTSTYLEFORDEFINEDFONT", inst); }
    inline IfcClassificationNotation IfcClassificationNotationSelect::get_IfcClassificationNotation() { return getEntityInstance("IFCCLASSIFICATIONNOTATION"); }
    inline void IfcClassificationNotationSelect::put_IfcClassificationNotation(IfcClassificationNotation inst) { putEntityInstance("IFCCLASSIFICATIONNOTATION", inst); }
    inline IfcClassificationReference IfcClassificationNotationSelect::get_IfcClassificationReference() { return getEntityInstance("IFCCLASSIFICATIONREFERENCE"); }
    inline void IfcClassificationNotationSelect::put_IfcClassificationReference(IfcClassificationReference inst) { putEntityInstance("IFCCLASSIFICATIONREFERENCE", inst); }
    inline IfcClassificationNotation IfcClassificationNotationSelect_get::get_IfcClassificationNotation() { return getEntityInstance("IFCCLASSIFICATIONNOTATION"); }
    inline IfcClassificationReference IfcClassificationNotationSelect_get::get_IfcClassificationReference() { return getEntityInstance("IFCCLASSIFICATIONREFERENCE"); }
    inline void IfcClassificationNotationSelect_put::put_IfcClassificationNotation(IfcClassificationNotation inst) { putEntityInstance("IFCCLASSIFICATIONNOTATION", inst); }
    inline void IfcClassificationNotationSelect_put::put_IfcClassificationReference(IfcClassificationReference inst) { putEntityInstance("IFCCLASSIFICATIONREFERENCE", inst); }
    inline IfcColourSpecification IfcColour::get_IfcColourSpecification() { return getEntityInstance("IFCCOLOURSPECIFICATION"); }
    inline void IfcColour::put_IfcColourSpecification(IfcColourSpecification inst) { putEntityInstance("IFCCOLOURSPECIFICATION", inst); }
    inline IfcPreDefinedColour IfcColour::get_IfcPreDefinedColour() { return getEntityInstance("IFCPREDEFINEDCOLOUR"); }
    inline void IfcColour::put_IfcPreDefinedColour(IfcPreDefinedColour inst) { putEntityInstance("IFCPREDEFINEDCOLOUR", inst); }
    inline IfcColourSpecification IfcColour_get::get_IfcColourSpecification() { return getEntityInstance("IFCCOLOURSPECIFICATION"); }
    inline IfcPreDefinedColour IfcColour_get::get_IfcPreDefinedColour() { return getEntityInstance("IFCPREDEFINEDCOLOUR"); }
    inline void IfcColour_put::put_IfcColourSpecification(IfcColourSpecification inst) { putEntityInstance("IFCCOLOURSPECIFICATION", inst); }
    inline void IfcColour_put::put_IfcPreDefinedColour(IfcPreDefinedColour inst) { putEntityInstance("IFCPREDEFINEDCOLOUR", inst); }
    inline IfcColourRgb IfcColourOrFactor::get_IfcColourRgb() { return getEntityInstance("IFCCOLOURRGB"); }
    inline void IfcColourOrFactor::put_IfcColourRgb(IfcColourRgb inst) { putEntityInstance("IFCCOLOURRGB", inst); }
    inline IfcColourRgb IfcColourOrFactor_get::get_IfcColourRgb() { return getEntityInstance("IFCCOLOURRGB"); }
    inline void IfcColourOrFactor_put::put_IfcColourRgb(IfcColourRgb inst) { putEntityInstance("IFCCOLOURRGB", inst); }
    inline IfcMeasureWithUnit IfcConditionCriterionSelect::get_IfcMeasureWithUnit() { return getEntityInstance("IFCMEASUREWITHUNIT"); }
    inline void IfcConditionCriterionSelect::put_IfcMeasureWithUnit(IfcMeasureWithUnit inst) { putEntityInstance("IFCMEASUREWITHUNIT", inst); }
    inline IfcMeasureWithUnit IfcConditionCriterionSelect_get::get_IfcMeasureWithUnit() { return getEntityInstance("IFCMEASUREWITHUNIT"); }
    inline void IfcConditionCriterionSelect_put::put_IfcMeasureWithUnit(IfcMeasureWithUnit inst) { putEntityInstance("IFCMEASUREWITHUNIT", inst); }
    inline IfcBooleanResult IfcCsgSelect::get_IfcBooleanResult() { return getEntityInstance("IFCBOOLEANRESULT"); }
    inline void IfcCsgSelect::put_IfcBooleanResult(IfcBooleanResult inst) { putEntityInstance("IFCBOOLEANRESULT", inst); }
    inline IfcCsgPrimitive3D IfcCsgSelect::get_IfcCsgPrimitive3D() { return getEntityInstance("IFCCSGPRIMITIVE3D"); }
    inline void IfcCsgSelect::put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst) { putEntityInstance("IFCCSGPRIMITIVE3D", inst); }
    inline IfcBooleanResult IfcCsgSelect_get::get_IfcBooleanResult() { return getEntityInstance("IFCBOOLEANRESULT"); }
    inline IfcCsgPrimitive3D IfcCsgSelect_get::get_IfcCsgPrimitive3D() { return getEntityInstance("IFCCSGPRIMITIVE3D"); }
    inline void IfcCsgSelect_put::put_IfcBooleanResult(IfcBooleanResult inst) { putEntityInstance("IFCBOOLEANRESULT", inst); }
    inline void IfcCsgSelect_put::put_IfcCsgPrimitive3D(IfcCsgPrimitive3D inst) { putEntityInstance("IFCCSGPRIMITIVE3D", inst); }
    inline IfcPreDefinedCurveFont IfcCurveStyleFontSelect::get_IfcPreDefinedCurveFont() { return getEntityInstance("IFCPREDEFINEDCURVEFONT"); }
    inline void IfcCurveStyleFontSelect::put_IfcPreDefinedCurveFont(IfcPreDefinedCurveFont inst) { putEntityInstance("IFCPREDEFINEDCURVEFONT", inst); }
    inline IfcCurveStyleFont IfcCurveStyleFontSelect::get_IfcCurveStyleFont() { return getEntityInstance("IFCCURVESTYLEFONT"); }
    inline void IfcCurveStyleFontSelect::put_IfcCurveStyleFont(IfcCurveStyleFont inst) { putEntityInstance("IFCCURVESTYLEFONT", inst); }
    inline IfcPreDefinedCurveFont IfcCurveStyleFontSelect_get::get_IfcPreDefinedCurveFont() { return getEntityInstance("IFCPREDEFINEDCURVEFONT"); }
    inline IfcCurveStyleFont IfcCurveStyleFontSelect_get::get_IfcCurveStyleFont() { return getEntityInstance("IFCCURVESTYLEFONT"); }
    inline void IfcCurveStyleFontSelect_put::put_IfcPreDefinedCurveFont(IfcPreDefinedCurveFont inst) { putEntityInstance("IFCPREDEFINEDCURVEFONT", inst); }
    inline void IfcCurveStyleFontSelect_put::put_IfcCurveStyleFont(IfcCurveStyleFont inst) { putEntityInstance("IFCCURVESTYLEFONT", inst); }
    inline IfcCurveStyleFontAndScaling IfcCurveFontOrScaledCurveFontSelect::get_IfcCurveStyleFontAndScaling() { return getEntityInstance("IFCCURVESTYLEFONTANDSCALING"); }
    inline void IfcCurveFontOrScaledCurveFontSelect::put_IfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling inst) { putEntityInstance("IFCCURVESTYLEFONTANDSCALING", inst); }
    inline IfcCurveStyleFontAndScaling IfcCurveFontOrScaledCurveFontSelect_get::get_IfcCurveStyleFontAndScaling() { return getEntityInstance("IFCCURVESTYLEFONTANDSCALING"); }
    inline void IfcCurveFontOrScaledCurveFontSelect_put::put_IfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling inst) { putEntityInstance("IFCCURVESTYLEFONTANDSCALING", inst); }
    inline IfcBoundedCurve IfcCurveOrEdgeCurve::get_IfcBoundedCurve() { return getEntityInstance("IFCBOUNDEDCURVE"); }
    inline void IfcCurveOrEdgeCurve::put_IfcBoundedCurve(IfcBoundedCurve inst) { putEntityInstance("IFCBOUNDEDCURVE", inst); }
    inline IfcEdgeCurve IfcCurveOrEdgeCurve::get_IfcEdgeCurve() { return getEntityInstance("IFCEDGECURVE"); }
    inline void IfcCurveOrEdgeCurve::put_IfcEdgeCurve(IfcEdgeCurve inst) { putEntityInstance("IFCEDGECURVE", inst); }
    inline IfcBoundedCurve IfcCurveOrEdgeCurve_get::get_IfcBoundedCurve() { return getEntityInstance("IFCBOUNDEDCURVE"); }
    inline IfcEdgeCurve IfcCurveOrEdgeCurve_get::get_IfcEdgeCurve() { return getEntityInstance("IFCEDGECURVE"); }
    inline void IfcCurveOrEdgeCurve_put::put_IfcBoundedCurve(IfcBoundedCurve inst) { putEntityInstance("IFCBOUNDEDCURVE", inst); }
    inline void IfcCurveOrEdgeCurve_put::put_IfcEdgeCurve(IfcEdgeCurve inst) { putEntityInstance("IFCEDGECURVE", inst); }
    inline IfcCalendarDate IfcDateTimeSelect::get_IfcCalendarDate() { return getEntityInstance("IFCCALENDARDATE"); }
    inline void IfcDateTimeSelect::put_IfcCalendarDate(IfcCalendarDate inst) { putEntityInstance("IFCCALENDARDATE", inst); }
    inline IfcLocalTime IfcDateTimeSelect::get_IfcLocalTime() { return getEntityInstance("IFCLOCALTIME"); }
    inline void IfcDateTimeSelect::put_IfcLocalTime(IfcLocalTime inst) { putEntityInstance("IFCLOCALTIME", inst); }
    inline IfcDateAndTime IfcDateTimeSelect::get_IfcDateAndTime() { return getEntityInstance("IFCDATEANDTIME"); }
    inline void IfcDateTimeSelect::put_IfcDateAndTime(IfcDateAndTime inst) { putEntityInstance("IFCDATEANDTIME", inst); }
    inline IfcCalendarDate IfcDateTimeSelect_get::get_IfcCalendarDate() { return getEntityInstance("IFCCALENDARDATE"); }
    inline IfcLocalTime IfcDateTimeSelect_get::get_IfcLocalTime() { return getEntityInstance("IFCLOCALTIME"); }
    inline IfcDateAndTime IfcDateTimeSelect_get::get_IfcDateAndTime() { return getEntityInstance("IFCDATEANDTIME"); }
    inline void IfcDateTimeSelect_put::put_IfcCalendarDate(IfcCalendarDate inst) { putEntityInstance("IFCCALENDARDATE", inst); }
    inline void IfcDateTimeSelect_put::put_IfcLocalTime(IfcLocalTime inst) { putEntityInstance("IFCLOCALTIME", inst); }
    inline void IfcDateTimeSelect_put::put_IfcDateAndTime(IfcDateAndTime inst) { putEntityInstance("IFCDATEANDTIME", inst); }
    inline IfcPreDefinedSymbol IfcDefinedSymbolSelect::get_IfcPreDefinedSymbol() { return getEntityInstance("IFCPREDEFINEDSYMBOL"); }
    inline void IfcDefinedSymbolSelect::put_IfcPreDefinedSymbol(IfcPreDefinedSymbol inst) { putEntityInstance("IFCPREDEFINEDSYMBOL", inst); }
    inline IfcExternallyDefinedSymbol IfcDefinedSymbolSelect::get_IfcExternallyDefinedSymbol() { return getEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL"); }
    inline void IfcDefinedSymbolSelect::put_IfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol inst) { putEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL", inst); }
    inline IfcPreDefinedSymbol IfcDefinedSymbolSelect_get::get_IfcPreDefinedSymbol() { return getEntityInstance("IFCPREDEFINEDSYMBOL"); }
    inline IfcExternallyDefinedSymbol IfcDefinedSymbolSelect_get::get_IfcExternallyDefinedSymbol() { return getEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL"); }
    inline void IfcDefinedSymbolSelect_put::put_IfcPreDefinedSymbol(IfcPreDefinedSymbol inst) { putEntityInstance("IFCPREDEFINEDSYMBOL", inst); }
    inline void IfcDefinedSymbolSelect_put::put_IfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol inst) { putEntityInstance("IFCEXTERNALLYDEFINEDSYMBOL", inst); }
    inline IfcDocumentReference IfcDocumentSelect::get_IfcDocumentReference() { return getEntityInstance("IFCDOCUMENTREFERENCE"); }
    inline void IfcDocumentSelect::put_IfcDocumentReference(IfcDocumentReference inst) { putEntityInstance("IFCDOCUMENTREFERENCE", inst); }
    inline IfcDocumentInformation IfcDocumentSelect::get_IfcDocumentInformation() { return getEntityInstance("IFCDOCUMENTINFORMATION"); }
    inline void IfcDocumentSelect::put_IfcDocumentInformation(IfcDocumentInformation inst) { putEntityInstance("IFCDOCUMENTINFORMATION", inst); }
    inline IfcDocumentReference IfcDocumentSelect_get::get_IfcDocumentReference() { return getEntityInstance("IFCDOCUMENTREFERENCE"); }
    inline IfcDocumentInformation IfcDocumentSelect_get::get_IfcDocumentInformation() { return getEntityInstance("IFCDOCUMENTINFORMATION"); }
    inline void IfcDocumentSelect_put::put_IfcDocumentReference(IfcDocumentReference inst) { putEntityInstance("IFCDOCUMENTREFERENCE", inst); }
    inline void IfcDocumentSelect_put::put_IfcDocumentInformation(IfcDocumentInformation inst) { putEntityInstance("IFCDOCUMENTINFORMATION", inst); }
    inline IfcAnnotationCurveOccurrence IfcDraughtingCalloutElement::get_IfcAnnotationCurveOccurrence() { return getEntityInstance("IFCANNOTATIONCURVEOCCURRENCE"); }
    inline void IfcDraughtingCalloutElement::put_IfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence inst) { putEntityInstance("IFCANNOTATIONCURVEOCCURRENCE", inst); }
    inline IfcAnnotationTextOccurrence IfcDraughtingCalloutElement::get_IfcAnnotationTextOccurrence() { return getEntityInstance("IFCANNOTATIONTEXTOCCURRENCE"); }
    inline void IfcDraughtingCalloutElement::put_IfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence inst) { putEntityInstance("IFCANNOTATIONTEXTOCCURRENCE", inst); }
    inline IfcAnnotationSymbolOccurrence IfcDraughtingCalloutElement::get_IfcAnnotationSymbolOccurrence() { return getEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE"); }
    inline void IfcDraughtingCalloutElement::put_IfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence inst) { putEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE", inst); }
    inline IfcAnnotationCurveOccurrence IfcDraughtingCalloutElement_get::get_IfcAnnotationCurveOccurrence() { return getEntityInstance("IFCANNOTATIONCURVEOCCURRENCE"); }
    inline IfcAnnotationTextOccurrence IfcDraughtingCalloutElement_get::get_IfcAnnotationTextOccurrence() { return getEntityInstance("IFCANNOTATIONTEXTOCCURRENCE"); }
    inline IfcAnnotationSymbolOccurrence IfcDraughtingCalloutElement_get::get_IfcAnnotationSymbolOccurrence() { return getEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE"); }
    inline void IfcDraughtingCalloutElement_put::put_IfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence inst) { putEntityInstance("IFCANNOTATIONCURVEOCCURRENCE", inst); }
    inline void IfcDraughtingCalloutElement_put::put_IfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence inst) { putEntityInstance("IFCANNOTATIONTEXTOCCURRENCE", inst); }
    inline void IfcDraughtingCalloutElement_put::put_IfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence inst) { putEntityInstance("IFCANNOTATIONSYMBOLOCCURRENCE", inst); }
    inline IfcFillAreaStyleTileSymbolWithStyle IfcFillAreaStyleTileShapeSelect::get_IfcFillAreaStyleTileSymbolWithStyle() { return getEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE"); }
    inline void IfcFillAreaStyleTileShapeSelect::put_IfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle inst) { putEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE", inst); }
    inline IfcFillAreaStyleTileSymbolWithStyle IfcFillAreaStyleTileShapeSelect_get::get_IfcFillAreaStyleTileSymbolWithStyle() { return getEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE"); }
    inline void IfcFillAreaStyleTileShapeSelect_put::put_IfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle inst) { putEntityInstance("IFCFILLAREASTYLETILESYMBOLWITHSTYLE", inst); }
    inline IfcFillAreaStyleHatching IfcFillStyleSelect::get_IfcFillAreaStyleHatching() { return getEntityInstance("IFCFILLAREASTYLEHATCHING"); }
    inline void IfcFillStyleSelect::put_IfcFillAreaStyleHatching(IfcFillAreaStyleHatching inst) { putEntityInstance("IFCFILLAREASTYLEHATCHING", inst); }
    inline IfcFillAreaStyleTiles IfcFillStyleSelect::get_IfcFillAreaStyleTiles() { return getEntityInstance("IFCFILLAREASTYLETILES"); }
    inline void IfcFillStyleSelect::put_IfcFillAreaStyleTiles(IfcFillAreaStyleTiles inst) { putEntityInstance("IFCFILLAREASTYLETILES", inst); }
    inline IfcExternallyDefinedHatchStyle IfcFillStyleSelect::get_IfcExternallyDefinedHatchStyle() { return getEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE"); }
    inline void IfcFillStyleSelect::put_IfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle inst) { putEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE", inst); }
    inline IfcFillAreaStyleHatching IfcFillStyleSelect_get::get_IfcFillAreaStyleHatching() { return getEntityInstance("IFCFILLAREASTYLEHATCHING"); }
    inline IfcFillAreaStyleTiles IfcFillStyleSelect_get::get_IfcFillAreaStyleTiles() { return getEntityInstance("IFCFILLAREASTYLETILES"); }
    inline IfcExternallyDefinedHatchStyle IfcFillStyleSelect_get::get_IfcExternallyDefinedHatchStyle() { return getEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE"); }
    inline void IfcFillStyleSelect_put::put_IfcFillAreaStyleHatching(IfcFillAreaStyleHatching inst) { putEntityInstance("IFCFILLAREASTYLEHATCHING", inst); }
    inline void IfcFillStyleSelect_put::put_IfcFillAreaStyleTiles(IfcFillAreaStyleTiles inst) { putEntityInstance("IFCFILLAREASTYLETILES", inst); }
    inline void IfcFillStyleSelect_put::put_IfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle inst) { putEntityInstance("IFCEXTERNALLYDEFINEDHATCHSTYLE", inst); }
    inline IfcPoint IfcGeometricSetSelect::get_IfcPoint() { return getEntityInstance("IFCPOINT"); }
    inline void IfcGeometricSetSelect::put_IfcPoint(IfcPoint inst) { putEntityInstance("IFCPOINT", inst); }
    inline IfcCurve IfcGeometricSetSelect::get_IfcCurve() { return getEntityInstance("IFCCURVE"); }
    inline void IfcGeometricSetSelect::put_IfcCurve(IfcCurve inst) { putEntityInstance("IFCCURVE", inst); }
    inline IfcSurface IfcGeometricSetSelect::get_IfcSurface() { return getEntityInstance("IFCSURFACE"); }
    inline void IfcGeometricSetSelect::put_IfcSurface(IfcSurface inst) { putEntityInstance("IFCSURFACE", inst); }
    inline IfcPoint IfcGeometricSetSelect_get::get_IfcPoint() { return getEntityInstance("IFCPOINT"); }
    inline IfcCurve IfcGeometricSetSelect_get::get_IfcCurve() { return getEntityInstance("IFCCURVE"); }
    inline IfcSurface IfcGeometricSetSelect_get::get_IfcSurface() { return getEntityInstance("IFCSURFACE"); }
    inline void IfcGeometricSetSelect_put::put_IfcPoint(IfcPoint inst) { putEntityInstance("IFCPOINT", inst); }
    inline void IfcGeometricSetSelect_put::put_IfcCurve(IfcCurve inst) { putEntityInstance("IFCCURVE", inst); }
    inline void IfcGeometricSetSelect_put::put_IfcSurface(IfcSurface inst) { putEntityInstance("IFCSURFACE", inst); }
    inline IfcOneDirectionRepeatFactor IfcHatchLineDistanceSelect::get_IfcOneDirectionRepeatFactor() { return getEntityInstance("IFCONEDIRECTIONREPEATFACTOR"); }
    inline void IfcHatchLineDistanceSelect::put_IfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor inst) { putEntityInstance("IFCONEDIRECTIONREPEATFACTOR", inst); }
    inline IfcOneDirectionRepeatFactor IfcHatchLineDistanceSelect_get::get_IfcOneDirectionRepeatFactor() { return getEntityInstance("IFCONEDIRECTIONREPEATFACTOR"); }
    inline void IfcHatchLineDistanceSelect_put::put_IfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor inst) { putEntityInstance("IFCONEDIRECTIONREPEATFACTOR", inst); }
    inline IfcRepresentationItem IfcLayeredItem::get_IfcRepresentationItem() { return getEntityInstance("IFCREPRESENTATIONITEM"); }
    inline void IfcLayeredItem::put_IfcRepresentationItem(IfcRepresentationItem inst) { putEntityInstance("IFCREPRESENTATIONITEM", inst); }
    inline IfcRepresentation IfcLayeredItem::get_IfcRepresentation() { return getEntityInstance("IFCREPRESENTATION"); }
    inline void IfcLayeredItem::put_IfcRepresentation(IfcRepresentation inst) { putEntityInstance("IFCREPRESENTATION", inst); }
    inline IfcRepresentationItem IfcLayeredItem_get::get_IfcRepresentationItem() { return getEntityInstance("IFCREPRESENTATIONITEM"); }
    inline IfcRepresentation IfcLayeredItem_get::get_IfcRepresentation() { return getEntityInstance("IFCREPRESENTATION"); }
    inline void IfcLayeredItem_put::put_IfcRepresentationItem(IfcRepresentationItem inst) { putEntityInstance("IFCREPRESENTATIONITEM", inst); }
    inline void IfcLayeredItem_put::put_IfcRepresentation(IfcRepresentation inst) { putEntityInstance("IFCREPRESENTATION", inst); }
    inline IfcLibraryReference IfcLibrarySelect::get_IfcLibraryReference() { return getEntityInstance("IFCLIBRARYREFERENCE"); }
    inline void IfcLibrarySelect::put_IfcLibraryReference(IfcLibraryReference inst) { putEntityInstance("IFCLIBRARYREFERENCE", inst); }
    inline IfcLibraryInformation IfcLibrarySelect::get_IfcLibraryInformation() { return getEntityInstance("IFCLIBRARYINFORMATION"); }
    inline void IfcLibrarySelect::put_IfcLibraryInformation(IfcLibraryInformation inst) { putEntityInstance("IFCLIBRARYINFORMATION", inst); }
    inline IfcLibraryReference IfcLibrarySelect_get::get_IfcLibraryReference() { return getEntityInstance("IFCLIBRARYREFERENCE"); }
    inline IfcLibraryInformation IfcLibrarySelect_get::get_IfcLibraryInformation() { return getEntityInstance("IFCLIBRARYINFORMATION"); }
    inline void IfcLibrarySelect_put::put_IfcLibraryReference(IfcLibraryReference inst) { putEntityInstance("IFCLIBRARYREFERENCE", inst); }
    inline void IfcLibrarySelect_put::put_IfcLibraryInformation(IfcLibraryInformation inst) { putEntityInstance("IFCLIBRARYINFORMATION", inst); }
    inline IfcExternalReference IfcLightDistributionDataSourceSelect::get_IfcExternalReference() { return getEntityInstance("IFCEXTERNALREFERENCE"); }
    inline void IfcLightDistributionDataSourceSelect::put_IfcExternalReference(IfcExternalReference inst) { putEntityInstance("IFCEXTERNALREFERENCE", inst); }
    inline IfcLightIntensityDistribution IfcLightDistributionDataSourceSelect::get_IfcLightIntensityDistribution() { return getEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION"); }
    inline void IfcLightDistributionDataSourceSelect::put_IfcLightIntensityDistribution(IfcLightIntensityDistribution inst) { putEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION", inst); }
    inline IfcExternalReference IfcLightDistributionDataSourceSelect_get::get_IfcExternalReference() { return getEntityInstance("IFCEXTERNALREFERENCE"); }
    inline IfcLightIntensityDistribution IfcLightDistributionDataSourceSelect_get::get_IfcLightIntensityDistribution() { return getEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION"); }
    inline void IfcLightDistributionDataSourceSelect_put::put_IfcExternalReference(IfcExternalReference inst) { putEntityInstance("IFCEXTERNALREFERENCE", inst); }
    inline void IfcLightDistributionDataSourceSelect_put::put_IfcLightIntensityDistribution(IfcLightIntensityDistribution inst) { putEntityInstance("IFCLIGHTINTENSITYDISTRIBUTION", inst); }
    inline IfcMaterial IfcMaterialSelect::get_IfcMaterial() { return getEntityInstance("IFCMATERIAL"); }
    inline void IfcMaterialSelect::put_IfcMaterial(IfcMaterial inst) { putEntityInstance("IFCMATERIAL", inst); }
    inline IfcMaterialList IfcMaterialSelect::get_IfcMaterialList() { return getEntityInstance("IFCMATERIALLIST"); }
    inline void IfcMaterialSelect::put_IfcMaterialList(IfcMaterialList inst) { putEntityInstance("IFCMATERIALLIST", inst); }
    inline IfcMaterialLayerSetUsage IfcMaterialSelect::get_IfcMaterialLayerSetUsage() { return getEntityInstance("IFCMATERIALLAYERSETUSAGE"); }
    inline void IfcMaterialSelect::put_IfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage inst) { putEntityInstance("IFCMATERIALLAYERSETUSAGE", inst); }
    inline IfcMaterialLayerSet IfcMaterialSelect::get_IfcMaterialLayerSet() { return getEntityInstance("IFCMATERIALLAYERSET"); }
    inline void IfcMaterialSelect::put_IfcMaterialLayerSet(IfcMaterialLayerSet inst) { putEntityInstance("IFCMATERIALLAYERSET", inst); }
    inline IfcMaterialLayer IfcMaterialSelect::get_IfcMaterialLayer() { return getEntityInstance("IFCMATERIALLAYER"); }
    inline void IfcMaterialSelect::put_IfcMaterialLayer(IfcMaterialLayer inst) { putEntityInstance("IFCMATERIALLAYER", inst); }
    inline IfcMaterial IfcMaterialSelect_get::get_IfcMaterial() { return getEntityInstance("IFCMATERIAL"); }
    inline IfcMaterialList IfcMaterialSelect_get::get_IfcMaterialList() { return getEntityInstance("IFCMATERIALLIST"); }
    inline IfcMaterialLayerSetUsage IfcMaterialSelect_get::get_IfcMaterialLayerSetUsage() { return getEntityInstance("IFCMATERIALLAYERSETUSAGE"); }
    inline IfcMaterialLayerSet IfcMaterialSelect_get::get_IfcMaterialLayerSet() { return getEntityInstance("IFCMATERIALLAYERSET"); }
    inline IfcMaterialLayer IfcMaterialSelect_get::get_IfcMaterialLayer() { return getEntityInstance("IFCMATERIALLAYER"); }
    inline void IfcMaterialSelect_put::put_IfcMaterial(IfcMaterial inst) { putEntityInstance("IFCMATERIAL", inst); }
    inline void IfcMaterialSelect_put::put_IfcMaterialList(IfcMaterialList inst) { putEntityInstance("IFCMATERIALLIST", inst); }
    inline void IfcMaterialSelect_put::put_IfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage inst) { putEntityInstance("IFCMATERIALLAYERSETUSAGE", inst); }
    inline void IfcMaterialSelect_put::put_IfcMaterialLayerSet(IfcMaterialLayerSet inst) { putEntityInstance("IFCMATERIALLAYERSET", inst); }
    inline void IfcMaterialSelect_put::put_IfcMaterialLayer(IfcMaterialLayer inst) { putEntityInstance("IFCMATERIALLAYER", inst); }
    inline IfcMeasureWithUnit IfcMetricValueSelect::get_IfcMeasureWithUnit() { return getEntityInstance("IFCMEASUREWITHUNIT"); }
    inline void IfcMetricValueSelect::put_IfcMeasureWithUnit(IfcMeasureWithUnit inst) { putEntityInstance("IFCMEASUREWITHUNIT", inst); }
    inline IfcTable IfcMetricValueSelect::get_IfcTable() { return getEntityInstance("IFCTABLE"); }
    inline void IfcMetricValueSelect::put_IfcTable(IfcTable inst) { putEntityInstance("IFCTABLE", inst); }
    inline IfcTimeSeries IfcMetricValueSelect::get_IfcTimeSeries() { return getEntityInstance("IFCTIMESERIES"); }
    inline void IfcMetricValueSelect::put_IfcTimeSeries(IfcTimeSeries inst) { putEntityInstance("IFCTIMESERIES", inst); }
    inline IfcCostValue IfcMetricValueSelect::get_IfcCostValue() { return getEntityInstance("IFCCOSTVALUE"); }
    inline void IfcMetricValueSelect::put_IfcCostValue(IfcCostValue inst) { putEntityInstance("IFCCOSTVALUE", inst); }
    inline IfcMeasureWithUnit IfcMetricValueSelect_get::get_IfcMeasureWithUnit() { return getEntityInstance("IFCMEASUREWITHUNIT"); }
    inline IfcTable IfcMetricValueSelect_get::get_IfcTable() { return getEntityInstance("IFCTABLE"); }
    inline IfcTimeSeries IfcMetricValueSelect_get::get_IfcTimeSeries() { return getEntityInstance("IFCTIMESERIES"); }
    inline IfcCostValue IfcMetricValueSelect_get::get_IfcCostValue() { return getEntityInstance("IFCCOSTVALUE"); }
    inline void IfcMetricValueSelect_put::put_IfcMeasureWithUnit(IfcMeasureWithUnit inst) { putEntityInstance("IFCMEASUREWITHUNIT", inst); }
    inline void IfcMetricValueSelect_put::put_IfcTable(IfcTable inst) { putEntityInstance("IFCTABLE", inst); }
    inline void IfcMetricValueSelect_put::put_IfcTimeSeries(IfcTimeSeries inst) { putEntityInstance("IFCTIMESERIES", inst); }
    inline void IfcMetricValueSelect_put::put_IfcCostValue(IfcCostValue inst) { putEntityInstance("IFCCOSTVALUE", inst); }
    inline IfcMaterial IfcObjectReferenceSelect::get_IfcMaterial() { return getEntityInstance("IFCMATERIAL"); }
    inline void IfcObjectReferenceSelect::put_IfcMaterial(IfcMaterial inst) { putEntityInstance("IFCMATERIAL", inst); }
    inline IfcPerson IfcObjectReferenceSelect::get_IfcPerson() { return getEntityInstance("IFCPERSON"); }
    inline void IfcObjectReferenceSelect::put_IfcPerson(IfcPerson inst) { putEntityInstance("IFCPERSON", inst); }
    inline IfcDateAndTime IfcObjectReferenceSelect::get_IfcDateAndTime() { return getEntityInstance("IFCDATEANDTIME"); }
    inline void IfcObjectReferenceSelect::put_IfcDateAndTime(IfcDateAndTime inst) { putEntityInstance("IFCDATEANDTIME", inst); }
    inline IfcMaterialList IfcObjectReferenceSelect::get_IfcMaterialList() { return getEntityInstance("IFCMATERIALLIST"); }
    inline void IfcObjectReferenceSelect::put_IfcMaterialList(IfcMaterialList inst) { putEntityInstance("IFCMATERIALLIST", inst); }
    inline IfcOrganization IfcObjectReferenceSelect::get_IfcOrganization() { return getEntityInstance("IFCORGANIZATION"); }
    inline void IfcObjectReferenceSelect::put_IfcOrganization(IfcOrganization inst) { putEntityInstance("IFCORGANIZATION", inst); }
    inline IfcCalendarDate IfcObjectReferenceSelect::get_IfcCalendarDate() { return getEntityInstance("IFCCALENDARDATE"); }
    inline void IfcObjectReferenceSelect::put_IfcCalendarDate(IfcCalendarDate inst) { putEntityInstance("IFCCALENDARDATE", inst); }
    inline IfcLocalTime IfcObjectReferenceSelect::get_IfcLocalTime() { return getEntityInstance("IFCLOCALTIME"); }
    inline void IfcObjectReferenceSelect::put_IfcLocalTime(IfcLocalTime inst) { putEntityInstance("IFCLOCALTIME", inst); }
    inline IfcPersonAndOrganization IfcObjectReferenceSelect::get_IfcPersonAndOrganization() { return getEntityInstance("IFCPERSONANDORGANIZATION"); }
    inline void IfcObjectReferenceSelect::put_IfcPersonAndOrganization(IfcPersonAndOrganization inst) { putEntityInstance("IFCPERSONANDORGANIZATION", inst); }
    inline IfcMaterialLayer IfcObjectReferenceSelect::get_IfcMaterialLayer() { return getEntityInstance("IFCMATERIALLAYER"); }
    inline void IfcObjectReferenceSelect::put_IfcMaterialLayer(IfcMaterialLayer inst) { putEntityInstance("IFCMATERIALLAYER", inst); }
    inline IfcExternalReference IfcObjectReferenceSelect::get_IfcExternalReference() { return getEntityInstance("IFCEXTERNALREFERENCE"); }
    inline void IfcObjectReferenceSelect::put_IfcExternalReference(IfcExternalReference inst) { putEntityInstance("IFCEXTERNALREFERENCE", inst); }
    inline IfcTimeSeries IfcObjectReferenceSelect::get_IfcTimeSeries() { return getEntityInstance("IFCTIMESERIES"); }
    inline void IfcObjectReferenceSelect::put_IfcTimeSeries(IfcTimeSeries inst) { putEntityInstance("IFCTIMESERIES", inst); }
    inline IfcAddress IfcObjectReferenceSelect::get_IfcAddress() { return getEntityInstance("IFCADDRESS"); }
    inline void IfcObjectReferenceSelect::put_IfcAddress(IfcAddress inst) { putEntityInstance("IFCADDRESS", inst); }
    inline IfcAppliedValue IfcObjectReferenceSelect::get_IfcAppliedValue() { return getEntityInstance("IFCAPPLIEDVALUE"); }
    inline void IfcObjectReferenceSelect::put_IfcAppliedValue(IfcAppliedValue inst) { putEntityInstance("IFCAPPLIEDVALUE", inst); }
    inline IfcMaterial IfcObjectReferenceSelect_get::get_IfcMaterial() { return getEntityInstance("IFCMATERIAL"); }
    inline IfcPerson IfcObjectReferenceSelect_get::get_IfcPerson() { return getEntityInstance("IFCPERSON"); }
    inline IfcDateAndTime IfcObjectReferenceSelect_get::get_IfcDateAndTime() { return getEntityInstance("IFCDATEANDTIME"); }
    inline IfcMaterialList IfcObjectReferenceSelect_get::get_IfcMaterialList() { return getEntityInstance("IFCMATERIALLIST"); }
    inline IfcOrganization IfcObjectReferenceSelect_get::get_IfcOrganization() { return getEntityInstance("IFCORGANIZATION"); }
    inline IfcCalendarDate IfcObjectReferenceSelect_get::get_IfcCalendarDate() { return getEntityInstance("IFCCALENDARDATE"); }
    inline IfcLocalTime IfcObjectReferenceSelect_get::get_IfcLocalTime() { return getEntityInstance("IFCLOCALTIME"); }
    inline IfcPersonAndOrganization IfcObjectReferenceSelect_get::get_IfcPersonAndOrganization() { return getEntityInstance("IFCPERSONANDORGANIZATION"); }
    inline IfcMaterialLayer IfcObjectReferenceSelect_get::get_IfcMaterialLayer() { return getEntityInstance("IFCMATERIALLAYER"); }
    inline IfcExternalReference IfcObjectReferenceSelect_get::get_IfcExternalReference() { return getEntityInstance("IFCEXTERNALREFERENCE"); }
    inline IfcTimeSeries IfcObjectReferenceSelect_get::get_IfcTimeSeries() { return getEntityInstance("IFCTIMESERIES"); }
    inline IfcAddress IfcObjectReferenceSelect_get::get_IfcAddress() { return getEntityInstance("IFCADDRESS"); }
    inline IfcAppliedValue IfcObjectReferenceSelect_get::get_IfcAppliedValue() { return getEntityInstance("IFCAPPLIEDVALUE"); }
    inline void IfcObjectReferenceSelect_put::put_IfcMaterial(IfcMaterial inst) { putEntityInstance("IFCMATERIAL", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcPerson(IfcPerson inst) { putEntityInstance("IFCPERSON", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcDateAndTime(IfcDateAndTime inst) { putEntityInstance("IFCDATEANDTIME", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcMaterialList(IfcMaterialList inst) { putEntityInstance("IFCMATERIALLIST", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcOrganization(IfcOrganization inst) { putEntityInstance("IFCORGANIZATION", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcCalendarDate(IfcCalendarDate inst) { putEntityInstance("IFCCALENDARDATE", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcLocalTime(IfcLocalTime inst) { putEntityInstance("IFCLOCALTIME", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcPersonAndOrganization(IfcPersonAndOrganization inst) { putEntityInstance("IFCPERSONANDORGANIZATION", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcMaterialLayer(IfcMaterialLayer inst) { putEntityInstance("IFCMATERIALLAYER", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcExternalReference(IfcExternalReference inst) { putEntityInstance("IFCEXTERNALREFERENCE", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcTimeSeries(IfcTimeSeries inst) { putEntityInstance("IFCTIMESERIES", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcAddress(IfcAddress inst) { putEntityInstance("IFCADDRESS", inst); }
    inline void IfcObjectReferenceSelect_put::put_IfcAppliedValue(IfcAppliedValue inst) { putEntityInstance("IFCAPPLIEDVALUE", inst); }
    inline IfcDirection IfcOrientationSelect::get_IfcDirection() { return getEntityInstance("IFCDIRECTION"); }
    inline void IfcOrientationSelect::put_IfcDirection(IfcDirection inst) { putEntityInstance("IFCDIRECTION", inst); }
    inline IfcDirection IfcOrientationSelect_get::get_IfcDirection() { return getEntityInstance("IFCDIRECTION"); }
    inline void IfcOrientationSelect_put::put_IfcDirection(IfcDirection inst) { putEntityInstance("IFCDIRECTION", inst); }
    inline IfcPoint IfcPointOrVertexPoint::get_IfcPoint() { return getEntityInstance("IFCPOINT"); }
    inline void IfcPointOrVertexPoint::put_IfcPoint(IfcPoint inst) { putEntityInstance("IFCPOINT", inst); }
    inline IfcVertexPoint IfcPointOrVertexPoint::get_IfcVertexPoint() { return getEntityInstance("IFCVERTEXPOINT"); }
    inline void IfcPointOrVertexPoint::put_IfcVertexPoint(IfcVertexPoint inst) { putEntityInstance("IFCVERTEXPOINT", inst); }
    inline IfcPoint IfcPointOrVertexPoint_get::get_IfcPoint() { return getEntityInstance("IFCPOINT"); }
    inline IfcVertexPoint IfcPointOrVertexPoint_get::get_IfcVertexPoint() { return getEntityInstance("IFCVERTEXPOINT"); }
    inline void IfcPointOrVertexPoint_put::put_IfcPoint(IfcPoint inst) { putEntityInstance("IFCPOINT", inst); }
    inline void IfcPointOrVertexPoint_put::put_IfcVertexPoint(IfcVertexPoint inst) { putEntityInstance("IFCVERTEXPOINT", inst); }
    inline IfcCurveStyle IfcPresentationStyleSelect::get_IfcCurveStyle() { return getEntityInstance("IFCCURVESTYLE"); }
    inline void IfcPresentationStyleSelect::put_IfcCurveStyle(IfcCurveStyle inst) { putEntityInstance("IFCCURVESTYLE", inst); }
    inline IfcSymbolStyle IfcPresentationStyleSelect::get_IfcSymbolStyle() { return getEntityInstance("IFCSYMBOLSTYLE"); }
    inline void IfcPresentationStyleSelect::put_IfcSymbolStyle(IfcSymbolStyle inst) { putEntityInstance("IFCSYMBOLSTYLE", inst); }
    inline IfcFillAreaStyle IfcPresentationStyleSelect::get_IfcFillAreaStyle() { return getEntityInstance("IFCFILLAREASTYLE"); }
    inline void IfcPresentationStyleSelect::put_IfcFillAreaStyle(IfcFillAreaStyle inst) { putEntityInstance("IFCFILLAREASTYLE", inst); }
    inline IfcTextStyle IfcPresentationStyleSelect::get_IfcTextStyle() { return getEntityInstance("IFCTEXTSTYLE"); }
    inline void IfcPresentationStyleSelect::put_IfcTextStyle(IfcTextStyle inst) { putEntityInstance("IFCTEXTSTYLE", inst); }
    inline IfcSurfaceStyle IfcPresentationStyleSelect::get_IfcSurfaceStyle() { return getEntityInstance("IFCSURFACESTYLE"); }
    inline void IfcPresentationStyleSelect::put_IfcSurfaceStyle(IfcSurfaceStyle inst) { putEntityInstance("IFCSURFACESTYLE", inst); }
    inline IfcCurveStyle IfcPresentationStyleSelect_get::get_IfcCurveStyle() { return getEntityInstance("IFCCURVESTYLE"); }
    inline IfcSymbolStyle IfcPresentationStyleSelect_get::get_IfcSymbolStyle() { return getEntityInstance("IFCSYMBOLSTYLE"); }
    inline IfcFillAreaStyle IfcPresentationStyleSelect_get::get_IfcFillAreaStyle() { return getEntityInstance("IFCFILLAREASTYLE"); }
    inline IfcTextStyle IfcPresentationStyleSelect_get::get_IfcTextStyle() { return getEntityInstance("IFCTEXTSTYLE"); }
    inline IfcSurfaceStyle IfcPresentationStyleSelect_get::get_IfcSurfaceStyle() { return getEntityInstance("IFCSURFACESTYLE"); }
    inline void IfcPresentationStyleSelect_put::put_IfcCurveStyle(IfcCurveStyle inst) { putEntityInstance("IFCCURVESTYLE", inst); }
    inline void IfcPresentationStyleSelect_put::put_IfcSymbolStyle(IfcSymbolStyle inst) { putEntityInstance("IFCSYMBOLSTYLE", inst); }
    inline void IfcPresentationStyleSelect_put::put_IfcFillAreaStyle(IfcFillAreaStyle inst) { putEntityInstance("IFCFILLAREASTYLE", inst); }
    inline void IfcPresentationStyleSelect_put::put_IfcTextStyle(IfcTextStyle inst) { putEntityInstance("IFCTEXTSTYLE", inst); }
    inline void IfcPresentationStyleSelect_put::put_IfcSurfaceStyle(IfcSurfaceStyle inst) { putEntityInstance("IFCSURFACESTYLE", inst); }
    inline IfcClosedShell IfcShell::get_IfcClosedShell() { return getEntityInstance("IFCCLOSEDSHELL"); }
    inline void IfcShell::put_IfcClosedShell(IfcClosedShell inst) { putEntityInstance("IFCCLOSEDSHELL", inst); }
    inline IfcOpenShell IfcShell::get_IfcOpenShell() { return getEntityInstance("IFCOPENSHELL"); }
    inline void IfcShell::put_IfcOpenShell(IfcOpenShell inst) { putEntityInstance("IFCOPENSHELL", inst); }
    inline IfcClosedShell IfcShell_get::get_IfcClosedShell() { return getEntityInstance("IFCCLOSEDSHELL"); }
    inline IfcOpenShell IfcShell_get::get_IfcOpenShell() { return getEntityInstance("IFCOPENSHELL"); }
    inline void IfcShell_put::put_IfcClosedShell(IfcClosedShell inst) { putEntityInstance("IFCCLOSEDSHELL", inst); }
    inline void IfcShell_put::put_IfcOpenShell(IfcOpenShell inst) { putEntityInstance("IFCOPENSHELL", inst); }
    inline IfcStructuralItem IfcStructuralActivityAssignmentSelect::get_IfcStructuralItem() { return getEntityInstance("IFCSTRUCTURALITEM"); }
    inline void IfcStructuralActivityAssignmentSelect::put_IfcStructuralItem(IfcStructuralItem inst) { putEntityInstance("IFCSTRUCTURALITEM", inst); }
    inline IfcElement IfcStructuralActivityAssignmentSelect::get_IfcElement() { return getEntityInstance("IFCELEMENT"); }
    inline void IfcStructuralActivityAssignmentSelect::put_IfcElement(IfcElement inst) { putEntityInstance("IFCELEMENT", inst); }
    inline IfcStructuralItem IfcStructuralActivityAssignmentSelect_get::get_IfcStructuralItem() { return getEntityInstance("IFCSTRUCTURALITEM"); }
    inline IfcElement IfcStructuralActivityAssignmentSelect_get::get_IfcElement() { return getEntityInstance("IFCELEMENT"); }
    inline void IfcStructuralActivityAssignmentSelect_put::put_IfcStructuralItem(IfcStructuralItem inst) { putEntityInstance("IFCSTRUCTURALITEM", inst); }
    inline void IfcStructuralActivityAssignmentSelect_put::put_IfcElement(IfcElement inst) { putEntityInstance("IFCELEMENT", inst); }
    inline IfcSurface IfcSurfaceOrFaceSurface::get_IfcSurface() { return getEntityInstance("IFCSURFACE"); }
    inline void IfcSurfaceOrFaceSurface::put_IfcSurface(IfcSurface inst) { putEntityInstance("IFCSURFACE", inst); }
    inline IfcFaceSurface IfcSurfaceOrFaceSurface::get_IfcFaceSurface() { return getEntityInstance("IFCFACESURFACE"); }
    inline void IfcSurfaceOrFaceSurface::put_IfcFaceSurface(IfcFaceSurface inst) { putEntityInstance("IFCFACESURFACE", inst); }
    inline IfcFaceBasedSurfaceModel IfcSurfaceOrFaceSurface::get_IfcFaceBasedSurfaceModel() { return getEntityInstance("IFCFACEBASEDSURFACEMODEL"); }
    inline void IfcSurfaceOrFaceSurface::put_IfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel inst) { putEntityInstance("IFCFACEBASEDSURFACEMODEL", inst); }
    inline IfcSurface IfcSurfaceOrFaceSurface_get::get_IfcSurface() { return getEntityInstance("IFCSURFACE"); }
    inline IfcFaceSurface IfcSurfaceOrFaceSurface_get::get_IfcFaceSurface() { return getEntityInstance("IFCFACESURFACE"); }
    inline IfcFaceBasedSurfaceModel IfcSurfaceOrFaceSurface_get::get_IfcFaceBasedSurfaceModel() { return getEntityInstance("IFCFACEBASEDSURFACEMODEL"); }
    inline void IfcSurfaceOrFaceSurface_put::put_IfcSurface(IfcSurface inst) { putEntityInstance("IFCSURFACE", inst); }
    inline void IfcSurfaceOrFaceSurface_put::put_IfcFaceSurface(IfcFaceSurface inst) { putEntityInstance("IFCFACESURFACE", inst); }
    inline void IfcSurfaceOrFaceSurface_put::put_IfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel inst) { putEntityInstance("IFCFACEBASEDSURFACEMODEL", inst); }
    inline IfcSurfaceStyleShading IfcSurfaceStyleElementSelect::get_IfcSurfaceStyleShading() { return getEntityInstance("IFCSURFACESTYLESHADING"); }
    inline void IfcSurfaceStyleElementSelect::put_IfcSurfaceStyleShading(IfcSurfaceStyleShading inst) { putEntityInstance("IFCSURFACESTYLESHADING", inst); }
    inline IfcSurfaceStyleLighting IfcSurfaceStyleElementSelect::get_IfcSurfaceStyleLighting() { return getEntityInstance("IFCSURFACESTYLELIGHTING"); }
    inline void IfcSurfaceStyleElementSelect::put_IfcSurfaceStyleLighting(IfcSurfaceStyleLighting inst) { putEntityInstance("IFCSURFACESTYLELIGHTING", inst); }
    inline IfcSurfaceStyleWithTextures IfcSurfaceStyleElementSelect::get_IfcSurfaceStyleWithTextures() { return getEntityInstance("IFCSURFACESTYLEWITHTEXTURES"); }
    inline void IfcSurfaceStyleElementSelect::put_IfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures inst) { putEntityInstance("IFCSURFACESTYLEWITHTEXTURES", inst); }
    inline IfcExternallyDefinedSurfaceStyle IfcSurfaceStyleElementSelect::get_IfcExternallyDefinedSurfaceStyle() { return getEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE"); }
    inline void IfcSurfaceStyleElementSelect::put_IfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle inst) { putEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE", inst); }
    inline IfcSurfaceStyleRefraction IfcSurfaceStyleElementSelect::get_IfcSurfaceStyleRefraction() { return getEntityInstance("IFCSURFACESTYLEREFRACTION"); }
    inline void IfcSurfaceStyleElementSelect::put_IfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction inst) { putEntityInstance("IFCSURFACESTYLEREFRACTION", inst); }
    inline IfcSurfaceStyleShading IfcSurfaceStyleElementSelect_get::get_IfcSurfaceStyleShading() { return getEntityInstance("IFCSURFACESTYLESHADING"); }
    inline IfcSurfaceStyleLighting IfcSurfaceStyleElementSelect_get::get_IfcSurfaceStyleLighting() { return getEntityInstance("IFCSURFACESTYLELIGHTING"); }
    inline IfcSurfaceStyleWithTextures IfcSurfaceStyleElementSelect_get::get_IfcSurfaceStyleWithTextures() { return getEntityInstance("IFCSURFACESTYLEWITHTEXTURES"); }
    inline IfcExternallyDefinedSurfaceStyle IfcSurfaceStyleElementSelect_get::get_IfcExternallyDefinedSurfaceStyle() { return getEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE"); }
    inline IfcSurfaceStyleRefraction IfcSurfaceStyleElementSelect_get::get_IfcSurfaceStyleRefraction() { return getEntityInstance("IFCSURFACESTYLEREFRACTION"); }
    inline void IfcSurfaceStyleElementSelect_put::put_IfcSurfaceStyleShading(IfcSurfaceStyleShading inst) { putEntityInstance("IFCSURFACESTYLESHADING", inst); }
    inline void IfcSurfaceStyleElementSelect_put::put_IfcSurfaceStyleLighting(IfcSurfaceStyleLighting inst) { putEntityInstance("IFCSURFACESTYLELIGHTING", inst); }
    inline void IfcSurfaceStyleElementSelect_put::put_IfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures inst) { putEntityInstance("IFCSURFACESTYLEWITHTEXTURES", inst); }
    inline void IfcSurfaceStyleElementSelect_put::put_IfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle inst) { putEntityInstance("IFCEXTERNALLYDEFINEDSURFACESTYLE", inst); }
    inline void IfcSurfaceStyleElementSelect_put::put_IfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction inst) { putEntityInstance("IFCSURFACESTYLEREFRACTION", inst); }
    inline IfcPreDefinedTextFont IfcTextFontSelect::get_IfcPreDefinedTextFont() { return getEntityInstance("IFCPREDEFINEDTEXTFONT"); }
    inline void IfcTextFontSelect::put_IfcPreDefinedTextFont(IfcPreDefinedTextFont inst) { putEntityInstance("IFCPREDEFINEDTEXTFONT", inst); }
    inline IfcExternallyDefinedTextFont IfcTextFontSelect::get_IfcExternallyDefinedTextFont() { return getEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT"); }
    inline void IfcTextFontSelect::put_IfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont inst) { putEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT", inst); }
    inline IfcPreDefinedTextFont IfcTextFontSelect_get::get_IfcPreDefinedTextFont() { return getEntityInstance("IFCPREDEFINEDTEXTFONT"); }
    inline IfcExternallyDefinedTextFont IfcTextFontSelect_get::get_IfcExternallyDefinedTextFont() { return getEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT"); }
    inline void IfcTextFontSelect_put::put_IfcPreDefinedTextFont(IfcPreDefinedTextFont inst) { putEntityInstance("IFCPREDEFINEDTEXTFONT", inst); }
    inline void IfcTextFontSelect_put::put_IfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont inst) { putEntityInstance("IFCEXTERNALLYDEFINEDTEXTFONT", inst); }
    inline IfcTextStyleWithBoxCharacteristics IfcTextStyleSelect::get_IfcTextStyleWithBoxCharacteristics() { return getEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS"); }
    inline void IfcTextStyleSelect::put_IfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics inst) { putEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS", inst); }
    inline IfcTextStyleTextModel IfcTextStyleSelect::get_IfcTextStyleTextModel() { return getEntityInstance("IFCTEXTSTYLETEXTMODEL"); }
    inline void IfcTextStyleSelect::put_IfcTextStyleTextModel(IfcTextStyleTextModel inst) { putEntityInstance("IFCTEXTSTYLETEXTMODEL", inst); }
    inline IfcTextStyleWithBoxCharacteristics IfcTextStyleSelect_get::get_IfcTextStyleWithBoxCharacteristics() { return getEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS"); }
    inline IfcTextStyleTextModel IfcTextStyleSelect_get::get_IfcTextStyleTextModel() { return getEntityInstance("IFCTEXTSTYLETEXTMODEL"); }
    inline void IfcTextStyleSelect_put::put_IfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics inst) { putEntityInstance("IFCTEXTSTYLEWITHBOXCHARACTERISTICS", inst); }
    inline void IfcTextStyleSelect_put::put_IfcTextStyleTextModel(IfcTextStyleTextModel inst) { putEntityInstance("IFCTEXTSTYLETEXTMODEL", inst); }
    inline IfcCartesianPoint IfcTrimmingSelect::get_IfcCartesianPoint() { return getEntityInstance("IFCCARTESIANPOINT"); }
    inline void IfcTrimmingSelect::put_IfcCartesianPoint(IfcCartesianPoint inst) { putEntityInstance("IFCCARTESIANPOINT", inst); }
    inline IfcCartesianPoint IfcTrimmingSelect_get::get_IfcCartesianPoint() { return getEntityInstance("IFCCARTESIANPOINT"); }
    inline void IfcTrimmingSelect_put::put_IfcCartesianPoint(IfcCartesianPoint inst) { putEntityInstance("IFCCARTESIANPOINT", inst); }
    inline IfcDerivedUnit IfcUnit::get_IfcDerivedUnit() { return getEntityInstance("IFCDERIVEDUNIT"); }
    inline void IfcUnit::put_IfcDerivedUnit(IfcDerivedUnit inst) { putEntityInstance("IFCDERIVEDUNIT", inst); }
    inline IfcNamedUnit IfcUnit::get_IfcNamedUnit() { return getEntityInstance("IFCNAMEDUNIT"); }
    inline void IfcUnit::put_IfcNamedUnit(IfcNamedUnit inst) { putEntityInstance("IFCNAMEDUNIT", inst); }
    inline IfcMonetaryUnit IfcUnit::get_IfcMonetaryUnit() { return getEntityInstance("IFCMONETARYUNIT"); }
    inline void IfcUnit::put_IfcMonetaryUnit(IfcMonetaryUnit inst) { putEntityInstance("IFCMONETARYUNIT", inst); }
    inline IfcDerivedUnit IfcUnit_get::get_IfcDerivedUnit() { return getEntityInstance("IFCDERIVEDUNIT"); }
    inline IfcNamedUnit IfcUnit_get::get_IfcNamedUnit() { return getEntityInstance("IFCNAMEDUNIT"); }
    inline IfcMonetaryUnit IfcUnit_get::get_IfcMonetaryUnit() { return getEntityInstance("IFCMONETARYUNIT"); }
    inline void IfcUnit_put::put_IfcDerivedUnit(IfcDerivedUnit inst) { putEntityInstance("IFCDERIVEDUNIT", inst); }
    inline void IfcUnit_put::put_IfcNamedUnit(IfcNamedUnit inst) { putEntityInstance("IFCNAMEDUNIT", inst); }
    inline void IfcUnit_put::put_IfcMonetaryUnit(IfcMonetaryUnit inst) { putEntityInstance("IFCMONETARYUNIT", inst); }
    inline IfcDirection IfcVectorOrDirection::get_IfcDirection() { return getEntityInstance("IFCDIRECTION"); }
    inline void IfcVectorOrDirection::put_IfcDirection(IfcDirection inst) { putEntityInstance("IFCDIRECTION", inst); }
    inline IfcVector IfcVectorOrDirection::get_IfcVector() { return getEntityInstance("IFCVECTOR"); }
    inline void IfcVectorOrDirection::put_IfcVector(IfcVector inst) { putEntityInstance("IFCVECTOR", inst); }
    inline IfcDirection IfcVectorOrDirection_get::get_IfcDirection() { return getEntityInstance("IFCDIRECTION"); }
    inline IfcVector IfcVectorOrDirection_get::get_IfcVector() { return getEntityInstance("IFCVECTOR"); }
    inline void IfcVectorOrDirection_put::put_IfcDirection(IfcDirection inst) { putEntityInstance("IFCDIRECTION", inst); }
    inline void IfcVectorOrDirection_put::put_IfcVector(IfcVector inst) { putEntityInstance("IFCVECTOR", inst); }
    inline IfcOwnerHistory IfcRoot::get_OwnerHistory() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OwnerHistory", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRoot::put_OwnerHistory(IfcOwnerHistory inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OwnerHistory", sdaiINSTANCE, (void*) i); }
    inline IfcObjectPlacement IfcProduct::get_ObjectPlacement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ObjectPlacement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcProduct::put_ObjectPlacement(IfcObjectPlacement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ObjectPlacement", sdaiINSTANCE, (void*) i); }
    inline IfcProductRepresentation IfcProduct::get_Representation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Representation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcProduct::put_Representation(IfcProductRepresentation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Representation", sdaiINSTANCE, (void*) i); }
    inline IfcRepresentationItem IfcStyledItem::get_Item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Item", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStyledItem::put_Item(IfcRepresentationItem inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Item", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcAnnotationFillArea::get_OuterBoundary() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OuterBoundary", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAnnotationFillArea::put_OuterBoundary(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OuterBoundary", sdaiINSTANCE, (void*) i); }
    inline IfcPoint IfcAnnotationFillAreaOccurrence::get_FillStyleTarget() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "FillStyleTarget", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAnnotationFillAreaOccurrence::put_FillStyleTarget(IfcPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "FillStyleTarget", sdaiINSTANCE, (void*) i); }
    inline IfcGeometricRepresentationItem IfcAnnotationSurface::get_Item() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Item", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAnnotationSurface::put_Item(IfcGeometricRepresentationItem inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Item", sdaiINSTANCE, (void*) i); }
    inline IfcTextureCoordinate IfcAnnotationSurface::get_TextureCoordinates() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TextureCoordinates", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAnnotationSurface::put_TextureCoordinates(IfcTextureCoordinate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TextureCoordinates", sdaiINSTANCE, (void*) i); }
    inline IfcOrganization IfcApplication::get_ApplicationDeveloper() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ApplicationDeveloper", sdaiINSTANCE, &inst); return inst; }
    inline void IfcApplication::put_ApplicationDeveloper(IfcOrganization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ApplicationDeveloper", sdaiINSTANCE, (void*) i); }
    inline IfcMeasureWithUnit IfcAppliedValue::get_UnitBasis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "UnitBasis", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAppliedValue::put_UnitBasis(IfcMeasureWithUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "UnitBasis", sdaiINSTANCE, (void*) i); }
    inline IfcAppliedValue IfcAppliedValueRelationship::get_ComponentOfTotal() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ComponentOfTotal", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAppliedValueRelationship::put_ComponentOfTotal(IfcAppliedValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ComponentOfTotal", sdaiINSTANCE, (void*) i); }
    inline IfcApproval IfcApprovalActorRelationship::get_Approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Approval", sdaiINSTANCE, &inst); return inst; }
    inline void IfcApprovalActorRelationship::put_Approval(IfcApproval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Approval", sdaiINSTANCE, (void*) i); }
    inline IfcActorRole IfcApprovalActorRelationship::get_Role() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Role", sdaiINSTANCE, &inst); return inst; }
    inline void IfcApprovalActorRelationship::put_Role(IfcActorRole inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Role", sdaiINSTANCE, (void*) i); }
    inline IfcApproval IfcApprovalPropertyRelationship::get_Approval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Approval", sdaiINSTANCE, &inst); return inst; }
    inline void IfcApprovalPropertyRelationship::put_Approval(IfcApproval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Approval", sdaiINSTANCE, (void*) i); }
    inline IfcApproval IfcApprovalRelationship::get_RelatedApproval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedApproval", sdaiINSTANCE, &inst); return inst; }
    inline void IfcApprovalRelationship::put_RelatedApproval(IfcApproval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedApproval", sdaiINSTANCE, (void*) i); }
    inline IfcApproval IfcApprovalRelationship::get_RelatingApproval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingApproval", sdaiINSTANCE, &inst); return inst; }
    inline void IfcApprovalRelationship::put_RelatingApproval(IfcApproval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingApproval", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcArbitraryClosedProfileDef::get_OuterCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OuterCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcArbitraryClosedProfileDef::put_OuterCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OuterCurve", sdaiINSTANCE, (void*) i); }
    inline IfcBoundedCurve IfcArbitraryOpenProfileDef::get_Curve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Curve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcArbitraryOpenProfileDef::put_Curve(IfcBoundedCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Curve", sdaiINSTANCE, (void*) i); }
    inline IfcRelAssignsToGroup IfcGroup::get_IsGroupedBy() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "IsGroupedBy", sdaiINSTANCE, &inst); return inst; }
    inline IfcCostValue IfcAsset::get_OriginalValue() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OriginalValue", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAsset::put_OriginalValue(IfcCostValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OriginalValue", sdaiINSTANCE, (void*) i); }
    inline IfcCostValue IfcAsset::get_CurrentValue() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "CurrentValue", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAsset::put_CurrentValue(IfcCostValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "CurrentValue", sdaiINSTANCE, (void*) i); }
    inline IfcCostValue IfcAsset::get_TotalReplacementCost() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TotalReplacementCost", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAsset::put_TotalReplacementCost(IfcCostValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TotalReplacementCost", sdaiINSTANCE, (void*) i); }
    inline IfcPerson IfcAsset::get_ResponsiblePerson() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ResponsiblePerson", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAsset::put_ResponsiblePerson(IfcPerson inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ResponsiblePerson", sdaiINSTANCE, (void*) i); }
    inline IfcCalendarDate IfcAsset::get_IncorporationDate() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "IncorporationDate", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAsset::put_IncorporationDate(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "IncorporationDate", sdaiINSTANCE, (void*) i); }
    inline IfcCostValue IfcAsset::get_DepreciatedValue() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "DepreciatedValue", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAsset::put_DepreciatedValue(IfcCostValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "DepreciatedValue", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement2D IfcParameterizedProfileDef::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcParameterizedProfileDef::put_Position(IfcAxis2Placement2D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcPlacement::get_Location() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Location", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPlacement::put_Location(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Location", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcAxis1Placement::get_Axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Axis", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAxis1Placement::put_Axis(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Axis", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcAxis2Placement2D::get_RefDirection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RefDirection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAxis2Placement2D::put_RefDirection(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RefDirection", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcAxis2Placement3D::get_Axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Axis", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAxis2Placement3D::put_Axis(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Axis", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcAxis2Placement3D::get_RefDirection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RefDirection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcAxis2Placement3D::put_RefDirection(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RefDirection", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianTransformationOperator2D IfcSurfaceTexture::get_TextureTransform() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TextureTransform", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceTexture::put_TextureTransform(IfcCartesianTransformationOperator2D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TextureTransform", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcCsgPrimitive3D::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCsgPrimitive3D::put_Position(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcBoundingBox::get_Corner() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Corner", sdaiINSTANCE, &inst); return inst; }
    inline void IfcBoundingBox::put_Corner(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Corner", sdaiINSTANCE, (void*) i); }
    inline IfcSurface IfcHalfSpaceSolid::get_BaseSurface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BaseSurface", sdaiINSTANCE, &inst); return inst; }
    inline void IfcHalfSpaceSolid::put_BaseSurface(IfcSurface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BaseSurface", sdaiINSTANCE, (void*) i); }
    inline IfcBoundingBox IfcBoxedHalfSpace::get_Enclosure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Enclosure", sdaiINSTANCE, &inst); return inst; }
    inline void IfcBoxedHalfSpace::put_Enclosure(IfcBoundingBox inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Enclosure", sdaiINSTANCE, (void*) i); }
    inline IfcPostalAddress IfcBuilding::get_BuildingAddress() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BuildingAddress", sdaiINSTANCE, &inst); return inst; }
    inline void IfcBuilding::put_BuildingAddress(IfcPostalAddress inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BuildingAddress", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcCartesianTransformationOperator::get_Axis1() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Axis1", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCartesianTransformationOperator::put_Axis1(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Axis1", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcCartesianTransformationOperator::get_Axis2() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Axis2", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCartesianTransformationOperator::put_Axis2(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Axis2", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcCartesianTransformationOperator::get_LocalOrigin() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LocalOrigin", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCartesianTransformationOperator::put_LocalOrigin(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LocalOrigin", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcCartesianTransformationOperator3D::get_Axis3() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Axis3", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCartesianTransformationOperator3D::put_Axis3(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Axis3", sdaiINSTANCE, (void*) i); }
    inline IfcRelVoidsElement IfcFeatureElementSubtraction::get_VoidsElements() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VoidsElements", sdaiINSTANCE, &inst); return inst; }
    inline IfcCalendarDate IfcClassification::get_EditionDate() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EditionDate", sdaiINSTANCE, &inst); return inst; }
    inline void IfcClassification::put_EditionDate(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EditionDate", sdaiINSTANCE, (void*) i); }
    inline IfcClassificationNotationFacet IfcClassificationItem::get_Notation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Notation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcClassificationItem::put_Notation(IfcClassificationNotationFacet inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Notation", sdaiINSTANCE, (void*) i); }
    inline IfcClassification IfcClassificationItem::get_ItemOf() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ItemOf", sdaiINSTANCE, &inst); return inst; }
    inline void IfcClassificationItem::put_ItemOf(IfcClassification inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ItemOf", sdaiINSTANCE, (void*) i); }
    inline IfcClassificationItem IfcClassificationItemRelationship::get_RelatingItem() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingItem", sdaiINSTANCE, &inst); return inst; }
    inline void IfcClassificationItemRelationship::put_RelatingItem(IfcClassificationItem inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingItem", sdaiINSTANCE, (void*) i); }
    inline IfcClassification IfcClassificationReference::get_ReferencedSource() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ReferencedSource", sdaiINSTANCE, &inst); return inst; }
    inline void IfcClassificationReference::put_ReferencedSource(IfcClassification inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ReferencedSource", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcCompositeCurveSegment::get_ParentCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ParentCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCompositeCurveSegment::put_ParentCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ParentCurve", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcConnectionPortGeometry::get_ProfileOfPort() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ProfileOfPort", sdaiINSTANCE, &inst); return inst; }
    inline void IfcConnectionPortGeometry::put_ProfileOfPort(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ProfileOfPort", sdaiINSTANCE, (void*) i); }
    inline IfcConstraint IfcConstraintAggregationRelationship::get_RelatingConstraint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, &inst); return inst; }
    inline void IfcConstraintAggregationRelationship::put_RelatingConstraint(IfcConstraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, (void*) i); }
    inline IfcConstraint IfcConstraintClassificationRelationship::get_ClassifiedConstraint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ClassifiedConstraint", sdaiINSTANCE, &inst); return inst; }
    inline void IfcConstraintClassificationRelationship::put_ClassifiedConstraint(IfcConstraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ClassifiedConstraint", sdaiINSTANCE, (void*) i); }
    inline IfcConstraint IfcConstraintRelationship::get_RelatingConstraint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, &inst); return inst; }
    inline void IfcConstraintRelationship::put_RelatingConstraint(IfcConstraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, (void*) i); }
    inline IfcMeasureWithUnit IfcConstructionResource::get_BaseQuantity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BaseQuantity", sdaiINSTANCE, &inst); return inst; }
    inline void IfcConstructionResource::put_BaseQuantity(IfcMeasureWithUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BaseQuantity", sdaiINSTANCE, (void*) i); }
    inline IfcDimensionalExponents IfcNamedUnit::get_Dimensions() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Dimensions", sdaiINSTANCE, &inst); return inst; }
    inline void IfcNamedUnit::put_Dimensions(IfcDimensionalExponents inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Dimensions", sdaiINSTANCE, (void*) i); }
    inline IfcMeasureWithUnit IfcConversionBasedUnit::get_ConversionFactor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ConversionFactor", sdaiINSTANCE, &inst); return inst; }
    inline void IfcConversionBasedUnit::put_ConversionFactor(IfcMeasureWithUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ConversionFactor", sdaiINSTANCE, (void*) i); }
    inline IfcMonetaryUnit IfcCurrencyRelationship::get_RelatingMonetaryUnit() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingMonetaryUnit", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCurrencyRelationship::put_RelatingMonetaryUnit(IfcMonetaryUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingMonetaryUnit", sdaiINSTANCE, (void*) i); }
    inline IfcMonetaryUnit IfcCurrencyRelationship::get_RelatedMonetaryUnit() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedMonetaryUnit", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCurrencyRelationship::put_RelatedMonetaryUnit(IfcMonetaryUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedMonetaryUnit", sdaiINSTANCE, (void*) i); }
    inline IfcDateAndTime IfcCurrencyRelationship::get_RateDateTime() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RateDateTime", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCurrencyRelationship::put_RateDateTime(IfcDateAndTime inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RateDateTime", sdaiINSTANCE, (void*) i); }
    inline IfcLibraryInformation IfcCurrencyRelationship::get_RateSource() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RateSource", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCurrencyRelationship::put_RateSource(IfcLibraryInformation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RateSource", sdaiINSTANCE, (void*) i); }
    inline IfcPlane IfcCurveBoundedPlane::get_BasisSurface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisSurface", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCurveBoundedPlane::put_BasisSurface(IfcPlane inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisSurface", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcCurveBoundedPlane::get_OuterBoundary() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OuterBoundary", sdaiINSTANCE, &inst); return inst; }
    inline void IfcCurveBoundedPlane::put_OuterBoundary(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OuterBoundary", sdaiINSTANCE, (void*) i); }
    inline IfcCalendarDate IfcDateAndTime::get_DateComponent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "DateComponent", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDateAndTime::put_DateComponent(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "DateComponent", sdaiINSTANCE, (void*) i); }
    inline IfcLocalTime IfcDateAndTime::get_TimeComponent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TimeComponent", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDateAndTime::put_TimeComponent(IfcLocalTime inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TimeComponent", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianTransformationOperator2D IfcDefinedSymbol::get_Target() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Target", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDefinedSymbol::put_Target(IfcCartesianTransformationOperator2D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Target", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcDerivedProfileDef::get_ParentProfile() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ParentProfile", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDerivedProfileDef::put_ParentProfile(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ParentProfile", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianTransformationOperator2D IfcDerivedProfileDef::get_Operator() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Operator", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDerivedProfileDef::put_Operator(IfcCartesianTransformationOperator2D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Operator", sdaiINSTANCE, (void*) i); }
    inline IfcNamedUnit IfcDerivedUnitElement::get_Unit() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Unit", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDerivedUnitElement::put_Unit(IfcNamedUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Unit", sdaiINSTANCE, (void*) i); }
    inline IfcDraughtingCallout IfcDraughtingCalloutRelationship::get_RelatingDraughtingCallout() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingDraughtingCallout", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDraughtingCalloutRelationship::put_RelatingDraughtingCallout(IfcDraughtingCallout inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingDraughtingCallout", sdaiINSTANCE, (void*) i); }
    inline IfcDraughtingCallout IfcDraughtingCalloutRelationship::get_RelatedDraughtingCallout() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedDraughtingCallout", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDraughtingCalloutRelationship::put_RelatedDraughtingCallout(IfcDraughtingCallout inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedDraughtingCallout", sdaiINSTANCE, (void*) i); }
    inline IfcAnnotationCurveOccurrence IfcTerminatorSymbol::get_AnnotatedCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AnnotatedCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcTerminatorSymbol::put_AnnotatedCurve(IfcAnnotationCurveOccurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AnnotatedCurve", sdaiINSTANCE, (void*) i); }
    inline IfcRelConnectsPortToElement IfcPort::get_ContainedIn() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ContainedIn", sdaiINSTANCE, &inst); return inst; }
    inline IfcDateAndTime IfcDocumentInformation::get_CreationTime() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "CreationTime", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDocumentInformation::put_CreationTime(IfcDateAndTime inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "CreationTime", sdaiINSTANCE, (void*) i); }
    inline IfcDateAndTime IfcDocumentInformation::get_LastRevisionTime() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LastRevisionTime", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDocumentInformation::put_LastRevisionTime(IfcDateAndTime inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LastRevisionTime", sdaiINSTANCE, (void*) i); }
    inline IfcDocumentElectronicFormat IfcDocumentInformation::get_ElectronicFormat() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ElectronicFormat", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDocumentInformation::put_ElectronicFormat(IfcDocumentElectronicFormat inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ElectronicFormat", sdaiINSTANCE, (void*) i); }
    inline IfcCalendarDate IfcDocumentInformation::get_ValidFrom() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ValidFrom", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDocumentInformation::put_ValidFrom(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ValidFrom", sdaiINSTANCE, (void*) i); }
    inline IfcCalendarDate IfcDocumentInformation::get_ValidUntil() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ValidUntil", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDocumentInformation::put_ValidUntil(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ValidUntil", sdaiINSTANCE, (void*) i); }
    inline IfcDocumentInformation IfcDocumentInformationRelationship::get_RelatingDocument() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingDocument", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDocumentInformationRelationship::put_RelatingDocument(IfcDocumentInformation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingDocument", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcDoorLiningProperties::get_ShapeAspectStyle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDoorLiningProperties::put_ShapeAspectStyle(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcDoorPanelProperties::get_ShapeAspectStyle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, &inst); return inst; }
    inline void IfcDoorPanelProperties::put_ShapeAspectStyle(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, (void*) i); }
    inline IfcVertex IfcEdge::get_EdgeStart() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EdgeStart", sdaiINSTANCE, &inst); return inst; }
    inline void IfcEdge::put_EdgeStart(IfcVertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EdgeStart", sdaiINSTANCE, (void*) i); }
    inline IfcVertex IfcEdge::get_EdgeEnd() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EdgeEnd", sdaiINSTANCE, &inst); return inst; }
    inline void IfcEdge::put_EdgeEnd(IfcVertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EdgeEnd", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcEdgeCurve::get_EdgeGeometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EdgeGeometry", sdaiINSTANCE, &inst); return inst; }
    inline void IfcEdgeCurve::put_EdgeGeometry(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EdgeGeometry", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcElementarySurface::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcElementarySurface::put_Position(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcMaterial IfcMaterialProperties::get_Material() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Material", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMaterialProperties::put_Material(IfcMaterial inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Material", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcSweptAreaSolid::get_SweptArea() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SweptArea", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSweptAreaSolid::put_SweptArea(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SweptArea", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcSweptAreaSolid::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSweptAreaSolid::put_Position(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcExtrudedAreaSolid::get_ExtrudedDirection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ExtrudedDirection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcExtrudedAreaSolid::put_ExtrudedDirection(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ExtrudedDirection", sdaiINSTANCE, (void*) i); }
    inline IfcLoop IfcFaceBound::get_Bound() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Bound", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFaceBound::put_Bound(IfcLoop inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Bound", sdaiINSTANCE, (void*) i); }
    inline IfcSurface IfcFaceSurface::get_FaceSurface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "FaceSurface", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFaceSurface::put_FaceSurface(IfcSurface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "FaceSurface", sdaiINSTANCE, (void*) i); }
    inline IfcClosedShell IfcManifoldSolidBrep::get_Outer() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Outer", sdaiINSTANCE, &inst); return inst; }
    inline void IfcManifoldSolidBrep::put_Outer(IfcClosedShell inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Outer", sdaiINSTANCE, (void*) i); }
    inline IfcRelProjectsElement IfcFeatureElementAddition::get_ProjectsElements() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ProjectsElements", sdaiINSTANCE, &inst); return inst; }
    inline IfcCurveStyle IfcFillAreaStyleHatching::get_HatchLineAppearance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "HatchLineAppearance", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFillAreaStyleHatching::put_HatchLineAppearance(IfcCurveStyle inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "HatchLineAppearance", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcFillAreaStyleHatching::get_PointOfReferenceHatchLine() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PointOfReferenceHatchLine", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFillAreaStyleHatching::put_PointOfReferenceHatchLine(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PointOfReferenceHatchLine", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcFillAreaStyleHatching::get_PatternStart() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PatternStart", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFillAreaStyleHatching::put_PatternStart(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PatternStart", sdaiINSTANCE, (void*) i); }
    inline IfcOneDirectionRepeatFactor IfcFillAreaStyleTiles::get_TilingPattern() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TilingPattern", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFillAreaStyleTiles::put_TilingPattern(IfcOneDirectionRepeatFactor inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TilingPattern", sdaiINSTANCE, (void*) i); }
    inline IfcAnnotationSymbolOccurrence IfcFillAreaStyleTileSymbolWithStyle::get_Symbol() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Symbol", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFillAreaStyleTileSymbolWithStyle::put_Symbol(IfcAnnotationSymbolOccurrence inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Symbol", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcFluidFlowProperties::get_FlowConditionTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "FlowConditionTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_FlowConditionTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "FlowConditionTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcFluidFlowProperties::get_VelocityTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VelocityTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_VelocityTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "VelocityTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcFluidFlowProperties::get_FlowrateTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "FlowrateTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_FlowrateTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "FlowrateTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcMaterial IfcFluidFlowProperties::get_Fluid() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Fluid", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_Fluid(IfcMaterial inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Fluid", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcFluidFlowProperties::get_PressureTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PressureTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_PressureTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PressureTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcFluidFlowProperties::get_WetBulbTemperatureTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "WetBulbTemperatureTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_WetBulbTemperatureTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "WetBulbTemperatureTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcFluidFlowProperties::get_TemperatureTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TemperatureTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcFluidFlowProperties::put_TemperatureTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TemperatureTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcProfileProperties::get_ProfileDefinition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ProfileDefinition", sdaiINSTANCE, &inst); return inst; }
    inline void IfcProfileProperties::put_ProfileDefinition(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ProfileDefinition", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcGeometricRepresentationContext::get_TrueNorth() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TrueNorth", sdaiINSTANCE, &inst); return inst; }
    inline void IfcGeometricRepresentationContext::put_TrueNorth(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TrueNorth", sdaiINSTANCE, (void*) i); }
    inline IfcGeometricRepresentationContext IfcGeometricRepresentationSubContext::get_ParentContext() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ParentContext", sdaiINSTANCE, &inst); return inst; }
    inline void IfcGeometricRepresentationSubContext::put_ParentContext(IfcGeometricRepresentationContext inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ParentContext", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcGridAxis::get_AxisCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AxisCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcGridAxis::put_AxisCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AxisCurve", sdaiINSTANCE, (void*) i); }
    inline IfcVirtualGridIntersection IfcGridPlacement::get_PlacementLocation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PlacementLocation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcGridPlacement::put_PlacementLocation(IfcVirtualGridIntersection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PlacementLocation", sdaiINSTANCE, (void*) i); }
    inline IfcVirtualGridIntersection IfcGridPlacement::get_PlacementRefDirection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PlacementRefDirection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcGridPlacement::put_PlacementRefDirection(IfcVirtualGridIntersection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PlacementRefDirection", sdaiINSTANCE, (void*) i); }
    inline IfcCalendarDate IfcInventory::get_LastUpdateDate() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LastUpdateDate", sdaiINSTANCE, &inst); return inst; }
    inline void IfcInventory::put_LastUpdateDate(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LastUpdateDate", sdaiINSTANCE, (void*) i); }
    inline IfcCostValue IfcInventory::get_CurrentValue() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "CurrentValue", sdaiINSTANCE, &inst); return inst; }
    inline void IfcInventory::put_CurrentValue(IfcCostValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "CurrentValue", sdaiINSTANCE, (void*) i); }
    inline IfcCostValue IfcInventory::get_OriginalValue() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OriginalValue", sdaiINSTANCE, &inst); return inst; }
    inline void IfcInventory::put_OriginalValue(IfcCostValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OriginalValue", sdaiINSTANCE, (void*) i); }
    inline IfcOrganization IfcLibraryInformation::get_Publisher() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Publisher", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLibraryInformation::put_Publisher(IfcOrganization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Publisher", sdaiINSTANCE, (void*) i); }
    inline IfcCalendarDate IfcLibraryInformation::get_VersionDate() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VersionDate", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLibraryInformation::put_VersionDate(IfcCalendarDate inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "VersionDate", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcLightSource::get_LightColour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LightColour", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLightSource::put_LightColour(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LightColour", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcLightSourceDirectional::get_Orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Orientation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLightSourceDirectional::put_Orientation(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Orientation", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcLightSourceGoniometric::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLightSourceGoniometric::put_Position(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcLightSourceGoniometric::get_ColourAppearance() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ColourAppearance", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLightSourceGoniometric::put_ColourAppearance(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ColourAppearance", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcLightSourcePositional::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLightSourcePositional::put_Position(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcLightSourceSpot::get_Orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Orientation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLightSourceSpot::put_Orientation(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Orientation", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianPoint IfcLine::get_Pnt() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Pnt", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLine::put_Pnt(IfcCartesianPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Pnt", sdaiINSTANCE, (void*) i); }
    inline IfcVector IfcLine::get_Dir() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Dir", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLine::put_Dir(IfcVector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Dir", sdaiINSTANCE, (void*) i); }
    inline IfcObjectPlacement IfcLocalPlacement::get_PlacementRelTo() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PlacementRelTo", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLocalPlacement::put_PlacementRelTo(IfcObjectPlacement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PlacementRelTo", sdaiINSTANCE, (void*) i); }
    inline IfcCoordinatedUniversalTimeOffset IfcLocalTime::get_Zone() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Zone", sdaiINSTANCE, &inst); return inst; }
    inline void IfcLocalTime::put_Zone(IfcCoordinatedUniversalTimeOffset inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Zone", sdaiINSTANCE, (void*) i); }
    inline IfcRepresentationMap IfcMappedItem::get_MappingSource() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "MappingSource", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMappedItem::put_MappingSource(IfcRepresentationMap inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "MappingSource", sdaiINSTANCE, (void*) i); }
    inline IfcCartesianTransformationOperator IfcMappedItem::get_MappingTarget() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "MappingTarget", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMappedItem::put_MappingTarget(IfcCartesianTransformationOperator inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "MappingTarget", sdaiINSTANCE, (void*) i); }
    inline IfcMaterial IfcMaterialClassificationRelationship::get_ClassifiedMaterial() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ClassifiedMaterial", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMaterialClassificationRelationship::put_ClassifiedMaterial(IfcMaterial inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ClassifiedMaterial", sdaiINSTANCE, (void*) i); }
    inline IfcMaterial IfcMaterialDefinitionRepresentation::get_RepresentedMaterial() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RepresentedMaterial", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMaterialDefinitionRepresentation::put_RepresentedMaterial(IfcMaterial inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RepresentedMaterial", sdaiINSTANCE, (void*) i); }
    inline IfcMaterial IfcMaterialLayer::get_Material() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Material", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMaterialLayer::put_Material(IfcMaterial inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Material", sdaiINSTANCE, (void*) i); }
    inline IfcMaterialLayerSet IfcMaterialLayer::get_ToMaterialLayerSet() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ToMaterialLayerSet", sdaiINSTANCE, &inst); return inst; }
    inline IfcMaterialLayerSet IfcMaterialLayerSetUsage::get_ForLayerSet() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ForLayerSet", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMaterialLayerSetUsage::put_ForLayerSet(IfcMaterialLayerSet inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ForLayerSet", sdaiINSTANCE, (void*) i); }
    inline IfcSpatialStructureElement IfcMove::get_MoveFrom() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "MoveFrom", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMove::put_MoveFrom(IfcSpatialStructureElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "MoveFrom", sdaiINSTANCE, (void*) i); }
    inline IfcSpatialStructureElement IfcMove::get_MoveTo() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "MoveTo", sdaiINSTANCE, &inst); return inst; }
    inline void IfcMove::put_MoveTo(IfcSpatialStructureElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "MoveTo", sdaiINSTANCE, (void*) i); }
    inline IfcMetric IfcObjective::get_BenchmarkValues() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BenchmarkValues", sdaiINSTANCE, &inst); return inst; }
    inline void IfcObjective::put_BenchmarkValues(IfcMetric inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BenchmarkValues", sdaiINSTANCE, (void*) i); }
    inline IfcMetric IfcObjective::get_ResultValues() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ResultValues", sdaiINSTANCE, &inst); return inst; }
    inline void IfcObjective::put_ResultValues(IfcMetric inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ResultValues", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcOffsetCurve2D::get_BasisCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOffsetCurve2D::put_BasisCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcOffsetCurve3D::get_BasisCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOffsetCurve3D::put_BasisCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcOffsetCurve3D::get_RefDirection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RefDirection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOffsetCurve3D::put_RefDirection(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RefDirection", sdaiINSTANCE, (void*) i); }
    inline IfcVector IfcOneDirectionRepeatFactor::get_RepeatFactor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RepeatFactor", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOneDirectionRepeatFactor::put_RepeatFactor(IfcVector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RepeatFactor", sdaiINSTANCE, (void*) i); }
    inline IfcOrganization IfcOrganizationRelationship::get_RelatingOrganization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingOrganization", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOrganizationRelationship::put_RelatingOrganization(IfcOrganization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingOrganization", sdaiINSTANCE, (void*) i); }
    inline IfcEdge IfcOrientedEdge::get_EdgeElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EdgeElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOrientedEdge::put_EdgeElement(IfcEdge inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EdgeElement", sdaiINSTANCE, (void*) i); }
    inline IfcPersonAndOrganization IfcOwnerHistory::get_OwningUser() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OwningUser", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOwnerHistory::put_OwningUser(IfcPersonAndOrganization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OwningUser", sdaiINSTANCE, (void*) i); }
    inline IfcApplication IfcOwnerHistory::get_OwningApplication() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OwningApplication", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOwnerHistory::put_OwningApplication(IfcApplication inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OwningApplication", sdaiINSTANCE, (void*) i); }
    inline IfcPersonAndOrganization IfcOwnerHistory::get_LastModifyingUser() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LastModifyingUser", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOwnerHistory::put_LastModifyingUser(IfcPersonAndOrganization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LastModifyingUser", sdaiINSTANCE, (void*) i); }
    inline IfcApplication IfcOwnerHistory::get_LastModifyingApplication() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LastModifyingApplication", sdaiINSTANCE, &inst); return inst; }
    inline void IfcOwnerHistory::put_LastModifyingApplication(IfcApplication inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LastModifyingApplication", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcPermeableCoveringProperties::get_ShapeAspectStyle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPermeableCoveringProperties::put_ShapeAspectStyle(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, (void*) i); }
    inline IfcPerson IfcPersonAndOrganization::get_ThePerson() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ThePerson", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPersonAndOrganization::put_ThePerson(IfcPerson inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ThePerson", sdaiINSTANCE, (void*) i); }
    inline IfcOrganization IfcPersonAndOrganization::get_TheOrganization() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TheOrganization", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPersonAndOrganization::put_TheOrganization(IfcOrganization inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TheOrganization", sdaiINSTANCE, (void*) i); }
    inline IfcNamedUnit IfcPhysicalSimpleQuantity::get_Unit() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Unit", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPhysicalSimpleQuantity::put_Unit(IfcNamedUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Unit", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcPointOnCurve::get_BasisCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPointOnCurve::put_BasisCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, (void*) i); }
    inline IfcSurface IfcPointOnSurface::get_BasisSurface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisSurface", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPointOnSurface::put_BasisSurface(IfcSurface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisSurface", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcPolygonalBoundedHalfSpace::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPolygonalBoundedHalfSpace::put_Position(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcBoundedCurve IfcPolygonalBoundedHalfSpace::get_PolygonalBoundary() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PolygonalBoundary", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPolygonalBoundedHalfSpace::put_PolygonalBoundary(IfcBoundedCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PolygonalBoundary", sdaiINSTANCE, (void*) i); }
    inline IfcUnitAssignment IfcProject::get_UnitsInContext() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "UnitsInContext", sdaiINSTANCE, &inst); return inst; }
    inline void IfcProject::put_UnitsInContext(IfcUnitAssignment inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "UnitsInContext", sdaiINSTANCE, (void*) i); }
    inline IfcConstraint IfcPropertyConstraintRelationship::get_RelatingConstraint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPropertyConstraintRelationship::put_RelatingConstraint(IfcConstraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, (void*) i); }
    inline IfcProperty IfcPropertyDependencyRelationship::get_DependingProperty() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "DependingProperty", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPropertyDependencyRelationship::put_DependingProperty(IfcProperty inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "DependingProperty", sdaiINSTANCE, (void*) i); }
    inline IfcProperty IfcPropertyDependencyRelationship::get_DependantProperty() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "DependantProperty", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPropertyDependencyRelationship::put_DependantProperty(IfcProperty inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "DependantProperty", sdaiINSTANCE, (void*) i); }
    inline IfcPropertyEnumeration IfcPropertyEnumeratedValue::get_EnumerationReference() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EnumerationReference", sdaiINSTANCE, &inst); return inst; }
    inline void IfcPropertyEnumeratedValue::put_EnumerationReference(IfcPropertyEnumeration inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EnumerationReference", sdaiINSTANCE, (void*) i); }
    inline IfcSurface IfcRectangularTrimmedSurface::get_BasisSurface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisSurface", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRectangularTrimmedSurface::put_BasisSurface(IfcSurface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisSurface", sdaiINSTANCE, (void*) i); }
    inline IfcObjectDefinition IfcRelDecomposes::get_RelatingObject() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingObject", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelDecomposes::put_RelatingObject(IfcObjectDefinition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingObject", sdaiINSTANCE, (void*) i); }
    inline IfcControl IfcRelAssignsToControl::get_RelatingControl() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingControl", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToControl::put_RelatingControl(IfcControl inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingControl", sdaiINSTANCE, (void*) i); }
    inline IfcScheduleTimeControl IfcRelAssignsTasks::get_TimeForTask() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TimeForTask", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsTasks::put_TimeForTask(IfcScheduleTimeControl inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TimeForTask", sdaiINSTANCE, (void*) i); }
    inline IfcActor IfcRelAssignsToActor::get_RelatingActor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingActor", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToActor::put_RelatingActor(IfcActor inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingActor", sdaiINSTANCE, (void*) i); }
    inline IfcActorRole IfcRelAssignsToActor::get_ActingRole() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ActingRole", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToActor::put_ActingRole(IfcActorRole inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ActingRole", sdaiINSTANCE, (void*) i); }
    inline IfcGroup IfcRelAssignsToGroup::get_RelatingGroup() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingGroup", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToGroup::put_RelatingGroup(IfcGroup inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingGroup", sdaiINSTANCE, (void*) i); }
    inline IfcProcess IfcRelAssignsToProcess::get_RelatingProcess() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingProcess", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToProcess::put_RelatingProcess(IfcProcess inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingProcess", sdaiINSTANCE, (void*) i); }
    inline IfcMeasureWithUnit IfcRelAssignsToProcess::get_QuantityInProcess() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "QuantityInProcess", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToProcess::put_QuantityInProcess(IfcMeasureWithUnit inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "QuantityInProcess", sdaiINSTANCE, (void*) i); }
    inline IfcProduct IfcRelAssignsToProduct::get_RelatingProduct() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingProduct", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToProduct::put_RelatingProduct(IfcProduct inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingProduct", sdaiINSTANCE, (void*) i); }
    inline IfcResource IfcRelAssignsToResource::get_RelatingResource() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingResource", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssignsToResource::put_RelatingResource(IfcResource inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingResource", sdaiINSTANCE, (void*) i); }
    inline IfcAppliedValue IfcRelAssociatesAppliedValue::get_RelatingAppliedValue() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingAppliedValue", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssociatesAppliedValue::put_RelatingAppliedValue(IfcAppliedValue inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingAppliedValue", sdaiINSTANCE, (void*) i); }
    inline IfcApproval IfcRelAssociatesApproval::get_RelatingApproval() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingApproval", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssociatesApproval::put_RelatingApproval(IfcApproval inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingApproval", sdaiINSTANCE, (void*) i); }
    inline IfcConstraint IfcRelAssociatesConstraint::get_RelatingConstraint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssociatesConstraint::put_RelatingConstraint(IfcConstraint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingConstraint", sdaiINSTANCE, (void*) i); }
    inline IfcProfileProperties IfcRelAssociatesProfileProperties::get_RelatingProfileProperties() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingProfileProperties", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssociatesProfileProperties::put_RelatingProfileProperties(IfcProfileProperties inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingProfileProperties", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcRelAssociatesProfileProperties::get_ProfileSectionLocation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ProfileSectionLocation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelAssociatesProfileProperties::put_ProfileSectionLocation(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ProfileSectionLocation", sdaiINSTANCE, (void*) i); }
    inline IfcConnectionGeometry IfcRelConnectsElements::get_ConnectionGeometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ConnectionGeometry", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsElements::put_ConnectionGeometry(IfcConnectionGeometry inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ConnectionGeometry", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelConnectsElements::get_RelatingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsElements::put_RelatingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingElement", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelConnectsElements::get_RelatedElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsElements::put_RelatedElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedElement", sdaiINSTANCE, (void*) i); }
    inline IfcPort IfcRelConnectsPorts::get_RelatingPort() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingPort", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsPorts::put_RelatingPort(IfcPort inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingPort", sdaiINSTANCE, (void*) i); }
    inline IfcPort IfcRelConnectsPorts::get_RelatedPort() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedPort", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsPorts::put_RelatedPort(IfcPort inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedPort", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelConnectsPorts::get_RealizingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RealizingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsPorts::put_RealizingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RealizingElement", sdaiINSTANCE, (void*) i); }
    inline IfcPort IfcRelConnectsPortToElement::get_RelatingPort() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingPort", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsPortToElement::put_RelatingPort(IfcPort inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingPort", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelConnectsPortToElement::get_RelatedElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsPortToElement::put_RelatedElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedElement", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralActivity IfcRelConnectsStructuralActivity::get_RelatedStructuralActivity() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedStructuralActivity", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralActivity::put_RelatedStructuralActivity(IfcStructuralActivity inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedStructuralActivity", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelConnectsStructuralElement::get_RelatingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralElement::put_RelatingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingElement", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralMember IfcRelConnectsStructuralElement::get_RelatedStructuralMember() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedStructuralMember", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralElement::put_RelatedStructuralMember(IfcStructuralMember inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedStructuralMember", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralMember IfcRelConnectsStructuralMember::get_RelatingStructuralMember() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingStructuralMember", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralMember::put_RelatingStructuralMember(IfcStructuralMember inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingStructuralMember", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralConnection IfcRelConnectsStructuralMember::get_RelatedStructuralConnection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedStructuralConnection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralMember::put_RelatedStructuralConnection(IfcStructuralConnection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedStructuralConnection", sdaiINSTANCE, (void*) i); }
    inline IfcBoundaryCondition IfcRelConnectsStructuralMember::get_AppliedCondition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AppliedCondition", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralMember::put_AppliedCondition(IfcBoundaryCondition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AppliedCondition", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralConnectionCondition IfcRelConnectsStructuralMember::get_AdditionalConditions() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AdditionalConditions", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralMember::put_AdditionalConditions(IfcStructuralConnectionCondition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AdditionalConditions", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcRelConnectsStructuralMember::get_ConditionCoordinateSystem() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ConditionCoordinateSystem", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsStructuralMember::put_ConditionCoordinateSystem(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ConditionCoordinateSystem", sdaiINSTANCE, (void*) i); }
    inline IfcConnectionGeometry IfcRelConnectsWithEccentricity::get_ConnectionConstraint() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ConnectionConstraint", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelConnectsWithEccentricity::put_ConnectionConstraint(IfcConnectionGeometry inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ConnectionConstraint", sdaiINSTANCE, (void*) i); }
    inline IfcSpatialStructureElement IfcRelContainedInSpatialStructure::get_RelatingStructure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingStructure", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelContainedInSpatialStructure::put_RelatingStructure(IfcSpatialStructureElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingStructure", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelCoversBldgElements::get_RelatingBuildingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingBuildingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelCoversBldgElements::put_RelatingBuildingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingBuildingElement", sdaiINSTANCE, (void*) i); }
    inline IfcSpace IfcRelCoversSpaces::get_RelatedSpace() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedSpace", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelCoversSpaces::put_RelatedSpace(IfcSpace inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedSpace", sdaiINSTANCE, (void*) i); }
    inline IfcPropertySetDefinition IfcRelDefinesByProperties::get_RelatingPropertyDefinition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingPropertyDefinition", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelDefinesByProperties::put_RelatingPropertyDefinition(IfcPropertySetDefinition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingPropertyDefinition", sdaiINSTANCE, (void*) i); }
    inline IfcTypeObject IfcRelDefinesByType::get_RelatingType() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingType", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelDefinesByType::put_RelatingType(IfcTypeObject inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingType", sdaiINSTANCE, (void*) i); }
    inline IfcOpeningElement IfcRelFillsElement::get_RelatingOpeningElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingOpeningElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelFillsElement::put_RelatingOpeningElement(IfcOpeningElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingOpeningElement", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelFillsElement::get_RelatedBuildingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedBuildingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelFillsElement::put_RelatedBuildingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedBuildingElement", sdaiINSTANCE, (void*) i); }
    inline IfcDistributionFlowElement IfcRelFlowControlElements::get_RelatingFlowElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingFlowElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelFlowControlElements::put_RelatingFlowElement(IfcDistributionFlowElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingFlowElement", sdaiINSTANCE, (void*) i); }
    inline IfcSpatialStructureElement IfcRelInteractionRequirements::get_LocationOfInteraction() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LocationOfInteraction", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelInteractionRequirements::put_LocationOfInteraction(IfcSpatialStructureElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LocationOfInteraction", sdaiINSTANCE, (void*) i); }
    inline IfcSpaceProgram IfcRelInteractionRequirements::get_RelatedSpaceProgram() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedSpaceProgram", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelInteractionRequirements::put_RelatedSpaceProgram(IfcSpaceProgram inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedSpaceProgram", sdaiINSTANCE, (void*) i); }
    inline IfcSpaceProgram IfcRelInteractionRequirements::get_RelatingSpaceProgram() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingSpaceProgram", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelInteractionRequirements::put_RelatingSpaceProgram(IfcSpaceProgram inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingSpaceProgram", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelProjectsElement::get_RelatingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelProjectsElement::put_RelatingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingElement", sdaiINSTANCE, (void*) i); }
    inline IfcFeatureElementAddition IfcRelProjectsElement::get_RelatedFeatureElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedFeatureElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelProjectsElement::put_RelatedFeatureElement(IfcFeatureElementAddition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedFeatureElement", sdaiINSTANCE, (void*) i); }
    inline IfcSpatialStructureElement IfcRelReferencedInSpatialStructure::get_RelatingStructure() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingStructure", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelReferencedInSpatialStructure::put_RelatingStructure(IfcSpatialStructureElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingStructure", sdaiINSTANCE, (void*) i); }
    inline IfcProcess IfcRelSequence::get_RelatingProcess() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingProcess", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelSequence::put_RelatingProcess(IfcProcess inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingProcess", sdaiINSTANCE, (void*) i); }
    inline IfcProcess IfcRelSequence::get_RelatedProcess() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedProcess", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelSequence::put_RelatedProcess(IfcProcess inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedProcess", sdaiINSTANCE, (void*) i); }
    inline IfcSystem IfcRelServicesBuildings::get_RelatingSystem() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingSystem", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelServicesBuildings::put_RelatingSystem(IfcSystem inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingSystem", sdaiINSTANCE, (void*) i); }
    inline IfcSpace IfcRelSpaceBoundary::get_RelatingSpace() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingSpace", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelSpaceBoundary::put_RelatingSpace(IfcSpace inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingSpace", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelSpaceBoundary::get_RelatedBuildingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedBuildingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelSpaceBoundary::put_RelatedBuildingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedBuildingElement", sdaiINSTANCE, (void*) i); }
    inline IfcConnectionGeometry IfcRelSpaceBoundary::get_ConnectionGeometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ConnectionGeometry", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelSpaceBoundary::put_ConnectionGeometry(IfcConnectionGeometry inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ConnectionGeometry", sdaiINSTANCE, (void*) i); }
    inline IfcElement IfcRelVoidsElement::get_RelatingBuildingElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatingBuildingElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelVoidsElement::put_RelatingBuildingElement(IfcElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatingBuildingElement", sdaiINSTANCE, (void*) i); }
    inline IfcFeatureElementSubtraction IfcRelVoidsElement::get_RelatedOpeningElement() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RelatedOpeningElement", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRelVoidsElement::put_RelatedOpeningElement(IfcFeatureElementSubtraction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RelatedOpeningElement", sdaiINSTANCE, (void*) i); }
    inline IfcRepresentationContext IfcRepresentation::get_ContextOfItems() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ContextOfItems", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRepresentation::put_ContextOfItems(IfcRepresentationContext inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ContextOfItems", sdaiINSTANCE, (void*) i); }
    inline IfcRepresentation IfcRepresentationMap::get_MappedRepresentation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "MappedRepresentation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRepresentationMap::put_MappedRepresentation(IfcRepresentation inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "MappedRepresentation", sdaiINSTANCE, (void*) i); }
    inline IfcAxis1Placement IfcRevolvedAreaSolid::get_Axis() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Axis", sdaiINSTANCE, &inst); return inst; }
    inline void IfcRevolvedAreaSolid::put_Axis(IfcAxis1Placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Axis", sdaiINSTANCE, (void*) i); }
    inline IfcRelAssignsTasks IfcScheduleTimeControl::get_ScheduleTimeControlAssigned() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ScheduleTimeControlAssigned", sdaiINSTANCE, &inst); return inst; }
    inline IfcCompositeCurve IfcSectionedSpine::get_SpineCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SpineCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSectionedSpine::put_SpineCurve(IfcCompositeCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SpineCurve", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcSectionProperties::get_StartProfile() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "StartProfile", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSectionProperties::put_StartProfile(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "StartProfile", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcSectionProperties::get_EndProfile() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "EndProfile", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSectionProperties::put_EndProfile(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "EndProfile", sdaiINSTANCE, (void*) i); }
    inline IfcSectionProperties IfcSectionReinforcementProperties::get_SectionDefinition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SectionDefinition", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSectionReinforcementProperties::put_SectionDefinition(IfcSectionProperties inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SectionDefinition", sdaiINSTANCE, (void*) i); }
    inline IfcProductDefinitionShape IfcShapeAspect::get_PartOfProductDefinitionShape() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "PartOfProductDefinitionShape", sdaiINSTANCE, &inst); return inst; }
    inline void IfcShapeAspect::put_PartOfProductDefinitionShape(IfcProductDefinitionShape inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "PartOfProductDefinitionShape", sdaiINSTANCE, (void*) i); }
    inline IfcPostalAddress IfcSite::get_SiteAddress() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SiteAddress", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSite::put_SiteAddress(IfcPostalAddress inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SiteAddress", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcSoundValue::get_SoundLevelTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SoundLevelTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSoundValue::put_SoundLevelTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SoundLevelTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcSpatialStructureElement IfcSpaceProgram::get_RequestedLocation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "RequestedLocation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSpaceProgram::put_RequestedLocation(IfcSpatialStructureElement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "RequestedLocation", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcSpaceThermalLoadProperties::get_ThermalLoadTimeSeriesValues() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ThermalLoadTimeSeriesValues", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSpaceThermalLoadProperties::put_ThermalLoadTimeSeriesValues(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ThermalLoadTimeSeriesValues", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralLoad IfcStructuralActivity::get_AppliedLoad() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AppliedLoad", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralActivity::put_AppliedLoad(IfcStructuralLoad inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AppliedLoad", sdaiINSTANCE, (void*) i); }
    inline IfcRelConnectsStructuralActivity IfcStructuralActivity::get_AssignedToStructuralItem() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AssignedToStructuralItem", sdaiINSTANCE, &inst); return inst; }
    inline IfcStructuralReaction IfcStructuralAction::get_CausedBy() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "CausedBy", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralAction::put_CausedBy(IfcStructuralReaction inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "CausedBy", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcStructuralAnalysisModel::get_OrientationOf2DPlane() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OrientationOf2DPlane", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralAnalysisModel::put_OrientationOf2DPlane(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "OrientationOf2DPlane", sdaiINSTANCE, (void*) i); }
    inline IfcBoundaryCondition IfcStructuralConnection::get_AppliedCondition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AppliedCondition", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralConnection::put_AppliedCondition(IfcBoundaryCondition inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AppliedCondition", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcStructuralLinearActionVarying::get_VaryingAppliedLoadLocation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VaryingAppliedLoadLocation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralLinearActionVarying::put_VaryingAppliedLoadLocation(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "VaryingAppliedLoadLocation", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcStructuralPlanarActionVarying::get_VaryingAppliedLoadLocation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VaryingAppliedLoadLocation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralPlanarActionVarying::put_VaryingAppliedLoadLocation(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "VaryingAppliedLoadLocation", sdaiINSTANCE, (void*) i); }
    inline IfcStructuralLoadGroup IfcStructuralResultGroup::get_ResultForLoadGroup() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ResultForLoadGroup", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralResultGroup::put_ResultForLoadGroup(IfcStructuralLoadGroup inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ResultForLoadGroup", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcStructuralSurfaceMemberVarying::get_VaryingThicknessLocation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VaryingThicknessLocation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcStructuralSurfaceMemberVarying::put_VaryingThicknessLocation(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "VaryingThicknessLocation", sdaiINSTANCE, (void*) i); }
    inline IfcEdge IfcSubedge::get_ParentEdge() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ParentEdge", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSubedge::put_ParentEdge(IfcEdge inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ParentEdge", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcSurfaceCurveSweptAreaSolid::get_Directrix() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Directrix", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceCurveSweptAreaSolid::put_Directrix(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Directrix", sdaiINSTANCE, (void*) i); }
    inline IfcSurface IfcSurfaceCurveSweptAreaSolid::get_ReferenceSurface() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ReferenceSurface", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceCurveSweptAreaSolid::put_ReferenceSurface(IfcSurface inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ReferenceSurface", sdaiINSTANCE, (void*) i); }
    inline IfcProfileDef IfcSweptSurface::get_SweptCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SweptCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSweptSurface::put_SweptCurve(IfcProfileDef inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SweptCurve", sdaiINSTANCE, (void*) i); }
    inline IfcAxis2Placement3D IfcSweptSurface::get_Position() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Position", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSweptSurface::put_Position(IfcAxis2Placement3D inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Position", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcSurfaceOfLinearExtrusion::get_ExtrudedDirection() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ExtrudedDirection", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceOfLinearExtrusion::put_ExtrudedDirection(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ExtrudedDirection", sdaiINSTANCE, (void*) i); }
    inline IfcAxis1Placement IfcSurfaceOfRevolution::get_AxisPosition() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "AxisPosition", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceOfRevolution::put_AxisPosition(IfcAxis1Placement inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "AxisPosition", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcSurfaceStyleLighting::get_DiffuseTransmissionColour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "DiffuseTransmissionColour", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceStyleLighting::put_DiffuseTransmissionColour(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "DiffuseTransmissionColour", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcSurfaceStyleLighting::get_DiffuseReflectionColour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "DiffuseReflectionColour", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceStyleLighting::put_DiffuseReflectionColour(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "DiffuseReflectionColour", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcSurfaceStyleLighting::get_TransmissionColour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TransmissionColour", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceStyleLighting::put_TransmissionColour(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TransmissionColour", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcSurfaceStyleLighting::get_ReflectanceColour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ReflectanceColour", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceStyleLighting::put_ReflectanceColour(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ReflectanceColour", sdaiINSTANCE, (void*) i); }
    inline IfcColourRgb IfcSurfaceStyleShading::get_SurfaceColour() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SurfaceColour", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSurfaceStyleShading::put_SurfaceColour(IfcColourRgb inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SurfaceColour", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcSweptDiskSolid::get_Directrix() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Directrix", sdaiINSTANCE, &inst); return inst; }
    inline void IfcSweptDiskSolid::put_Directrix(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Directrix", sdaiINSTANCE, (void*) i); }
    inline IfcTable IfcTableRow::get_OfTable() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "OfTable", sdaiINSTANCE, &inst); return inst; }
    inline IfcPlanarExtent IfcTextLiteralWithExtent::get_Extent() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Extent", sdaiINSTANCE, &inst); return inst; }
    inline void IfcTextLiteralWithExtent::put_Extent(IfcPlanarExtent inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Extent", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcTimeSeriesReferenceRelationship::get_ReferencedTimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ReferencedTimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcTimeSeriesReferenceRelationship::put_ReferencedTimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ReferencedTimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcTimeSeries IfcTimeSeriesSchedule::get_TimeSeries() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "TimeSeries", sdaiINSTANCE, &inst); return inst; }
    inline void IfcTimeSeriesSchedule::put_TimeSeries(IfcTimeSeries inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "TimeSeries", sdaiINSTANCE, (void*) i); }
    inline IfcCurve IfcTrimmedCurve::get_BasisCurve() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, &inst); return inst; }
    inline void IfcTrimmedCurve::put_BasisCurve(IfcCurve inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "BasisCurve", sdaiINSTANCE, (void*) i); }
    inline IfcVector IfcTwoDirectionRepeatFactor::get_SecondRepeatFactor() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "SecondRepeatFactor", sdaiINSTANCE, &inst); return inst; }
    inline void IfcTwoDirectionRepeatFactor::put_SecondRepeatFactor(IfcVector inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "SecondRepeatFactor", sdaiINSTANCE, (void*) i); }
    inline IfcDirection IfcVector::get_Orientation() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "Orientation", sdaiINSTANCE, &inst); return inst; }
    inline void IfcVector::put_Orientation(IfcDirection inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "Orientation", sdaiINSTANCE, (void*) i); }
    inline IfcVertex IfcVertexLoop::get_LoopVertex() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "LoopVertex", sdaiINSTANCE, &inst); return inst; }
    inline void IfcVertexLoop::put_LoopVertex(IfcVertex inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "LoopVertex", sdaiINSTANCE, (void*) i); }
    inline IfcPoint IfcVertexPoint::get_VertexGeometry() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "VertexGeometry", sdaiINSTANCE, &inst); return inst; }
    inline void IfcVertexPoint::put_VertexGeometry(IfcPoint inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "VertexGeometry", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcWindowLiningProperties::get_ShapeAspectStyle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, &inst); return inst; }
    inline void IfcWindowLiningProperties::put_ShapeAspectStyle(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, (void*) i); }
    inline IfcShapeAspect IfcWindowPanelProperties::get_ShapeAspectStyle() { SdaiInstance inst = 0; sdaiGetAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, &inst); return inst; }
    inline void IfcWindowPanelProperties::put_ShapeAspectStyle(IfcShapeAspect inst) { SdaiInstance i = inst;  sdaiPutAttrBN(m_instance, "ShapeAspectStyle", sdaiINSTANCE, (void*) i); }

}

#endif //__RDF_LTD__IFC2x3_H
